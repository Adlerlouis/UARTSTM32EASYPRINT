
USART5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa9c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800ac50  0800ac50  0000bc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b184  0800b184  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b184  0800b184  0000c184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b18c  0800b18c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b18c  0800b18c  0000c18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b190  0800b190  0000c190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b194  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          000007fc  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009d0  200009d0  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012664  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271e  00000000  00000000  0001f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  00021f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c58  00000000  00000000  00022f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002685e  00000000  00000000  00023bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012874  00000000  00000000  0004a40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eaf87  00000000  00000000  0005cc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00147c09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c50  00000000  00000000  00147c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0014d89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ac34 	.word	0x0800ac34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800ac34 	.word	0x0800ac34

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b094      	sub	sp, #80	@ 0x50
 8001008:	af00      	add	r7, sp, #0
       /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100a:	f000 fd9b 	bl	8001b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f85d 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f000 f96d 	bl	80012f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001016:	f000 f915 	bl	8001244 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 800101a:	f000 f93d 	bl	8001298 <MX_USB_OTG_HS_HCD_Init>
  MX_ADC1_Init();
 800101e:	f000 f8bf 	bl	80011a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8001022:	481f      	ldr	r0, [pc, #124]	@ (80010a0 <main+0x9c>)
 8001024:	f000 faa6 	bl	8001574 <RetargetInit>
  SampleFilter_init (&fir);
 8001028:	481e      	ldr	r0, [pc, #120]	@ (80010a4 <main+0xa0>)
 800102a:	f000 fa6f 	bl	800150c <SampleFilter_init>
		 volatile int num,usr;
		volatile  char nombre[50]; //CADENNA DE TEXIO ESTATICO
		volatile  char nombre2[20];//CADENA DE TEXTO DINAMICO
	  };
	   struct Formulario  F;
	   strcpy(F.nombre,"den den totot toto "); //PASAMOS PARAMETROS
 800102e:	463b      	mov	r3, r7
 8001030:	3308      	adds	r3, #8
 8001032:	4a1d      	ldr	r2, [pc, #116]	@ (80010a8 <main+0xa4>)
 8001034:	461c      	mov	r4, r3
 8001036:	4615      	mov	r5, r2
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	6023      	str	r3, [r4, #0]
	   F.num=4;
 8001040:	2304      	movs	r3, #4
 8001042:	603b      	str	r3, [r7, #0]
	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  //Creamos un ligero formulario para con structs y comunicacion serial
	  while (1)
	  {
	    printf("introduce nombre  \n");
 8001044:	4819      	ldr	r0, [pc, #100]	@ (80010ac <main+0xa8>)
 8001046:	f005 fbf5 	bl	8006834 <puts>
	    scanf("%s",&F.nombre2);
 800104a:	463b      	mov	r3, r7
 800104c:	333a      	adds	r3, #58	@ 0x3a
 800104e:	4619      	mov	r1, r3
 8001050:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <main+0xac>)
 8001052:	f005 fbf7 	bl	8006844 <iscanf>
	    printf("introduce tu usuario");
 8001056:	4817      	ldr	r0, [pc, #92]	@ (80010b4 <main+0xb0>)
 8001058:	f005 fb84 	bl	8006764 <iprintf>
	    scanf("%d",&F.usr);
 800105c:	463b      	mov	r3, r7
 800105e:	3304      	adds	r3, #4
 8001060:	4619      	mov	r1, r3
 8001062:	4815      	ldr	r0, [pc, #84]	@ (80010b8 <main+0xb4>)
 8001064:	f005 fbee 	bl	8006844 <iscanf>
		printf("\r\nHello este es el numero:  %d!\n",F.num);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	4813      	ldr	r0, [pc, #76]	@ (80010bc <main+0xb8>)
 800106e:	f005 fb79 	bl	8006764 <iprintf>
		printf("\r\nHello este   el usuario:  %d!\n",F.usr);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4619      	mov	r1, r3
 8001076:	4812      	ldr	r0, [pc, #72]	@ (80010c0 <main+0xbc>)
 8001078:	f005 fb74 	bl	8006764 <iprintf>
		printf("\r\nHello name static, %s!\r\n",&F.nombre);
 800107c:	463b      	mov	r3, r7
 800107e:	3308      	adds	r3, #8
 8001080:	4619      	mov	r1, r3
 8001082:	4810      	ldr	r0, [pc, #64]	@ (80010c4 <main+0xc0>)
 8001084:	f005 fb6e 	bl	8006764 <iprintf>
		printf("\r\nHello name example, %s!\r\n",&F.nombre2);
 8001088:	463b      	mov	r3, r7
 800108a:	333a      	adds	r3, #58	@ 0x3a
 800108c:	4619      	mov	r1, r3
 800108e:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <main+0xc4>)
 8001090:	f005 fb68 	bl	8006764 <iprintf>
		return 0;
 8001094:	2300      	movs	r3, #0


	     }

	     return 0;
	 */ }
 8001096:	4618      	mov	r0, r3
 8001098:	3750      	adds	r7, #80	@ 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000238 	.word	0x20000238
 80010a4:	20000580 	.word	0x20000580
 80010a8:	0800ac50 	.word	0x0800ac50
 80010ac:	0800ac64 	.word	0x0800ac64
 80010b0:	0800ac78 	.word	0x0800ac78
 80010b4:	0800ac7c 	.word	0x0800ac7c
 80010b8:	0800ac94 	.word	0x0800ac94
 80010bc:	0800ac98 	.word	0x0800ac98
 80010c0:	0800acbc 	.word	0x0800acbc
 80010c4:	0800ace0 	.word	0x0800ace0
 80010c8:	0800acfc 	.word	0x0800acfc

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	@ 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2230      	movs	r2, #48	@ 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f005 fd70 	bl	8006bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <SystemClock_Config+0xcc>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <SystemClock_Config+0xcc>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001100:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <SystemClock_Config+0xcc>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b22      	ldr	r3, [pc, #136]	@ (800119c <SystemClock_Config+0xd0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001118:	4a20      	ldr	r2, [pc, #128]	@ (800119c <SystemClock_Config+0xd0>)
 800111a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <SystemClock_Config+0xd0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112c:	2301      	movs	r3, #1
 800112e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001130:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001136:	2302      	movs	r3, #2
 8001138:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001144:	2348      	movs	r3, #72	@ 0x48
 8001146:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800114c:	2303      	movs	r3, #3
 800114e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	4618      	mov	r0, r3
 8001156:	f002 fc25 	bl	80039a4 <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001160:	f000 fa02 	bl	8001568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2302      	movs	r3, #2
 800116a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001174:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2102      	movs	r1, #2
 8001180:	4618      	mov	r0, r3
 8001182:	f002 fe87 	bl	8003e94 <HAL_RCC_ClockConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800118c:	f000 f9ec 	bl	8001568 <Error_Handler>
  }
}
 8001190:	bf00      	nop
 8001192:	3750      	adds	r7, #80	@ 0x50
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011b4:	4a21      	ldr	r2, [pc, #132]	@ (800123c <MX_ADC1_Init+0x9c>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011be:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d0:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011e0:	4a17      	ldr	r2, [pc, #92]	@ (8001240 <MX_ADC1_Init+0xa0>)
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_ADC1_Init+0x98>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011fe:	480e      	ldr	r0, [pc, #56]	@ (8001238 <MX_ADC1_Init+0x98>)
 8001200:	f000 fd06 	bl	8001c10 <HAL_ADC_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800120a:	f000 f9ad 	bl	8001568 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800120e:	2305      	movs	r3, #5
 8001210:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001212:	2301      	movs	r3, #1
 8001214:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	@ (8001238 <MX_ADC1_Init+0x98>)
 8001220:	f000 fd3a 	bl	8001c98 <HAL_ADC_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800122a:	f000 f99d 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001f0 	.word	0x200001f0
 800123c:	40012000 	.word	0x40012000
 8001240:	0f000001 	.word	0x0f000001

08001244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <MX_USART1_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800127c:	f003 fb0a 	bl	8004894 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 f96f 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000238 	.word	0x20000238
 8001294:	40011000 	.word	0x40011000

08001298 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800129e:	4a13      	ldr	r2, [pc, #76]	@ (80012ec <MX_USB_OTG_HS_HCD_Init+0x54>)
 80012a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012a4:	220c      	movs	r2, #12
 80012a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012b6:	2202      	movs	r2, #2
 80012b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80012d4:	f001 f9b5 	bl	8002642 <HAL_HCD_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 80012de:	f000 f943 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000027c 	.word	0x2000027c
 80012ec:	40040000 	.word	0x40040000

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	4b7a      	ldr	r3, [pc, #488]	@ (80014f4 <MX_GPIO_Init+0x204>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a79      	ldr	r2, [pc, #484]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b77      	ldr	r3, [pc, #476]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	4b73      	ldr	r3, [pc, #460]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a72      	ldr	r2, [pc, #456]	@ (80014f4 <MX_GPIO_Init+0x204>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b70      	ldr	r3, [pc, #448]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b6c      	ldr	r3, [pc, #432]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a6b      	ldr	r2, [pc, #428]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b69      	ldr	r3, [pc, #420]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b65      	ldr	r3, [pc, #404]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a64      	ldr	r2, [pc, #400]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b62      	ldr	r3, [pc, #392]	@ (80014f4 <MX_GPIO_Init+0x204>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b5e      	ldr	r3, [pc, #376]	@ (80014f4 <MX_GPIO_Init+0x204>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a5d      	ldr	r2, [pc, #372]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b5b      	ldr	r3, [pc, #364]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b57      	ldr	r3, [pc, #348]	@ (80014f4 <MX_GPIO_Init+0x204>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a56      	ldr	r2, [pc, #344]	@ (80014f4 <MX_GPIO_Init+0x204>)
 800139c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b54      	ldr	r3, [pc, #336]	@ (80014f4 <MX_GPIO_Init+0x204>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2116      	movs	r1, #22
 80013b2:	4851      	ldr	r0, [pc, #324]	@ (80014f8 <MX_GPIO_Init+0x208>)
 80013b4:	f001 f92c 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2180      	movs	r1, #128	@ 0x80
 80013bc:	484f      	ldr	r0, [pc, #316]	@ (80014fc <MX_GPIO_Init+0x20c>)
 80013be:	f001 f927 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80013c8:	484d      	ldr	r0, [pc, #308]	@ (8001500 <MX_GPIO_Init+0x210>)
 80013ca:	f001 f921 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80013d4:	484b      	ldr	r0, [pc, #300]	@ (8001504 <MX_GPIO_Init+0x214>)
 80013d6:	f001 f91b 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80013da:	2316      	movs	r3, #22
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4841      	ldr	r0, [pc, #260]	@ (80014f8 <MX_GPIO_Init+0x208>)
 80013f2:	f000 ff61 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 80013f6:	2307      	movs	r3, #7
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013fa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	483c      	ldr	r0, [pc, #240]	@ (80014fc <MX_GPIO_Init+0x20c>)
 800140c:	f000 ff54 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4835      	ldr	r0, [pc, #212]	@ (80014fc <MX_GPIO_Init+0x20c>)
 8001428:	f000 ff46 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800142c:	2320      	movs	r3, #32
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001430:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	482d      	ldr	r0, [pc, #180]	@ (80014f8 <MX_GPIO_Init+0x208>)
 8001442:	f000 ff39 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001446:	2304      	movs	r3, #4
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	482b      	ldr	r0, [pc, #172]	@ (8001508 <MX_GPIO_Init+0x218>)
 800145a:	f000 ff2d 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800145e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001464:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4822      	ldr	r0, [pc, #136]	@ (8001500 <MX_GPIO_Init+0x210>)
 8001476:	f000 ff1f 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800147a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	481c      	ldr	r0, [pc, #112]	@ (8001500 <MX_GPIO_Init+0x210>)
 8001490:	f000 ff12 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001494:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4814      	ldr	r0, [pc, #80]	@ (8001500 <MX_GPIO_Init+0x210>)
 80014ae:	f000 ff03 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014b2:	2380      	movs	r3, #128	@ 0x80
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	480f      	ldr	r0, [pc, #60]	@ (8001504 <MX_GPIO_Init+0x214>)
 80014c8:	f000 fef6 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80014cc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4807      	ldr	r0, [pc, #28]	@ (8001504 <MX_GPIO_Init+0x214>)
 80014e6:	f000 fee7 	bl	80022b8 <HAL_GPIO_Init>

}
 80014ea:	bf00      	nop
 80014ec:	3730      	adds	r7, #48	@ 0x30
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40021800 	.word	0x40021800
 8001508:	40020400 	.word	0x40020400

0800150c <SampleFilter_init>:
/* USER CODE BEGIN 4 */
// Se utililza para poder codigo emergente para funcioes



void SampleFilter_init(SampleFilter* f) {
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint8_t count;
  for(count = 0; count < SAMPLEFILTER_TAP_NUM; ++count)
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e007      	b.n	800152a <SampleFilter_init+0x1e>
    f->history[count] = 0;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2100      	movs	r1, #0
 8001520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(count = 0; count < SAMPLEFILTER_TAP_NUM; ++count)
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	3301      	adds	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2baa      	cmp	r3, #170	@ 0xaa
 800152e:	d9f4      	bls.n	800151a <SampleFilter_init+0xe>
  f->last_index = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f8c3 22ac 	str.w	r2, [r3, #684]	@ 0x2ac
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001556:	f000 fb17 	bl	8001b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40001000 	.word	0x40001000

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <Error_Handler+0x8>

08001574 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800157c:	4a07      	ldr	r2, [pc, #28]	@ (800159c <RetargetInit+0x28>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001582:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <RetargetInit+0x2c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6898      	ldr	r0, [r3, #8]
 8001588:	2300      	movs	r3, #0
 800158a:	2202      	movs	r2, #2
 800158c:	2100      	movs	r1, #0
 800158e:	f005 f96b 	bl	8006868 <setvbuf>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000830 	.word	0x20000830
 80015a0:	20000018 	.word	0x20000018

080015a4 <_isatty>:

int _isatty(int fd) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db04      	blt.n	80015bc <_isatty+0x18>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	dc01      	bgt.n	80015bc <_isatty+0x18>
    return 1;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e005      	b.n	80015c8 <_isatty+0x24>

  errno = EBADF;
 80015bc:	f005 fb52 	bl	8006c64 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2209      	movs	r2, #9
 80015c4:	601a      	str	r2, [r3, #0]
  return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_write>:

int _write(int fd, char* ptr, int len) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d002      	beq.n	80015e8 <_write+0x18>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d111      	bne.n	800160c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <_write+0x54>)
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	f003 f99a 	bl	800492e <HAL_UART_Transmit>
 80015fa:	4603      	mov	r3, r0
 80015fc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <_write+0x38>
      return len;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	e008      	b.n	800161a <_write+0x4a>
    else
      return EIO;
 8001608:	2305      	movs	r3, #5
 800160a:	e006      	b.n	800161a <_write+0x4a>
  }
  errno = EBADF;
 800160c:	f005 fb2a 	bl	8006c64 <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	2209      	movs	r2, #9
 8001614:	601a      	str	r2, [r3, #0]
  return -1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000830 	.word	0x20000830

08001628 <_close>:

int _close(int fd) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db04      	blt.n	8001640 <_close+0x18>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b02      	cmp	r3, #2
 800163a:	dc01      	bgt.n	8001640 <_close+0x18>
    return 0;
 800163c:	2300      	movs	r3, #0
 800163e:	e006      	b.n	800164e <_close+0x26>

  errno = EBADF;
 8001640:	f005 fb10 	bl	8006c64 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	2209      	movs	r2, #9
 8001648:	601a      	str	r2, [r3, #0]
  return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001662:	f005 faff 	bl	8006c64 <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2209      	movs	r2, #9
 800166a:	601a      	str	r2, [r3, #0]
  return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_read>:

int _read(int fd, char* ptr, int len) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d110      	bne.n	80016ac <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <_read+0x4c>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001692:	2201      	movs	r2, #1
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	f003 f9dc 	bl	8004a52 <HAL_UART_Receive>
 800169a:	4603      	mov	r3, r0
 800169c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800169e:	7dfb      	ldrb	r3, [r7, #23]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <_read+0x30>
      return 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e008      	b.n	80016ba <_read+0x42>
    else
      return EIO;
 80016a8:	2305      	movs	r3, #5
 80016aa:	e006      	b.n	80016ba <_read+0x42>
  }
  errno = EBADF;
 80016ac:	f005 fada 	bl	8006c64 <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2209      	movs	r2, #9
 80016b4:	601a      	str	r2, [r3, #0]
  return -1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000830 	.word	0x20000830

080016c8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db08      	blt.n	80016ea <_fstat+0x22>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	dc05      	bgt.n	80016ea <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e4:	605a      	str	r2, [r3, #4]
    return 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e005      	b.n	80016f6 <_fstat+0x2e>
  }

  errno = EBADF;
 80016ea:	f005 fabb 	bl	8006c64 <__errno>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2209      	movs	r2, #9
 80016f2:	601a      	str	r2, [r3, #0]
  return 0;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <HAL_MspInit+0x4c>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	4a0f      	ldr	r2, [pc, #60]	@ (800174c <HAL_MspInit+0x4c>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001714:	6453      	str	r3, [r2, #68]	@ 0x44
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <HAL_MspInit+0x4c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <HAL_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a08      	ldr	r2, [pc, #32]	@ (800174c <HAL_MspInit+0x4c>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_MspInit+0x4c>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	@ 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <HAL_ADC_MspInit+0x7c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d127      	bne.n	80017c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <HAL_ADC_MspInit+0x80>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <HAL_ADC_MspInit+0x80>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001780:	6453      	str	r3, [r2, #68]	@ 0x44
 8001782:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <HAL_ADC_MspInit+0x80>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <HAL_ADC_MspInit+0x80>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a0e      	ldr	r2, [pc, #56]	@ (80017d0 <HAL_ADC_MspInit+0x80>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <HAL_ADC_MspInit+0x80>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017aa:	2320      	movs	r3, #32
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ae:	2303      	movs	r3, #3
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <HAL_ADC_MspInit+0x84>)
 80017be:	f000 fd7b 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	@ 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40012000 	.word	0x40012000
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	@ (800185c <HAL_UART_MspInit+0x84>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12c      	bne.n	8001854 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <HAL_UART_MspInit+0x88>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <HAL_UART_MspInit+0x88>)
 8001804:	f043 0310 	orr.w	r3, r3, #16
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_UART_MspInit+0x88>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_UART_MspInit+0x88>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <HAL_UART_MspInit+0x88>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_UART_MspInit+0x88>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001832:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001844:	2307      	movs	r3, #7
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <HAL_UART_MspInit+0x8c>)
 8001850:	f000 fd32 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	@ 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40011000 	.word	0x40011000
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000

08001868 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <HAL_HCD_MspInit+0xb0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d141      	bne.n	800190e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b23      	ldr	r3, [pc, #140]	@ (800191c <HAL_HCD_MspInit+0xb4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a22      	ldr	r2, [pc, #136]	@ (800191c <HAL_HCD_MspInit+0xb4>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b20      	ldr	r3, [pc, #128]	@ (800191c <HAL_HCD_MspInit+0xb4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80018a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	4819      	ldr	r0, [pc, #100]	@ (8001920 <HAL_HCD_MspInit+0xb8>)
 80018bc:	f000 fcfc 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80018c0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80018d2:	230c      	movs	r3, #12
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4810      	ldr	r0, [pc, #64]	@ (8001920 <HAL_HCD_MspInit+0xb8>)
 80018de:	f000 fceb 	bl	80022b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <HAL_HCD_MspInit+0xb4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a0c      	ldr	r2, [pc, #48]	@ (800191c <HAL_HCD_MspInit+0xb4>)
 80018ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_HCD_MspInit+0xb4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	204d      	movs	r0, #77	@ 0x4d
 8001904:	f000 fcae 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001908:	204d      	movs	r0, #77	@ 0x4d
 800190a:	f000 fcc7 	bl	800229c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	@ 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40040000 	.word	0x40040000
 800191c:	40023800 	.word	0x40023800
 8001920:	40020400 	.word	0x40020400

08001924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	@ 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	2036      	movs	r0, #54	@ 0x36
 800193a:	f000 fc93 	bl	8002264 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800193e:	2036      	movs	r0, #54	@ 0x36
 8001940:	f000 fcac 	bl	800229c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <HAL_InitTick+0xa4>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	4a1e      	ldr	r2, [pc, #120]	@ (80019c8 <HAL_InitTick+0xa4>)
 800194e:	f043 0310 	orr.w	r3, r3, #16
 8001952:	6413      	str	r3, [r2, #64]	@ 0x40
 8001954:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <HAL_InitTick+0xa4>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001960:	f107 0210 	add.w	r2, r7, #16
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fcb2 	bl	80042d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001970:	f002 fc88 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8001974:	4603      	mov	r3, r0
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800197a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800197c:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <HAL_InitTick+0xa8>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	0c9b      	lsrs	r3, r3, #18
 8001984:	3b01      	subs	r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_InitTick+0xac>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <HAL_InitTick+0xb0>)
 800198c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <HAL_InitTick+0xac>)
 8001990:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001994:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001996:	4a0e      	ldr	r2, [pc, #56]	@ (80019d0 <HAL_InitTick+0xac>)
 8001998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <HAL_InitTick+0xac>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_InitTick+0xac>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019a8:	4809      	ldr	r0, [pc, #36]	@ (80019d0 <HAL_InitTick+0xac>)
 80019aa:	f002 fcc5 	bl	8004338 <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d104      	bne.n	80019be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80019b4:	4806      	ldr	r0, [pc, #24]	@ (80019d0 <HAL_InitTick+0xac>)
 80019b6:	f002 fd19 	bl	80043ec <HAL_TIM_Base_Start_IT>
 80019ba:	4603      	mov	r3, r0
 80019bc:	e000      	b.n	80019c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3730      	adds	r7, #48	@ 0x30
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	20000834 	.word	0x20000834
 80019d4:	40001000 	.word	0x40001000

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <NMI_Handler+0x4>

080019e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <MemManage_Handler+0x4>

080019f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <UsageFault_Handler+0x4>

08001a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <TIM6_DAC_IRQHandler+0x10>)
 8001a3e:	f002 fd45 	bl	80044cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000834 	.word	0x20000834

08001a4c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <OTG_HS_IRQHandler+0x10>)
 8001a52:	f000 fe58 	bl	8002706 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000027c 	.word	0x2000027c

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f005 f8e8 	bl	8006c64 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20030000 	.word	0x20030000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	2000087c 	.word	0x2000087c
 8001ac8:	200009d0 	.word	0x200009d0

08001acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 

  ldr   sp, =_estack       /* set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b28 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af4:	480d      	ldr	r0, [pc, #52]	@ (8001b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af6:	490e      	ldr	r1, [pc, #56]	@ (8001b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b0c:	4c0b      	ldr	r4, [pc, #44]	@ (8001b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b1a:	f7ff ffd7 	bl	8001acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f005 f8a7 	bl	8006c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b22:	f7ff fa6f 	bl	8001004 <main>
  bx  lr    
 8001b26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b34:	0800b194 	.word	0x0800b194
  ldr r2, =_sbss
 8001b38:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b3c:	200009d0 	.word	0x200009d0

08001b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b48:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <HAL_Init+0x40>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <HAL_Init+0x40>)
 8001b5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a07      	ldr	r2, [pc, #28]	@ (8001b84 <HAL_Init+0x40>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 fb6e 	bl	800224e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	200f      	movs	r0, #15
 8001b74:	f7ff fed6 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b78:	f7ff fdc2 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20000880 	.word	0x20000880

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000880 	.word	0x20000880

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008

08001c10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e033      	b.n	8001c8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fd8e 	bl	8001750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c56:	f023 0302 	bic.w	r3, r3, #2
 8001c5a:	f043 0202 	orr.w	r2, r3, #2
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f94a 	bl	8001efc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f023 0303 	bic.w	r3, r3, #3
 8001c76:	f043 0201 	orr.w	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c7e:	e001      	b.n	8001c84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1c>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e113      	b.n	8001edc <HAL_ADC_ConfigChannel+0x244>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b09      	cmp	r3, #9
 8001cc2:	d925      	bls.n	8001d10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68d9      	ldr	r1, [r3, #12]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b1e      	subs	r3, #30
 8001cda:	2207      	movs	r2, #7
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68d9      	ldr	r1, [r3, #12]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4403      	add	r3, r0
 8001d02:	3b1e      	subs	r3, #30
 8001d04:	409a      	lsls	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	e022      	b.n	8001d56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6919      	ldr	r1, [r3, #16]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	2207      	movs	r2, #7
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	400a      	ands	r2, r1
 8001d32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6919      	ldr	r1, [r3, #16]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	4603      	mov	r3, r0
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4403      	add	r3, r0
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d824      	bhi.n	8001da8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3b05      	subs	r3, #5
 8001d70:	221f      	movs	r2, #31
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	3b05      	subs	r3, #5
 8001d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001da6:	e04c      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	d824      	bhi.n	8001dfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b23      	subs	r3, #35	@ 0x23
 8001dc2:	221f      	movs	r2, #31
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	400a      	ands	r2, r1
 8001dd0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b23      	subs	r3, #35	@ 0x23
 8001dec:	fa00 f203 	lsl.w	r2, r0, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001df8:	e023      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b41      	subs	r3, #65	@ 0x41
 8001e0c:	221f      	movs	r2, #31
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	400a      	ands	r2, r1
 8001e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b41      	subs	r3, #65	@ 0x41
 8001e36:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e42:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <HAL_ADC_ConfigChannel+0x250>)
 8001e44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a28      	ldr	r2, [pc, #160]	@ (8001eec <HAL_ADC_ConfigChannel+0x254>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d10f      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x1d8>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b12      	cmp	r3, #18
 8001e56:	d10b      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	@ (8001eec <HAL_ADC_ConfigChannel+0x254>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d12b      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x23a>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x258>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d003      	beq.n	8001e8c <HAL_ADC_ConfigChannel+0x1f4>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b11      	cmp	r3, #17
 8001e8a:	d122      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a11      	ldr	r2, [pc, #68]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x258>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d111      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eae:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x25c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a11      	ldr	r2, [pc, #68]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x260>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	0c9a      	lsrs	r2, r3, #18
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40012300 	.word	0x40012300
 8001eec:	40012000 	.word	0x40012000
 8001ef0:	10000012 	.word	0x10000012
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	431bde83 	.word	0x431bde83

08001efc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f04:	4b79      	ldr	r3, [pc, #484]	@ (80020ec <ADC_Init+0x1f0>)
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	021a      	lsls	r2, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8e:	4a58      	ldr	r2, [pc, #352]	@ (80020f0 <ADC_Init+0x1f4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d022      	beq.n	8001fda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6899      	ldr	r1, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	e00f      	b.n	8001ffa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ff8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0202 	bic.w	r2, r2, #2
 8002008:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6899      	ldr	r1, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7e1b      	ldrb	r3, [r3, #24]
 8002014:	005a      	lsls	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01b      	beq.n	8002060 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002036:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002046:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	3b01      	subs	r3, #1
 8002054:	035a      	lsls	r2, r3, #13
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	e007      	b.n	8002070 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800206e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	3b01      	subs	r3, #1
 800208c:	051a      	lsls	r2, r3, #20
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6899      	ldr	r1, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020b2:	025a      	lsls	r2, r3, #9
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	029a      	lsls	r2, r3, #10
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40012300 	.word	0x40012300
 80020f0:	0f000001 	.word	0x0f000001

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4907      	ldr	r1, [pc, #28]	@ (8002190 <__NVIC_EnableIRQ+0x38>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	@ (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	@ (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	@ 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ff4c 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002276:	f7ff ff61 	bl	800213c <__NVIC_GetPriorityGrouping>
 800227a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	6978      	ldr	r0, [r7, #20]
 8002282:	f7ff ffb1 	bl	80021e8 <NVIC_EncodePriority>
 8002286:	4602      	mov	r2, r0
 8002288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff80 	bl	8002194 <__NVIC_SetPriority>
}
 8002294:	bf00      	nop
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff54 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	@ 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e177      	b.n	80025c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8166 	bne.w	80025be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d005      	beq.n	800230a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002306:	2b02      	cmp	r3, #2
 8002308:	d130      	bne.n	800236c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 0201 	and.w	r2, r3, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b03      	cmp	r3, #3
 8002376:	d017      	beq.n	80023a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d123      	bne.n	80023fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80c0 	beq.w	80025be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b66      	ldr	r3, [pc, #408]	@ (80025dc <HAL_GPIO_Init+0x324>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	4a65      	ldr	r2, [pc, #404]	@ (80025dc <HAL_GPIO_Init+0x324>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800244c:	6453      	str	r3, [r2, #68]	@ 0x44
 800244e:	4b63      	ldr	r3, [pc, #396]	@ (80025dc <HAL_GPIO_Init+0x324>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245a:	4a61      	ldr	r2, [pc, #388]	@ (80025e0 <HAL_GPIO_Init+0x328>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a58      	ldr	r2, [pc, #352]	@ (80025e4 <HAL_GPIO_Init+0x32c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d037      	beq.n	80024f6 <HAL_GPIO_Init+0x23e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a57      	ldr	r2, [pc, #348]	@ (80025e8 <HAL_GPIO_Init+0x330>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d031      	beq.n	80024f2 <HAL_GPIO_Init+0x23a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a56      	ldr	r2, [pc, #344]	@ (80025ec <HAL_GPIO_Init+0x334>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d02b      	beq.n	80024ee <HAL_GPIO_Init+0x236>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a55      	ldr	r2, [pc, #340]	@ (80025f0 <HAL_GPIO_Init+0x338>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d025      	beq.n	80024ea <HAL_GPIO_Init+0x232>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a54      	ldr	r2, [pc, #336]	@ (80025f4 <HAL_GPIO_Init+0x33c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01f      	beq.n	80024e6 <HAL_GPIO_Init+0x22e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a53      	ldr	r2, [pc, #332]	@ (80025f8 <HAL_GPIO_Init+0x340>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x22a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a52      	ldr	r2, [pc, #328]	@ (80025fc <HAL_GPIO_Init+0x344>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x226>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a51      	ldr	r2, [pc, #324]	@ (8002600 <HAL_GPIO_Init+0x348>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x222>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a50      	ldr	r2, [pc, #320]	@ (8002604 <HAL_GPIO_Init+0x34c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x21e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002608 <HAL_GPIO_Init+0x350>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x21a>
 80024ce:	2309      	movs	r3, #9
 80024d0:	e012      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024d2:	230a      	movs	r3, #10
 80024d4:	e010      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024d6:	2308      	movs	r3, #8
 80024d8:	e00e      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024da:	2307      	movs	r3, #7
 80024dc:	e00c      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024de:	2306      	movs	r3, #6
 80024e0:	e00a      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024e2:	2305      	movs	r3, #5
 80024e4:	e008      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024e6:	2304      	movs	r3, #4
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024ea:	2303      	movs	r3, #3
 80024ec:	e004      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_GPIO_Init+0x240>
 80024f6:	2300      	movs	r3, #0
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	f002 0203 	and.w	r2, r2, #3
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	4093      	lsls	r3, r2
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002508:	4935      	ldr	r1, [pc, #212]	@ (80025e0 <HAL_GPIO_Init+0x328>)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002516:	4b3d      	ldr	r3, [pc, #244]	@ (800260c <HAL_GPIO_Init+0x354>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253a:	4a34      	ldr	r2, [pc, #208]	@ (800260c <HAL_GPIO_Init+0x354>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002540:	4b32      	ldr	r3, [pc, #200]	@ (800260c <HAL_GPIO_Init+0x354>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002564:	4a29      	ldr	r2, [pc, #164]	@ (800260c <HAL_GPIO_Init+0x354>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256a:	4b28      	ldr	r3, [pc, #160]	@ (800260c <HAL_GPIO_Init+0x354>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800258e:	4a1f      	ldr	r2, [pc, #124]	@ (800260c <HAL_GPIO_Init+0x354>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002594:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <HAL_GPIO_Init+0x354>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b8:	4a14      	ldr	r2, [pc, #80]	@ (800260c <HAL_GPIO_Init+0x354>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3301      	adds	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b0f      	cmp	r3, #15
 80025c8:	f67f ae84 	bls.w	80022d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3724      	adds	r7, #36	@ 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40013800 	.word	0x40013800
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40020400 	.word	0x40020400
 80025ec:	40020800 	.word	0x40020800
 80025f0:	40020c00 	.word	0x40020c00
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40021400 	.word	0x40021400
 80025fc:	40021800 	.word	0x40021800
 8002600:	40021c00 	.word	0x40021c00
 8002604:	40022000 	.word	0x40022000
 8002608:	40022400 	.word	0x40022400
 800260c:	40013c00 	.word	0x40013c00

08002610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
 800261c:	4613      	mov	r3, r2
 800261e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002620:	787b      	ldrb	r3, [r7, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800262c:	e003      	b.n	8002636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	041a      	lsls	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	619a      	str	r2, [r3, #24]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002644:	b08f      	sub	sp, #60	@ 0x3c
 8002646:	af0a      	add	r7, sp, #40	@ 0x28
 8002648:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e054      	b.n	80026fe <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 32f9 	ldrb.w	r3, [r3, #761]	@ 0x2f9
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 22f8 	strb.w	r2, [r3, #760]	@ 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff f8fa 	bl	8001868 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2203      	movs	r2, #3
 8002678:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d102      	bne.n	800268e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f002 fdc3 	bl	800521e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	687e      	ldr	r6, [r7, #4]
 80026a0:	466d      	mov	r5, sp
 80026a2:	f106 0410 	add.w	r4, r6, #16
 80026a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b6:	1d33      	adds	r3, r6, #4
 80026b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	f002 fd4e 	bl	800515c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 fdba 	bl	8005240 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	687e      	ldr	r6, [r7, #4]
 80026d4:	466d      	mov	r5, sp
 80026d6:	f106 0410 	add.w	r4, r6, #16
 80026da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ea:	1d33      	adds	r3, r6, #4
 80026ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	f002 ff04 	bl	80054fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 22f9 	strb.w	r2, [r3, #761]	@ 0x2f9

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002706 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f002 feaa 	bl	8005476 <USB_GetMode>
 8002722:	4603      	mov	r3, r0
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 80f6 	bne.w	8002916 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f002 fe8e 	bl	8005450 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80ec 	beq.w	8002914 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f002 fe85 	bl	8005450 <USB_ReadInterrupts>
 8002746:	4603      	mov	r3, r0
 8002748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800274c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002750:	d104      	bne.n	800275c <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800275a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fe75 	bl	8005450 <USB_ReadInterrupts>
 8002766:	4603      	mov	r3, r0
 8002768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800276c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002770:	d104      	bne.n	800277c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800277a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f002 fe65 	bl	8005450 <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800278c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002790:	d104      	bne.n	800279c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800279a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 fe55 	bl	8005450 <USB_ReadInterrupts>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d103      	bne.n	80027b8 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2202      	movs	r2, #2
 80027b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f002 fe47 	bl	8005450 <USB_ReadInterrupts>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027cc:	d11c      	bne.n	8002808 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80027d6:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10f      	bne.n	8002808 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80027e8:	2110      	movs	r1, #16
 80027ea:	6938      	ldr	r0, [r7, #16]
 80027ec:	f002 fd74 	bl	80052d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80027f0:	6938      	ldr	r0, [r7, #16]
 80027f2:	f002 fda5 	bl	8005340 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2101      	movs	r1, #1
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 ff3d 	bl	800567c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f89e 	bl	8002944 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f002 fe1f 	bl	8005450 <USB_ReadInterrupts>
 8002812:	4603      	mov	r3, r0
 8002814:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800281c:	d102      	bne.n	8002824 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f001 f84c 	bl	80038bc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f002 fe11 	bl	8005450 <USB_ReadInterrupts>
 800282e:	4603      	mov	r3, r0
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b08      	cmp	r3, #8
 8002836:	d106      	bne.n	8002846 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f86f 	bl	800291c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2208      	movs	r2, #8
 8002844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 fe00 	bl	8005450 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b10      	cmp	r3, #16
 8002858:	d101      	bne.n	800285e <HAL_HCD_IRQHandler+0x158>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_HCD_IRQHandler+0x15a>
 800285e:	2300      	movs	r3, #0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d012      	beq.n	800288a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0210 	bic.w	r2, r2, #16
 8002872:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 ff4f 	bl	8003718 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0210 	orr.w	r2, r2, #16
 8002888:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f002 fdde 	bl	8005450 <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800289e:	d13a      	bne.n	8002916 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 ff23 	bl	80056f0 <USB_HC_ReadInterrupt>
 80028aa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	e025      	b.n	80028fe <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d018      	beq.n	80028f8 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028dc:	d106      	bne.n	80028ec <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	4619      	mov	r1, r3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f859 	bl	800299c <HCD_HC_IN_IRQHandler>
 80028ea:	e005      	b.n	80028f8 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	4619      	mov	r1, r3
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fba7 	bl	8003046 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	d3d4      	bcc.n	80028b2 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002910:	615a      	str	r2, [r3, #20]
 8002912:	e000      	b.n	8002916 <HAL_HCD_IRQHandler+0x210>
      return;
 8002914:	bf00      	nop
    }
  }
}
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
 800298c:	4613      	mov	r3, r2
 800298e:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d11a      	bne.n	8002a02 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d8:	461a      	mov	r2, r3
 80029da:	2304      	movs	r3, #4
 80029dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	212c      	movs	r1, #44	@ 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3361      	adds	r3, #97	@ 0x61
 80029ec:	2206      	movs	r2, #6
 80029ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f002 fe89 	bl	8005712 <USB_HC_Halt>
 8002a00:	e0af      	b.n	8002b62 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a18:	d11b      	bne.n	8002a52 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	212c      	movs	r1, #44	@ 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3361      	adds	r3, #97	@ 0x61
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f002 fe61 	bl	8005712 <USB_HC_Halt>
 8002a50:	e087      	b.n	8002b62 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d109      	bne.n	8002a7c <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a74:	461a      	mov	r2, r3
 8002a76:	2320      	movs	r3, #32
 8002a78:	6093      	str	r3, [r2, #8]
 8002a7a:	e072      	b.n	8002b62 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d11a      	bne.n	8002ac8 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	212c      	movs	r1, #44	@ 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	@ 0x61
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 fe26 	bl	8005712 <USB_HC_Halt>
 8002ac6:	e04c      	b.n	8002b62 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ade:	d11b      	bne.n	8002b18 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aec:	461a      	mov	r2, r3
 8002aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002af2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	212c      	movs	r1, #44	@ 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3361      	adds	r3, #97	@ 0x61
 8002b02:	2208      	movs	r2, #8
 8002b04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 fdfe 	bl	8005712 <USB_HC_Halt>
 8002b16:	e024      	b.n	8002b62 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2a:	2b80      	cmp	r3, #128	@ 0x80
 8002b2c:	d119      	bne.n	8002b62 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	212c      	movs	r1, #44	@ 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3361      	adds	r3, #97	@ 0x61
 8002b4e:	2206      	movs	r2, #6
 8002b50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 fdd8 	bl	8005712 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b78:	d112      	bne.n	8002ba0 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 fdc4 	bl	8005712 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b96:	461a      	mov	r2, r3
 8002b98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b9c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b9e:	e24e      	b.n	800303e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	f040 80df 	bne.w	8002d76 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d019      	beq.n	8002bf4 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	212c      	movs	r1, #44	@ 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3348      	adds	r3, #72	@ 0x48
 8002bce:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	0159      	lsls	r1, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002be2:	1ad2      	subs	r2, r2, r3
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	202c      	movs	r0, #44	@ 0x2c
 8002bea:	fb00 f303 	mul.w	r3, r0, r3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3350      	adds	r3, #80	@ 0x50
 8002bf2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	212c      	movs	r1, #44	@ 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3361      	adds	r3, #97	@ 0x61
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	212c      	movs	r1, #44	@ 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	335c      	adds	r3, #92	@ 0x5c
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	2301      	movs	r3, #1
 8002c28:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	212c      	movs	r1, #44	@ 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	333f      	adds	r3, #63	@ 0x3f
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	212c      	movs	r1, #44	@ 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	333f      	adds	r3, #63	@ 0x3f
 8002c4c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d111      	bne.n	8002c76 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f002 fd58 	bl	8005712 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2310      	movs	r3, #16
 8002c72:	6093      	str	r3, [r2, #8]
 8002c74:	e03a      	b.n	8002cec <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	212c      	movs	r1, #44	@ 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	333f      	adds	r3, #63	@ 0x3f
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d009      	beq.n	8002c9e <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	212c      	movs	r1, #44	@ 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	333f      	adds	r3, #63	@ 0x3f
 8002c98:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d126      	bne.n	8002cec <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	0151      	lsls	r1, r2, #5
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	440a      	add	r2, r1
 8002cb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002cbc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	212c      	movs	r1, #44	@ 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3360      	adds	r3, #96	@ 0x60
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	b2d9      	uxtb	r1, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	202c      	movs	r0, #44	@ 0x2c
 8002cda:	fb00 f303 	mul.w	r3, r0, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	@ 0x60
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fe4a 	bl	8002980 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d12b      	bne.n	8002d4c <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	212c      	movs	r1, #44	@ 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3348      	adds	r3, #72	@ 0x48
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	202c      	movs	r0, #44	@ 0x2c
 8002d0a:	fb00 f202 	mul.w	r2, r0, r2
 8002d0e:	440a      	add	r2, r1
 8002d10:	3240      	adds	r2, #64	@ 0x40
 8002d12:	8812      	ldrh	r2, [r2, #0]
 8002d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 818e 	beq.w	800303e <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	212c      	movs	r1, #44	@ 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3354      	adds	r3, #84	@ 0x54
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	f083 0301 	eor.w	r3, r3, #1
 8002d36:	b2d8      	uxtb	r0, r3
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	212c      	movs	r1, #44	@ 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3354      	adds	r3, #84	@ 0x54
 8002d46:	4602      	mov	r2, r0
 8002d48:	701a      	strb	r2, [r3, #0]
}
 8002d4a:	e178      	b.n	800303e <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	212c      	movs	r1, #44	@ 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3354      	adds	r3, #84	@ 0x54
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2d8      	uxtb	r0, r3
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	@ 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3354      	adds	r3, #84	@ 0x54
 8002d70:	4602      	mov	r2, r0
 8002d72:	701a      	strb	r2, [r3, #0]
}
 8002d74:	e163      	b.n	800303e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	f040 80f6 	bne.w	8002f7a <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	212c      	movs	r1, #44	@ 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3361      	adds	r3, #97	@ 0x61
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d109      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	212c      	movs	r1, #44	@ 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3360      	adds	r3, #96	@ 0x60
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e0c9      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	212c      	movs	r1, #44	@ 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3361      	adds	r3, #97	@ 0x61
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d109      	bne.n	8002dde <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	212c      	movs	r1, #44	@ 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3360      	adds	r3, #96	@ 0x60
 8002dd8:	2205      	movs	r2, #5
 8002dda:	701a      	strb	r2, [r3, #0]
 8002ddc:	e0b5      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	212c      	movs	r1, #44	@ 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3361      	adds	r3, #97	@ 0x61
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d009      	beq.n	8002e06 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	212c      	movs	r1, #44	@ 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3361      	adds	r3, #97	@ 0x61
 8002e00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d150      	bne.n	8002ea8 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	212c      	movs	r1, #44	@ 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	335c      	adds	r3, #92	@ 0x5c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	202c      	movs	r0, #44	@ 0x2c
 8002e1e:	fb00 f303 	mul.w	r3, r0, r3
 8002e22:	440b      	add	r3, r1
 8002e24:	335c      	adds	r3, #92	@ 0x5c
 8002e26:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	212c      	movs	r1, #44	@ 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	335c      	adds	r3, #92	@ 0x5c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d912      	bls.n	8002e62 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	212c      	movs	r1, #44	@ 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	335c      	adds	r3, #92	@ 0x5c
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	212c      	movs	r1, #44	@ 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	3360      	adds	r3, #96	@ 0x60
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e60:	e073      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	212c      	movs	r1, #44	@ 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3360      	adds	r3, #96	@ 0x60
 8002e70:	2202      	movs	r2, #2
 8002e72:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e8a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e92:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ea6:	e050      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	212c      	movs	r1, #44	@ 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3361      	adds	r3, #97	@ 0x61
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d122      	bne.n	8002f02 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	212c      	movs	r1, #44	@ 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3360      	adds	r3, #96	@ 0x60
 8002eca:	2202      	movs	r2, #2
 8002ecc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ee4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002eec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e023      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	212c      	movs	r1, #44	@ 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3361      	adds	r3, #97	@ 0x61
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b07      	cmp	r3, #7
 8002f14:	d119      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	212c      	movs	r1, #44	@ 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	335c      	adds	r3, #92	@ 0x5c
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	202c      	movs	r0, #44	@ 0x2c
 8002f2e:	fb00 f303 	mul.w	r3, r0, r3
 8002f32:	440b      	add	r3, r1
 8002f34:	335c      	adds	r3, #92	@ 0x5c
 8002f36:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	212c      	movs	r1, #44	@ 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	3360      	adds	r3, #96	@ 0x60
 8002f46:	2204      	movs	r2, #4
 8002f48:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f56:	461a      	mov	r2, r3
 8002f58:	2302      	movs	r3, #2
 8002f5a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	b2d9      	uxtb	r1, r3
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	202c      	movs	r0, #44	@ 0x2c
 8002f66:	fb00 f303 	mul.w	r3, r0, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3360      	adds	r3, #96	@ 0x60
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fd04 	bl	8002980 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f78:	e061      	b.n	800303e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d156      	bne.n	800303e <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	212c      	movs	r1, #44	@ 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	333f      	adds	r3, #63	@ 0x3f
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d111      	bne.n	8002fc8 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	212c      	movs	r1, #44	@ 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	335c      	adds	r3, #92	@ 0x5c
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f002 fba6 	bl	8005712 <USB_HC_Halt>
 8002fc6:	e031      	b.n	800302c <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	212c      	movs	r1, #44	@ 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	333f      	adds	r3, #63	@ 0x3f
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d009      	beq.n	8002ff0 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	212c      	movs	r1, #44	@ 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	333f      	adds	r3, #63	@ 0x3f
 8002fea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d11d      	bne.n	800302c <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	212c      	movs	r1, #44	@ 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	335c      	adds	r3, #92	@ 0x5c
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d110      	bne.n	800302c <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	212c      	movs	r1, #44	@ 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3361      	adds	r3, #97	@ 0x61
 8003018:	2203      	movs	r2, #3
 800301a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f002 fb73 	bl	8005712 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	2310      	movs	r3, #16
 800303c:	6093      	str	r3, [r2, #8]
}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b088      	sub	sp, #32
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d11a      	bne.n	80030ac <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	4413      	add	r3, r2
 800307e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003082:	461a      	mov	r2, r3
 8003084:	2304      	movs	r3, #4
 8003086:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	212c      	movs	r1, #44	@ 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3361      	adds	r3, #97	@ 0x61
 8003096:	2206      	movs	r2, #6
 8003098:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 fb34 	bl	8005712 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80030aa:	e331      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d12e      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ce:	461a      	mov	r2, r3
 80030d0:	2320      	movs	r3, #32
 80030d2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	212c      	movs	r1, #44	@ 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	333d      	adds	r3, #61	@ 0x3d
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	f040 8313 	bne.w	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	212c      	movs	r1, #44	@ 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	333d      	adds	r3, #61	@ 0x3d
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	212c      	movs	r1, #44	@ 0x2c
 8003102:	fb01 f303 	mul.w	r3, r1, r3
 8003106:	4413      	add	r3, r2
 8003108:	3360      	adds	r3, #96	@ 0x60
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fafa 	bl	8005712 <USB_HC_Halt>
}
 800311e:	e2f7      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003136:	d112      	bne.n	800315e <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003144:	461a      	mov	r2, r3
 8003146:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800314a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f002 fadb 	bl	8005712 <USB_HC_Halt>
}
 800315c:	e2d8      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	d140      	bne.n	80031f6 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	212c      	movs	r1, #44	@ 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	335c      	adds	r3, #92	@ 0x5c
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003198:	2b40      	cmp	r3, #64	@ 0x40
 800319a:	d111      	bne.n	80031c0 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	212c      	movs	r1, #44	@ 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	333d      	adds	r3, #61	@ 0x3d
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ba:	461a      	mov	r2, r3
 80031bc:	2340      	movs	r3, #64	@ 0x40
 80031be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	2301      	movs	r3, #1
 80031d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	212c      	movs	r1, #44	@ 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	3361      	adds	r3, #97	@ 0x61
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 fa8f 	bl	8005712 <USB_HC_Halt>
}
 80031f4:	e28c      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003208:	2b40      	cmp	r3, #64	@ 0x40
 800320a:	d12c      	bne.n	8003266 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	212c      	movs	r1, #44	@ 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3361      	adds	r3, #97	@ 0x61
 800321a:	2204      	movs	r2, #4
 800321c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	212c      	movs	r1, #44	@ 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	333d      	adds	r3, #61	@ 0x3d
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	212c      	movs	r1, #44	@ 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	335c      	adds	r3, #92	@ 0x5c
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f002 fa60 	bl	8005712 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	2340      	movs	r3, #64	@ 0x40
 8003262:	6093      	str	r3, [r2, #8]
}
 8003264:	e254      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b08      	cmp	r3, #8
 800327a:	d11a      	bne.n	80032b2 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	2308      	movs	r3, #8
 800328c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	212c      	movs	r1, #44	@ 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3361      	adds	r3, #97	@ 0x61
 800329c:	2205      	movs	r2, #5
 800329e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f002 fa31 	bl	8005712 <USB_HC_Halt>
}
 80032b0:	e22e      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d140      	bne.n	800334a <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	212c      	movs	r1, #44	@ 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	335c      	adds	r3, #92	@ 0x5c
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	212c      	movs	r1, #44	@ 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	3361      	adds	r3, #97	@ 0x61
 80032e8:	2203      	movs	r2, #3
 80032ea:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	212c      	movs	r1, #44	@ 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	333d      	adds	r3, #61	@ 0x3d
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d112      	bne.n	8003326 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	212c      	movs	r1, #44	@ 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	333c      	adds	r3, #60	@ 0x3c
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d108      	bne.n	8003326 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	212c      	movs	r1, #44	@ 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	333d      	adds	r3, #61	@ 0x3d
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f002 f9ee 	bl	8005712 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003342:	461a      	mov	r2, r3
 8003344:	2310      	movs	r3, #16
 8003346:	6093      	str	r3, [r2, #8]
}
 8003348:	e1e2      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335c:	2b80      	cmp	r3, #128	@ 0x80
 800335e:	d164      	bne.n	800342a <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d111      	bne.n	800338c <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	212c      	movs	r1, #44	@ 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	3361      	adds	r3, #97	@ 0x61
 8003376:	2206      	movs	r2, #6
 8003378:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f002 f9c4 	bl	8005712 <USB_HC_Halt>
 800338a:	e044      	b.n	8003416 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	212c      	movs	r1, #44	@ 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	335c      	adds	r3, #92	@ 0x5c
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	202c      	movs	r0, #44	@ 0x2c
 80033a4:	fb00 f303 	mul.w	r3, r0, r3
 80033a8:	440b      	add	r3, r1
 80033aa:	335c      	adds	r3, #92	@ 0x5c
 80033ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	212c      	movs	r1, #44	@ 0x2c
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	335c      	adds	r3, #92	@ 0x5c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d920      	bls.n	8003404 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	212c      	movs	r1, #44	@ 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	335c      	adds	r3, #92	@ 0x5c
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	212c      	movs	r1, #44	@ 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3360      	adds	r3, #96	@ 0x60
 80033e2:	2204      	movs	r2, #4
 80033e4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	b2d9      	uxtb	r1, r3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	202c      	movs	r0, #44	@ 0x2c
 80033f0:	fb00 f303 	mul.w	r3, r0, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3360      	adds	r3, #96	@ 0x60
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff fabf 	bl	8002980 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003402:	e008      	b.n	8003416 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	212c      	movs	r1, #44	@ 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3360      	adds	r3, #96	@ 0x60
 8003412:	2202      	movs	r2, #2
 8003414:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003422:	461a      	mov	r2, r3
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	6093      	str	r3, [r2, #8]
}
 8003428:	e172      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4413      	add	r3, r2
 8003432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003440:	d11b      	bne.n	800347a <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	212c      	movs	r1, #44	@ 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	3361      	adds	r3, #97	@ 0x61
 8003450:	2208      	movs	r2, #8
 8003452:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f002 f957 	bl	8005712 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003470:	461a      	mov	r2, r3
 8003472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003476:	6093      	str	r3, [r2, #8]
}
 8003478:	e14a      	b.n	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	4413      	add	r3, r2
 8003482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	f040 813f 	bne.w	8003710 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	212c      	movs	r1, #44	@ 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	3361      	adds	r3, #97	@ 0x61
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d17d      	bne.n	80035a2 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	212c      	movs	r1, #44	@ 0x2c
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	3360      	adds	r3, #96	@ 0x60
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	212c      	movs	r1, #44	@ 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	333f      	adds	r3, #63	@ 0x3f
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d00a      	beq.n	80034e2 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	212c      	movs	r1, #44	@ 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	333f      	adds	r3, #63	@ 0x3f
 80034da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034dc:	2b03      	cmp	r3, #3
 80034de:	f040 8100 	bne.w	80036e2 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d113      	bne.n	8003512 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	212c      	movs	r1, #44	@ 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3355      	adds	r3, #85	@ 0x55
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	f083 0301 	eor.w	r3, r3, #1
 80034fe:	b2d8      	uxtb	r0, r3
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	212c      	movs	r1, #44	@ 0x2c
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	4413      	add	r3, r2
 800350c:	3355      	adds	r3, #85	@ 0x55
 800350e:	4602      	mov	r2, r0
 8003510:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b01      	cmp	r3, #1
 8003518:	f040 80e3 	bne.w	80036e2 <HCD_HC_OUT_IRQHandler+0x69c>
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	212c      	movs	r1, #44	@ 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	334c      	adds	r3, #76	@ 0x4c
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80d8 	beq.w	80036e2 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	@ 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	334c      	adds	r3, #76	@ 0x4c
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	202c      	movs	r0, #44	@ 0x2c
 8003548:	fb00 f202 	mul.w	r2, r0, r2
 800354c:	440a      	add	r2, r1
 800354e:	3240      	adds	r2, #64	@ 0x40
 8003550:	8812      	ldrh	r2, [r2, #0]
 8003552:	4413      	add	r3, r2
 8003554:	3b01      	subs	r3, #1
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	202c      	movs	r0, #44	@ 0x2c
 800355c:	fb00 f202 	mul.w	r2, r0, r2
 8003560:	440a      	add	r2, r1
 8003562:	3240      	adds	r2, #64	@ 0x40
 8003564:	8812      	ldrh	r2, [r2, #0]
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80b5 	beq.w	80036e2 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	212c      	movs	r1, #44	@ 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	3355      	adds	r3, #85	@ 0x55
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2d8      	uxtb	r0, r3
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	212c      	movs	r1, #44	@ 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	3355      	adds	r3, #85	@ 0x55
 800359c:	4602      	mov	r2, r0
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e09f      	b.n	80036e2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	212c      	movs	r1, #44	@ 0x2c
 80035a8:	fb01 f303 	mul.w	r3, r1, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	3361      	adds	r3, #97	@ 0x61
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d109      	bne.n	80035ca <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	212c      	movs	r1, #44	@ 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	3360      	adds	r3, #96	@ 0x60
 80035c4:	2202      	movs	r2, #2
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	e08b      	b.n	80036e2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	212c      	movs	r1, #44	@ 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	3361      	adds	r3, #97	@ 0x61
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d109      	bne.n	80035f2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	212c      	movs	r1, #44	@ 0x2c
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	4413      	add	r3, r2
 80035ea:	3360      	adds	r3, #96	@ 0x60
 80035ec:	2202      	movs	r2, #2
 80035ee:	701a      	strb	r2, [r3, #0]
 80035f0:	e077      	b.n	80036e2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	212c      	movs	r1, #44	@ 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	3361      	adds	r3, #97	@ 0x61
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b05      	cmp	r3, #5
 8003604:	d109      	bne.n	800361a <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	212c      	movs	r1, #44	@ 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	3360      	adds	r3, #96	@ 0x60
 8003614:	2205      	movs	r2, #5
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e063      	b.n	80036e2 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	212c      	movs	r1, #44	@ 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	3361      	adds	r3, #97	@ 0x61
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b06      	cmp	r3, #6
 800362c:	d009      	beq.n	8003642 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	212c      	movs	r1, #44	@ 0x2c
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	3361      	adds	r3, #97	@ 0x61
 800363c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800363e:	2b08      	cmp	r3, #8
 8003640:	d14f      	bne.n	80036e2 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	212c      	movs	r1, #44	@ 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	335c      	adds	r3, #92	@ 0x5c
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	202c      	movs	r0, #44	@ 0x2c
 800365a:	fb00 f303 	mul.w	r3, r0, r3
 800365e:	440b      	add	r3, r1
 8003660:	335c      	adds	r3, #92	@ 0x5c
 8003662:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	212c      	movs	r1, #44	@ 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	335c      	adds	r3, #92	@ 0x5c
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d912      	bls.n	800369e <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	212c      	movs	r1, #44	@ 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	335c      	adds	r3, #92	@ 0x5c
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	212c      	movs	r1, #44	@ 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	3360      	adds	r3, #96	@ 0x60
 8003698:	2204      	movs	r2, #4
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	e021      	b.n	80036e2 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	212c      	movs	r1, #44	@ 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	3360      	adds	r3, #96	@ 0x60
 80036ac:	2202      	movs	r2, #2
 80036ae:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036c6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036ce:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036dc:	461a      	mov	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ee:	461a      	mov	r2, r3
 80036f0:	2302      	movs	r3, #2
 80036f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	b2d9      	uxtb	r1, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	202c      	movs	r0, #44	@ 0x2c
 80036fe:	fb00 f303 	mul.w	r3, r0, r3
 8003702:	4413      	add	r3, r2
 8003704:	3360      	adds	r3, #96	@ 0x60
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff f938 	bl	8002980 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003710:	bf00      	nop
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	@ 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	0c5b      	lsrs	r3, r3, #17
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800374c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d004      	beq.n	800375e <HCD_RXQLVL_IRQHandler+0x46>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b05      	cmp	r3, #5
 8003758:	f000 80a9 	beq.w	80038ae <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800375c:	e0aa      	b.n	80038b4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a6 	beq.w	80038b2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	212c      	movs	r1, #44	@ 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3344      	adds	r3, #68	@ 0x44
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 809b 	beq.w	80038b2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	212c      	movs	r1, #44	@ 0x2c
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	3350      	adds	r3, #80	@ 0x50
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	441a      	add	r2, r3
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	202c      	movs	r0, #44	@ 0x2c
 8003796:	fb00 f303 	mul.w	r3, r0, r3
 800379a:	440b      	add	r3, r1
 800379c:	334c      	adds	r3, #76	@ 0x4c
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d87a      	bhi.n	800389a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	212c      	movs	r1, #44	@ 0x2c
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	3344      	adds	r3, #68	@ 0x44
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	b292      	uxth	r2, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f001 fdef 	bl	80053a0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	212c      	movs	r1, #44	@ 0x2c
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	3344      	adds	r3, #68	@ 0x44
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	441a      	add	r2, r3
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	202c      	movs	r0, #44	@ 0x2c
 80037dc:	fb00 f303 	mul.w	r3, r0, r3
 80037e0:	440b      	add	r3, r1
 80037e2:	3344      	adds	r3, #68	@ 0x44
 80037e4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	212c      	movs	r1, #44	@ 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	3350      	adds	r3, #80	@ 0x50
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	441a      	add	r2, r3
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	202c      	movs	r0, #44	@ 0x2c
 8003800:	fb00 f303 	mul.w	r3, r0, r3
 8003804:	440b      	add	r3, r1
 8003806:	3350      	adds	r3, #80	@ 0x50
 8003808:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	4413      	add	r3, r2
 8003812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	0cdb      	lsrs	r3, r3, #19
 800381a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	212c      	movs	r1, #44	@ 0x2c
 8003826:	fb01 f303 	mul.w	r3, r1, r3
 800382a:	4413      	add	r3, r2
 800382c:	3340      	adds	r3, #64	@ 0x40
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4293      	cmp	r3, r2
 8003836:	d13c      	bne.n	80038b2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d039      	beq.n	80038b2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	4413      	add	r3, r2
 8003846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003854:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800385c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386a:	461a      	mov	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	212c      	movs	r1, #44	@ 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	3354      	adds	r3, #84	@ 0x54
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	f083 0301 	eor.w	r3, r3, #1
 8003884:	b2d8      	uxtb	r0, r3
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	212c      	movs	r1, #44	@ 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	3354      	adds	r3, #84	@ 0x54
 8003894:	4602      	mov	r2, r0
 8003896:	701a      	strb	r2, [r3, #0]
      break;
 8003898:	e00b      	b.n	80038b2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	212c      	movs	r1, #44	@ 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	3360      	adds	r3, #96	@ 0x60
 80038a8:	2204      	movs	r2, #4
 80038aa:	701a      	strb	r2, [r3, #0]
      break;
 80038ac:	e001      	b.n	80038b2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80038b2:	bf00      	nop
  }
}
 80038b4:	bf00      	nop
 80038b6:	3728      	adds	r7, #40	@ 0x28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80038e8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d10b      	bne.n	800390c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d102      	bne.n	8003904 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff f816 	bl	8002930 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f043 0302 	orr.w	r3, r3, #2
 800390a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b08      	cmp	r3, #8
 8003914:	d132      	bne.n	800397c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f043 0308 	orr.w	r3, r3, #8
 800391c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d126      	bne.n	8003976 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d113      	bne.n	8003958 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003936:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800393a:	d106      	bne.n	800394a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2102      	movs	r1, #2
 8003942:	4618      	mov	r0, r3
 8003944:	f001 fe9a 	bl	800567c <USB_InitFSLSPClkSel>
 8003948:	e011      	b.n	800396e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2101      	movs	r1, #1
 8003950:	4618      	mov	r0, r3
 8003952:	f001 fe93 	bl	800567c <USB_InitFSLSPClkSel>
 8003956:	e00a      	b.n	800396e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d106      	bne.n	800396e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003966:	461a      	mov	r2, r3
 8003968:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800396c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fe fff2 	bl	8002958 <HAL_HCD_PortEnabled_Callback>
 8003974:	e002      	b.n	800397c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fe fff8 	bl	800296c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b20      	cmp	r3, #32
 8003984:	d103      	bne.n	800398e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f043 0320 	orr.w	r3, r3, #32
 800398c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003994:	461a      	mov	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6013      	str	r3, [r2, #0]
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e267      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d075      	beq.n	8003aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039c2:	4b88      	ldr	r3, [pc, #544]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d00c      	beq.n	80039e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ce:	4b85      	ldr	r3, [pc, #532]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d112      	bne.n	8003a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039da:	4b82      	ldr	r3, [pc, #520]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e6:	d10b      	bne.n	8003a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	4b7e      	ldr	r3, [pc, #504]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d05b      	beq.n	8003aac <HAL_RCC_OscConfig+0x108>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d157      	bne.n	8003aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e242      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a08:	d106      	bne.n	8003a18 <HAL_RCC_OscConfig+0x74>
 8003a0a:	4b76      	ldr	r3, [pc, #472]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a75      	ldr	r2, [pc, #468]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e01d      	b.n	8003a54 <HAL_RCC_OscConfig+0xb0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x98>
 8003a22:	4b70      	ldr	r3, [pc, #448]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6f      	ldr	r2, [pc, #444]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6c      	ldr	r2, [pc, #432]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e00b      	b.n	8003a54 <HAL_RCC_OscConfig+0xb0>
 8003a3c:	4b69      	ldr	r3, [pc, #420]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a68      	ldr	r2, [pc, #416]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b66      	ldr	r3, [pc, #408]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a65      	ldr	r2, [pc, #404]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fe f8a8 	bl	8001bb0 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fe f8a4 	bl	8001bb0 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	@ 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e207      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	4b5b      	ldr	r3, [pc, #364]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0xc0>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe f894 	bl	8001bb0 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fe f890 	bl	8001bb0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	@ 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e1f3      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9e:	4b51      	ldr	r3, [pc, #324]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0xe8>
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d063      	beq.n	8003b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aba:	4b4a      	ldr	r3, [pc, #296]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ac6:	4b47      	ldr	r3, [pc, #284]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d11c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad2:	4b44      	ldr	r3, [pc, #272]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d116      	bne.n	8003b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ade:	4b41      	ldr	r3, [pc, #260]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_RCC_OscConfig+0x152>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e1c7      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af6:	4b3b      	ldr	r3, [pc, #236]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4937      	ldr	r1, [pc, #220]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0a:	e03a      	b.n	8003b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d020      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b14:	4b34      	ldr	r3, [pc, #208]	@ (8003be8 <HAL_RCC_OscConfig+0x244>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fe f849 	bl	8001bb0 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b22:	f7fe f845 	bl	8001bb0 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e1a8      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b34:	4b2b      	ldr	r3, [pc, #172]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b28      	ldr	r3, [pc, #160]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4925      	ldr	r1, [pc, #148]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]
 8003b54:	e015      	b.n	8003b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b56:	4b24      	ldr	r3, [pc, #144]	@ (8003be8 <HAL_RCC_OscConfig+0x244>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe f828 	bl	8001bb0 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b64:	f7fe f824 	bl	8001bb0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e187      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b76:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d036      	beq.n	8003bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b96:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <HAL_RCC_OscConfig+0x248>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9c:	f7fe f808 	bl	8001bb0 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba4:	f7fe f804 	bl	8001bb0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e167      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x200>
 8003bc2:	e01b      	b.n	8003bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc4:	4b09      	ldr	r3, [pc, #36]	@ (8003bec <HAL_RCC_OscConfig+0x248>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bca:	f7fd fff1 	bl	8001bb0 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	e00e      	b.n	8003bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd2:	f7fd ffed 	bl	8001bb0 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d907      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e150      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
 8003be4:	40023800 	.word	0x40023800
 8003be8:	42470000 	.word	0x42470000
 8003bec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf0:	4b88      	ldr	r3, [pc, #544]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ea      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8097 	beq.w	8003d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0e:	4b81      	ldr	r3, [pc, #516]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	4a7c      	ldr	r2, [pc, #496]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3a:	4b77      	ldr	r3, [pc, #476]	@ (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d118      	bne.n	8003c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c46:	4b74      	ldr	r3, [pc, #464]	@ (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a73      	ldr	r2, [pc, #460]	@ (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c52:	f7fd ffad 	bl	8001bb0 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5a:	f7fd ffa9 	bl	8001bb0 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e10c      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e18 <HAL_RCC_OscConfig+0x474>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x2ea>
 8003c80:	4b64      	ldr	r3, [pc, #400]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	4a63      	ldr	r2, [pc, #396]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8c:	e01c      	b.n	8003cc8 <HAL_RCC_OscConfig+0x324>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x30c>
 8003c96:	4b5f      	ldr	r3, [pc, #380]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	f043 0304 	orr.w	r3, r3, #4
 8003ca0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCC_OscConfig+0x324>
 8003cb0:	4b58      	ldr	r3, [pc, #352]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb4:	4a57      	ldr	r2, [pc, #348]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cbc:	4b55      	ldr	r3, [pc, #340]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc0:	4a54      	ldr	r2, [pc, #336]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	f023 0304 	bic.w	r3, r3, #4
 8003cc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d015      	beq.n	8003cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fd ff6e 	bl	8001bb0 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd8:	f7fd ff6a 	bl	8001bb0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0cb      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cee:	4b49      	ldr	r3, [pc, #292]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0ee      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x334>
 8003cfa:	e014      	b.n	8003d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfc:	f7fd ff58 	bl	8001bb0 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d04:	f7fd ff54 	bl	8001bb0 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e0b5      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ee      	bne.n	8003d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2c:	4b39      	ldr	r3, [pc, #228]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	4a38      	ldr	r2, [pc, #224]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a1 	beq.w	8003e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d42:	4b34      	ldr	r3, [pc, #208]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d05c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d141      	bne.n	8003dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b31      	ldr	r3, [pc, #196]	@ (8003e1c <HAL_RCC_OscConfig+0x478>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fd ff28 	bl	8001bb0 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fd ff24 	bl	8001bb0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e087      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b27      	ldr	r3, [pc, #156]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	019b      	lsls	r3, r3, #6
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	491b      	ldr	r1, [pc, #108]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dac:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <HAL_RCC_OscConfig+0x478>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fd fefd 	bl	8001bb0 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fd fef9 	bl	8001bb0 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e05c      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dcc:	4b11      	ldr	r3, [pc, #68]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0x416>
 8003dd8:	e054      	b.n	8003e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b10      	ldr	r3, [pc, #64]	@ (8003e1c <HAL_RCC_OscConfig+0x478>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd fee6 	bl	8001bb0 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fee2 	bl	8001bb0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e045      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x444>
 8003e06:	e03d      	b.n	8003e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e038      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e20:	4b1b      	ldr	r3, [pc, #108]	@ (8003e90 <HAL_RCC_OscConfig+0x4ec>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d028      	beq.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d121      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d11a      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d111      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800

08003e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0cc      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b68      	ldr	r3, [pc, #416]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d90c      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b65      	ldr	r3, [pc, #404]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b63      	ldr	r3, [pc, #396]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0b8      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee8:	4b59      	ldr	r3, [pc, #356]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a58      	ldr	r2, [pc, #352]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f00:	4b53      	ldr	r3, [pc, #332]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a52      	ldr	r2, [pc, #328]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0c:	4b50      	ldr	r3, [pc, #320]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	494d      	ldr	r1, [pc, #308]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d044      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	4b47      	ldr	r3, [pc, #284]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d119      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e07f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d003      	beq.n	8003f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f52:	4b3f      	ldr	r3, [pc, #252]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e06f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f62:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e067      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f72:	4b37      	ldr	r3, [pc, #220]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 0203 	bic.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4934      	ldr	r1, [pc, #208]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f84:	f7fd fe14 	bl	8001bb0 <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8c:	f7fd fe10 	bl	8001bb0 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e04f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 020c 	and.w	r2, r3, #12
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1eb      	bne.n	8003f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b25      	ldr	r3, [pc, #148]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d20c      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b22      	ldr	r3, [pc, #136]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fca:	4b20      	ldr	r3, [pc, #128]	@ (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e032      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe8:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4916      	ldr	r1, [pc, #88]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004006:	4b12      	ldr	r3, [pc, #72]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	490e      	ldr	r1, [pc, #56]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800401a:	f000 f821 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 800401e:	4602      	mov	r2, r0
 8004020:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	490a      	ldr	r1, [pc, #40]	@ (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	5ccb      	ldrb	r3, [r1, r3]
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	4a09      	ldr	r2, [pc, #36]	@ (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004036:	4b09      	ldr	r3, [pc, #36]	@ (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fd fc72 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023c00 	.word	0x40023c00
 8004050:	40023800 	.word	0x40023800
 8004054:	0800ad24 	.word	0x0800ad24
 8004058:	20000000 	.word	0x20000000
 800405c:	20000004 	.word	0x20000004

08004060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004064:	b094      	sub	sp, #80	@ 0x50
 8004066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	647b      	str	r3, [r7, #68]	@ 0x44
 800406c:	2300      	movs	r3, #0
 800406e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004070:	2300      	movs	r3, #0
 8004072:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004078:	4b79      	ldr	r3, [pc, #484]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b08      	cmp	r3, #8
 8004082:	d00d      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004084:	2b08      	cmp	r3, #8
 8004086:	f200 80e1 	bhi.w	800424c <HAL_RCC_GetSysClockFreq+0x1ec>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x34>
 800408e:	2b04      	cmp	r3, #4
 8004090:	d003      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0x3a>
 8004092:	e0db      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004094:	4b73      	ldr	r3, [pc, #460]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x204>)
 8004096:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004098:	e0db      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800409a:	4b73      	ldr	r3, [pc, #460]	@ (8004268 <HAL_RCC_GetSysClockFreq+0x208>)
 800409c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800409e:	e0d8      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d063      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	2200      	movs	r2, #0
 80040be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ca:	2300      	movs	r3, #0
 80040cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040d2:	4622      	mov	r2, r4
 80040d4:	462b      	mov	r3, r5
 80040d6:	f04f 0000 	mov.w	r0, #0
 80040da:	f04f 0100 	mov.w	r1, #0
 80040de:	0159      	lsls	r1, r3, #5
 80040e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040e4:	0150      	lsls	r0, r2, #5
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4621      	mov	r1, r4
 80040ec:	1a51      	subs	r1, r2, r1
 80040ee:	6139      	str	r1, [r7, #16]
 80040f0:	4629      	mov	r1, r5
 80040f2:	eb63 0301 	sbc.w	r3, r3, r1
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004104:	4659      	mov	r1, fp
 8004106:	018b      	lsls	r3, r1, #6
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800410e:	4651      	mov	r1, sl
 8004110:	018a      	lsls	r2, r1, #6
 8004112:	4651      	mov	r1, sl
 8004114:	ebb2 0801 	subs.w	r8, r2, r1
 8004118:	4659      	mov	r1, fp
 800411a:	eb63 0901 	sbc.w	r9, r3, r1
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800412a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004132:	4690      	mov	r8, r2
 8004134:	4699      	mov	r9, r3
 8004136:	4623      	mov	r3, r4
 8004138:	eb18 0303 	adds.w	r3, r8, r3
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	462b      	mov	r3, r5
 8004140:	eb49 0303 	adc.w	r3, r9, r3
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004152:	4629      	mov	r1, r5
 8004154:	024b      	lsls	r3, r1, #9
 8004156:	4621      	mov	r1, r4
 8004158:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800415c:	4621      	mov	r1, r4
 800415e:	024a      	lsls	r2, r1, #9
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004166:	2200      	movs	r2, #0
 8004168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800416a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800416c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004170:	f7fc fd9a 	bl	8000ca8 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4613      	mov	r3, r2
 800417a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800417c:	e058      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417e:	4b38      	ldr	r3, [pc, #224]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	099b      	lsrs	r3, r3, #6
 8004184:	2200      	movs	r2, #0
 8004186:	4618      	mov	r0, r3
 8004188:	4611      	mov	r1, r2
 800418a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800418e:	623b      	str	r3, [r7, #32]
 8004190:	2300      	movs	r3, #0
 8004192:	627b      	str	r3, [r7, #36]	@ 0x24
 8004194:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004198:	4642      	mov	r2, r8
 800419a:	464b      	mov	r3, r9
 800419c:	f04f 0000 	mov.w	r0, #0
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	0159      	lsls	r1, r3, #5
 80041a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041aa:	0150      	lsls	r0, r2, #5
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4641      	mov	r1, r8
 80041b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041b6:	4649      	mov	r1, r9
 80041b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041d0:	ebb2 040a 	subs.w	r4, r2, sl
 80041d4:	eb63 050b 	sbc.w	r5, r3, fp
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	00eb      	lsls	r3, r5, #3
 80041e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041e6:	00e2      	lsls	r2, r4, #3
 80041e8:	4614      	mov	r4, r2
 80041ea:	461d      	mov	r5, r3
 80041ec:	4643      	mov	r3, r8
 80041ee:	18e3      	adds	r3, r4, r3
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	464b      	mov	r3, r9
 80041f4:	eb45 0303 	adc.w	r3, r5, r3
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004206:	4629      	mov	r1, r5
 8004208:	028b      	lsls	r3, r1, #10
 800420a:	4621      	mov	r1, r4
 800420c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004210:	4621      	mov	r1, r4
 8004212:	028a      	lsls	r2, r1, #10
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800421a:	2200      	movs	r2, #0
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	61fa      	str	r2, [r7, #28]
 8004220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004224:	f7fc fd40 	bl	8000ca8 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4613      	mov	r3, r2
 800422e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004230:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x200>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	3301      	adds	r3, #1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004240:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800424a:	e002      	b.n	8004252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x204>)
 800424e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004254:	4618      	mov	r0, r3
 8004256:	3750      	adds	r7, #80	@ 0x50
 8004258:	46bd      	mov	sp, r7
 800425a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	00f42400 	.word	0x00f42400
 8004268:	007a1200 	.word	0x007a1200

0800426c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004270:	4b03      	ldr	r3, [pc, #12]	@ (8004280 <HAL_RCC_GetHCLKFreq+0x14>)
 8004272:	681b      	ldr	r3, [r3, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000000 	.word	0x20000000

08004284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004288:	f7ff fff0 	bl	800426c <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0a9b      	lsrs	r3, r3, #10
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4903      	ldr	r1, [pc, #12]	@ (80042a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40023800 	.word	0x40023800
 80042a8:	0800ad34 	.word	0x0800ad34

080042ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042b0:	f7ff ffdc 	bl	800426c <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0b5b      	lsrs	r3, r3, #13
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4903      	ldr	r1, [pc, #12]	@ (80042d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40023800 	.word	0x40023800
 80042d0:	0800ad34 	.word	0x0800ad34

080042d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	220f      	movs	r2, #15
 80042e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042e4:	4b12      	ldr	r3, [pc, #72]	@ (8004330 <HAL_RCC_GetClockConfig+0x5c>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0203 	and.w	r2, r3, #3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004330 <HAL_RCC_GetClockConfig+0x5c>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <HAL_RCC_GetClockConfig+0x5c>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004308:	4b09      	ldr	r3, [pc, #36]	@ (8004330 <HAL_RCC_GetClockConfig+0x5c>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	08db      	lsrs	r3, r3, #3
 800430e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004316:	4b07      	ldr	r3, [pc, #28]	@ (8004334 <HAL_RCC_GetClockConfig+0x60>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 020f 	and.w	r2, r3, #15
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	601a      	str	r2, [r3, #0]
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800
 8004334:	40023c00 	.word	0x40023c00

08004338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e041      	b.n	80043ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f839 	bl	80043d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f000 f9d8 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d001      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e04e      	b.n	80044a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a23      	ldr	r2, [pc, #140]	@ (80044b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d022      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442e:	d01d      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1c      	ldr	r2, [pc, #112]	@ (80044bc <HAL_TIM_Base_Start_IT+0xd0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1b      	ldr	r2, [pc, #108]	@ (80044c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a19      	ldr	r2, [pc, #100]	@ (80044c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d111      	bne.n	8004490 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b06      	cmp	r3, #6
 800447c:	d010      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448e:	e007      	b.n	80044a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40010400 	.word	0x40010400
 80044c4:	40014000 	.word	0x40014000
 80044c8:	40001800 	.word	0x40001800

080044cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d122      	bne.n	8004528 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d11b      	bne.n	8004528 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0202 	mvn.w	r2, #2
 80044f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8ee 	bl	80046f0 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8e0 	bl	80046dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8f1 	bl	8004704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b04      	cmp	r3, #4
 8004534:	d122      	bne.n	800457c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b04      	cmp	r3, #4
 8004542:	d11b      	bne.n	800457c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0204 	mvn.w	r2, #4
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8c4 	bl	80046f0 <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8b6 	bl	80046dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8c7 	bl	8004704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b08      	cmp	r3, #8
 8004588:	d122      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b08      	cmp	r3, #8
 8004596:	d11b      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0208 	mvn.w	r2, #8
 80045a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2204      	movs	r2, #4
 80045a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f89a 	bl	80046f0 <HAL_TIM_IC_CaptureCallback>
 80045bc:	e005      	b.n	80045ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f88c 	bl	80046dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f89d 	bl	8004704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d122      	bne.n	8004624 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d11b      	bne.n	8004624 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0210 	mvn.w	r2, #16
 80045f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2208      	movs	r2, #8
 80045fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f870 	bl	80046f0 <HAL_TIM_IC_CaptureCallback>
 8004610:	e005      	b.n	800461e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f862 	bl	80046dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f873 	bl	8004704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10e      	bne.n	8004650 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d107      	bne.n	8004650 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0201 	mvn.w	r2, #1
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fc ff7a 	bl	8001544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465a:	2b80      	cmp	r3, #128	@ 0x80
 800465c:	d10e      	bne.n	800467c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b80      	cmp	r3, #128	@ 0x80
 800466a:	d107      	bne.n	800467c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f902 	bl	8004880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004686:	2b40      	cmp	r3, #64	@ 0x40
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f838 	bl	8004718 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0220 	mvn.w	r2, #32
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8cc 	bl	800486c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a40      	ldr	r2, [pc, #256]	@ (8004840 <TIM_Base_SetConfig+0x114>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474a:	d00f      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3d      	ldr	r2, [pc, #244]	@ (8004844 <TIM_Base_SetConfig+0x118>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00b      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3c      	ldr	r2, [pc, #240]	@ (8004848 <TIM_Base_SetConfig+0x11c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d007      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3b      	ldr	r2, [pc, #236]	@ (800484c <TIM_Base_SetConfig+0x120>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3a      	ldr	r2, [pc, #232]	@ (8004850 <TIM_Base_SetConfig+0x124>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d108      	bne.n	800477e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2f      	ldr	r2, [pc, #188]	@ (8004840 <TIM_Base_SetConfig+0x114>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d02b      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478c:	d027      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2c      	ldr	r2, [pc, #176]	@ (8004844 <TIM_Base_SetConfig+0x118>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d023      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2b      	ldr	r2, [pc, #172]	@ (8004848 <TIM_Base_SetConfig+0x11c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01f      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2a      	ldr	r2, [pc, #168]	@ (800484c <TIM_Base_SetConfig+0x120>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01b      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a29      	ldr	r2, [pc, #164]	@ (8004850 <TIM_Base_SetConfig+0x124>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d017      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a28      	ldr	r2, [pc, #160]	@ (8004854 <TIM_Base_SetConfig+0x128>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a27      	ldr	r2, [pc, #156]	@ (8004858 <TIM_Base_SetConfig+0x12c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00f      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a26      	ldr	r2, [pc, #152]	@ (800485c <TIM_Base_SetConfig+0x130>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00b      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a25      	ldr	r2, [pc, #148]	@ (8004860 <TIM_Base_SetConfig+0x134>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d007      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a24      	ldr	r2, [pc, #144]	@ (8004864 <TIM_Base_SetConfig+0x138>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a23      	ldr	r2, [pc, #140]	@ (8004868 <TIM_Base_SetConfig+0x13c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d108      	bne.n	80047f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a0a      	ldr	r2, [pc, #40]	@ (8004840 <TIM_Base_SetConfig+0x114>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_Base_SetConfig+0xf8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a0c      	ldr	r2, [pc, #48]	@ (8004850 <TIM_Base_SetConfig+0x124>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d103      	bne.n	800482c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	615a      	str	r2, [r3, #20]
}
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000
 8004844:	40000400 	.word	0x40000400
 8004848:	40000800 	.word	0x40000800
 800484c:	40000c00 	.word	0x40000c00
 8004850:	40010400 	.word	0x40010400
 8004854:	40014000 	.word	0x40014000
 8004858:	40014400 	.word	0x40014400
 800485c:	40014800 	.word	0x40014800
 8004860:	40001800 	.word	0x40001800
 8004864:	40001c00 	.word	0x40001c00
 8004868:	40002000 	.word	0x40002000

0800486c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e03f      	b.n	8004926 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc ff8c 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	@ 0x24
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f9cb 	bl	8004c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800490c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b08a      	sub	sp, #40	@ 0x28
 8004932:	af02      	add	r7, sp, #8
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b20      	cmp	r3, #32
 800494c:	d17c      	bne.n	8004a48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_UART_Transmit+0x2c>
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e075      	b.n	8004a4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_UART_Transmit+0x3e>
 8004968:	2302      	movs	r3, #2
 800496a:	e06e      	b.n	8004a4a <HAL_UART_Transmit+0x11c>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2221      	movs	r2, #33	@ 0x21
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004982:	f7fd f915 	bl	8001bb0 <HAL_GetTick>
 8004986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	88fa      	ldrh	r2, [r7, #6]
 8004992:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800499c:	d108      	bne.n	80049b0 <HAL_UART_Transmit+0x82>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d104      	bne.n	80049b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e003      	b.n	80049b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80049c0:	e02a      	b.n	8004a18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	@ 0x80
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f8e2 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e036      	b.n	8004a4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	3302      	adds	r3, #2
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	e007      	b.n	8004a0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	781a      	ldrb	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	3301      	adds	r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1cf      	bne.n	80049c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2140      	movs	r1, #64	@ 0x40
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f8b2 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e000      	b.n	8004a4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b08a      	sub	sp, #40	@ 0x28
 8004a56:	af02      	add	r7, sp, #8
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	f040 808c 	bne.w	8004b8c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_UART_Receive+0x2e>
 8004a7a:	88fb      	ldrh	r3, [r7, #6]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e084      	b.n	8004b8e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_UART_Receive+0x40>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e07d      	b.n	8004b8e <HAL_UART_Receive+0x13c>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2222      	movs	r2, #34	@ 0x22
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aae:	f7fd f87f 	bl	8001bb0 <HAL_GetTick>
 8004ab2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	88fa      	ldrh	r2, [r7, #6]
 8004ab8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	88fa      	ldrh	r2, [r7, #6]
 8004abe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ac8:	d108      	bne.n	8004adc <HAL_UART_Receive+0x8a>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d104      	bne.n	8004adc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	e003      	b.n	8004ae4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004aec:	e043      	b.n	8004b76 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2200      	movs	r2, #0
 8004af6:	2120      	movs	r1, #32
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f84c 	bl	8004b96 <UART_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e042      	b.n	8004b8e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10c      	bne.n	8004b28 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	3302      	adds	r3, #2
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	e01f      	b.n	8004b68 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b30:	d007      	beq.n	8004b42 <HAL_UART_Receive+0xf0>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <HAL_UART_Receive+0xfe>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	e008      	b.n	8004b62 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3301      	adds	r3, #1
 8004b66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1b6      	bne.n	8004aee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b090      	sub	sp, #64	@ 0x40
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba6:	e050      	b.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bae:	d04c      	beq.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bb6:	f7fc fffb 	bl	8001bb0 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d241      	bcs.n	8004c4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	330c      	adds	r3, #12
 8004be4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004be6:	637a      	str	r2, [r7, #52]	@ 0x34
 8004be8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e5      	bne.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3314      	adds	r3, #20
 8004c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c1a:	623a      	str	r2, [r7, #32]
 8004c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	69f9      	ldr	r1, [r7, #28]
 8004c20:	6a3a      	ldr	r2, [r7, #32]
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e5      	bne.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e00f      	b.n	8004c6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d09f      	beq.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3740      	adds	r7, #64	@ 0x40
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c78:	b0c0      	sub	sp, #256	@ 0x100
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	68d9      	ldr	r1, [r3, #12]
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	ea40 0301 	orr.w	r3, r0, r1
 8004c9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ccc:	f021 010c 	bic.w	r1, r1, #12
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cee:	6999      	ldr	r1, [r3, #24]
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	ea40 0301 	orr.w	r3, r0, r1
 8004cfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b8f      	ldr	r3, [pc, #572]	@ (8004f40 <UART_SetConfig+0x2cc>)
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d005      	beq.n	8004d14 <UART_SetConfig+0xa0>
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8004f44 <UART_SetConfig+0x2d0>)
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d104      	bne.n	8004d1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d14:	f7ff faca 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 8004d18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d1c:	e003      	b.n	8004d26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d1e:	f7ff fab1 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8004d22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d30:	f040 810c 	bne.w	8004f4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d46:	4622      	mov	r2, r4
 8004d48:	462b      	mov	r3, r5
 8004d4a:	1891      	adds	r1, r2, r2
 8004d4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d4e:	415b      	adcs	r3, r3
 8004d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d56:	4621      	mov	r1, r4
 8004d58:	eb12 0801 	adds.w	r8, r2, r1
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	eb43 0901 	adc.w	r9, r3, r1
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d76:	4690      	mov	r8, r2
 8004d78:	4699      	mov	r9, r3
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	eb18 0303 	adds.w	r3, r8, r3
 8004d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d84:	462b      	mov	r3, r5
 8004d86:	eb49 0303 	adc.w	r3, r9, r3
 8004d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004da2:	460b      	mov	r3, r1
 8004da4:	18db      	adds	r3, r3, r3
 8004da6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004da8:	4613      	mov	r3, r2
 8004daa:	eb42 0303 	adc.w	r3, r2, r3
 8004dae:	657b      	str	r3, [r7, #84]	@ 0x54
 8004db0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004db4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004db8:	f7fb ff76 	bl	8000ca8 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4b61      	ldr	r3, [pc, #388]	@ (8004f48 <UART_SetConfig+0x2d4>)
 8004dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	011c      	lsls	r4, r3, #4
 8004dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004dd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ddc:	4642      	mov	r2, r8
 8004dde:	464b      	mov	r3, r9
 8004de0:	1891      	adds	r1, r2, r2
 8004de2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004de4:	415b      	adcs	r3, r3
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004dec:	4641      	mov	r1, r8
 8004dee:	eb12 0a01 	adds.w	sl, r2, r1
 8004df2:	4649      	mov	r1, r9
 8004df4:	eb43 0b01 	adc.w	fp, r3, r1
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e0c:	4692      	mov	sl, r2
 8004e0e:	469b      	mov	fp, r3
 8004e10:	4643      	mov	r3, r8
 8004e12:	eb1a 0303 	adds.w	r3, sl, r3
 8004e16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	18db      	adds	r3, r3, r3
 8004e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e3e:	4613      	mov	r3, r2
 8004e40:	eb42 0303 	adc.w	r3, r2, r3
 8004e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e4e:	f7fb ff2b 	bl	8000ca8 <__aeabi_uldivmod>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	4b3b      	ldr	r3, [pc, #236]	@ (8004f48 <UART_SetConfig+0x2d4>)
 8004e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e5e:	095b      	lsrs	r3, r3, #5
 8004e60:	2264      	movs	r2, #100	@ 0x64
 8004e62:	fb02 f303 	mul.w	r3, r2, r3
 8004e66:	1acb      	subs	r3, r1, r3
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e6e:	4b36      	ldr	r3, [pc, #216]	@ (8004f48 <UART_SetConfig+0x2d4>)
 8004e70:	fba3 2302 	umull	r2, r3, r3, r2
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e7c:	441c      	add	r4, r3
 8004e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e90:	4642      	mov	r2, r8
 8004e92:	464b      	mov	r3, r9
 8004e94:	1891      	adds	r1, r2, r2
 8004e96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e98:	415b      	adcs	r3, r3
 8004e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	1851      	adds	r1, r2, r1
 8004ea4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	414b      	adcs	r3, r1
 8004eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004eb8:	4659      	mov	r1, fp
 8004eba:	00cb      	lsls	r3, r1, #3
 8004ebc:	4651      	mov	r1, sl
 8004ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ec2:	4651      	mov	r1, sl
 8004ec4:	00ca      	lsls	r2, r1, #3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4642      	mov	r2, r8
 8004ece:	189b      	adds	r3, r3, r2
 8004ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	460a      	mov	r2, r1
 8004ed8:	eb42 0303 	adc.w	r3, r2, r3
 8004edc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004eec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ef0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	18db      	adds	r3, r3, r3
 8004ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004efa:	4613      	mov	r3, r2
 8004efc:	eb42 0303 	adc.w	r3, r2, r3
 8004f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f0a:	f7fb fecd 	bl	8000ca8 <__aeabi_uldivmod>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <UART_SetConfig+0x2d4>)
 8004f14:	fba3 1302 	umull	r1, r3, r3, r2
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	2164      	movs	r1, #100	@ 0x64
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	3332      	adds	r3, #50	@ 0x32
 8004f26:	4a08      	ldr	r2, [pc, #32]	@ (8004f48 <UART_SetConfig+0x2d4>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	f003 0207 	and.w	r2, r3, #7
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4422      	add	r2, r4
 8004f3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f3c:	e106      	b.n	800514c <UART_SetConfig+0x4d8>
 8004f3e:	bf00      	nop
 8004f40:	40011000 	.word	0x40011000
 8004f44:	40011400 	.word	0x40011400
 8004f48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f5e:	4642      	mov	r2, r8
 8004f60:	464b      	mov	r3, r9
 8004f62:	1891      	adds	r1, r2, r2
 8004f64:	6239      	str	r1, [r7, #32]
 8004f66:	415b      	adcs	r3, r3
 8004f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f6e:	4641      	mov	r1, r8
 8004f70:	1854      	adds	r4, r2, r1
 8004f72:	4649      	mov	r1, r9
 8004f74:	eb43 0501 	adc.w	r5, r3, r1
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	00eb      	lsls	r3, r5, #3
 8004f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f86:	00e2      	lsls	r2, r4, #3
 8004f88:	4614      	mov	r4, r2
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	4643      	mov	r3, r8
 8004f8e:	18e3      	adds	r3, r4, r3
 8004f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f94:	464b      	mov	r3, r9
 8004f96:	eb45 0303 	adc.w	r3, r5, r3
 8004f9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004faa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fba:	4629      	mov	r1, r5
 8004fbc:	008b      	lsls	r3, r1, #2
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	008a      	lsls	r2, r1, #2
 8004fc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fcc:	f7fb fe6c 	bl	8000ca8 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4b60      	ldr	r3, [pc, #384]	@ (8005158 <UART_SetConfig+0x4e4>)
 8004fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	011c      	lsls	r4, r3, #4
 8004fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fe8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	1891      	adds	r1, r2, r2
 8004ff6:	61b9      	str	r1, [r7, #24]
 8004ff8:	415b      	adcs	r3, r3
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005000:	4641      	mov	r1, r8
 8005002:	1851      	adds	r1, r2, r1
 8005004:	6139      	str	r1, [r7, #16]
 8005006:	4649      	mov	r1, r9
 8005008:	414b      	adcs	r3, r1
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005018:	4659      	mov	r1, fp
 800501a:	00cb      	lsls	r3, r1, #3
 800501c:	4651      	mov	r1, sl
 800501e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005022:	4651      	mov	r1, sl
 8005024:	00ca      	lsls	r2, r1, #3
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	4603      	mov	r3, r0
 800502c:	4642      	mov	r2, r8
 800502e:	189b      	adds	r3, r3, r2
 8005030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005034:	464b      	mov	r3, r9
 8005036:	460a      	mov	r2, r1
 8005038:	eb42 0303 	adc.w	r3, r2, r3
 800503c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800504a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005058:	4649      	mov	r1, r9
 800505a:	008b      	lsls	r3, r1, #2
 800505c:	4641      	mov	r1, r8
 800505e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005062:	4641      	mov	r1, r8
 8005064:	008a      	lsls	r2, r1, #2
 8005066:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800506a:	f7fb fe1d 	bl	8000ca8 <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4611      	mov	r1, r2
 8005074:	4b38      	ldr	r3, [pc, #224]	@ (8005158 <UART_SetConfig+0x4e4>)
 8005076:	fba3 2301 	umull	r2, r3, r3, r1
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	2264      	movs	r2, #100	@ 0x64
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	1acb      	subs	r3, r1, r3
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	3332      	adds	r3, #50	@ 0x32
 8005088:	4a33      	ldr	r2, [pc, #204]	@ (8005158 <UART_SetConfig+0x4e4>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005094:	441c      	add	r4, r3
 8005096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509a:	2200      	movs	r2, #0
 800509c:	673b      	str	r3, [r7, #112]	@ 0x70
 800509e:	677a      	str	r2, [r7, #116]	@ 0x74
 80050a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	415b      	adcs	r3, r3
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050b4:	4641      	mov	r1, r8
 80050b6:	1851      	adds	r1, r2, r1
 80050b8:	6039      	str	r1, [r7, #0]
 80050ba:	4649      	mov	r1, r9
 80050bc:	414b      	adcs	r3, r1
 80050be:	607b      	str	r3, [r7, #4]
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050cc:	4659      	mov	r1, fp
 80050ce:	00cb      	lsls	r3, r1, #3
 80050d0:	4651      	mov	r1, sl
 80050d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d6:	4651      	mov	r1, sl
 80050d8:	00ca      	lsls	r2, r1, #3
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	4603      	mov	r3, r0
 80050e0:	4642      	mov	r2, r8
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050e6:	464b      	mov	r3, r9
 80050e8:	460a      	mov	r2, r1
 80050ea:	eb42 0303 	adc.w	r3, r2, r3
 80050ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80050fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005108:	4649      	mov	r1, r9
 800510a:	008b      	lsls	r3, r1, #2
 800510c:	4641      	mov	r1, r8
 800510e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005112:	4641      	mov	r1, r8
 8005114:	008a      	lsls	r2, r1, #2
 8005116:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800511a:	f7fb fdc5 	bl	8000ca8 <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <UART_SetConfig+0x4e4>)
 8005124:	fba3 1302 	umull	r1, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	2164      	movs	r1, #100	@ 0x64
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	3332      	adds	r3, #50	@ 0x32
 8005136:	4a08      	ldr	r2, [pc, #32]	@ (8005158 <UART_SetConfig+0x4e4>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	f003 020f 	and.w	r2, r3, #15
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4422      	add	r2, r4
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005152:	46bd      	mov	sp, r7
 8005154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005158:	51eb851f 	.word	0x51eb851f

0800515c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800515c:	b084      	sub	sp, #16
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	f107 001c 	add.w	r0, r7, #28
 800516a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800516e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005170:	2b01      	cmp	r3, #1
 8005172:	d122      	bne.n	80051ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800519c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d105      	bne.n	80051ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f970 	bl	8005494 <USB_CoreReset>
 80051b4:	4603      	mov	r3, r0
 80051b6:	73fb      	strb	r3, [r7, #15]
 80051b8:	e01a      	b.n	80051f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f964 	bl	8005494 <USB_CoreReset>
 80051cc:	4603      	mov	r3, r0
 80051ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80051e2:	e005      	b.n	80051f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d10b      	bne.n	800520e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f043 0206 	orr.w	r2, r3, #6
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800520e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800521a:	b004      	add	sp, #16
 800521c:	4770      	bx	lr

0800521e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f023 0201 	bic.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d115      	bne.n	800528e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800526e:	2001      	movs	r0, #1
 8005270:	f7fc fcaa 	bl	8001bc8 <HAL_Delay>
      ms++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f8fb 	bl	8005476 <USB_GetMode>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d01e      	beq.n	80052c4 <USB_SetCurrentMode+0x84>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b31      	cmp	r3, #49	@ 0x31
 800528a:	d9f0      	bls.n	800526e <USB_SetCurrentMode+0x2e>
 800528c:	e01a      	b.n	80052c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d115      	bne.n	80052c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052a0:	2001      	movs	r0, #1
 80052a2:	f7fc fc91 	bl	8001bc8 <HAL_Delay>
      ms++;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3301      	adds	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f8e2 	bl	8005476 <USB_GetMode>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <USB_SetCurrentMode+0x84>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b31      	cmp	r3, #49	@ 0x31
 80052bc:	d9f0      	bls.n	80052a0 <USB_SetCurrentMode+0x60>
 80052be:	e001      	b.n	80052c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e005      	b.n	80052d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b32      	cmp	r3, #50	@ 0x32
 80052c8:	d101      	bne.n	80052ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3301      	adds	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4a13      	ldr	r2, [pc, #76]	@ (800533c <USB_FlushTxFifo+0x64>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d901      	bls.n	80052f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e01b      	b.n	8005330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	daf2      	bge.n	80052e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	019b      	lsls	r3, r3, #6
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3301      	adds	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a08      	ldr	r2, [pc, #32]	@ (800533c <USB_FlushTxFifo+0x64>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d901      	bls.n	8005322 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e006      	b.n	8005330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b20      	cmp	r3, #32
 800532c:	d0f0      	beq.n	8005310 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	00030d40 	.word	0x00030d40

08005340 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a11      	ldr	r2, [pc, #68]	@ (800539c <USB_FlushRxFifo+0x5c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e018      	b.n	8005390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	daf2      	bge.n	800534c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2210      	movs	r2, #16
 800536e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4a08      	ldr	r2, [pc, #32]	@ (800539c <USB_FlushRxFifo+0x5c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e006      	b.n	8005390 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b10      	cmp	r3, #16
 800538c:	d0f0      	beq.n	8005370 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	00030d40 	.word	0x00030d40

080053a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b08b      	sub	sp, #44	@ 0x2c
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	4613      	mov	r3, r2
 80053ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	089b      	lsrs	r3, r3, #2
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053c6:	2300      	movs	r3, #0
 80053c8:	623b      	str	r3, [r7, #32]
 80053ca:	e014      	b.n	80053f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	3301      	adds	r3, #1
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	3301      	adds	r3, #1
 80053e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	3301      	adds	r3, #1
 80053e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ec:	3301      	adds	r3, #1
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	3301      	adds	r3, #1
 80053f4:	623b      	str	r3, [r7, #32]
 80053f6:	6a3a      	ldr	r2, [r7, #32]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d3e6      	bcc.n	80053cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053fe:	8bfb      	ldrh	r3, [r7, #30]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01e      	beq.n	8005442 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800540e:	461a      	mov	r2, r3
 8005410:	f107 0310 	add.w	r3, r7, #16
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
 8005424:	b2da      	uxtb	r2, r3
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	701a      	strb	r2, [r3, #0]
      i++;
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	3301      	adds	r3, #1
 800542e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	3301      	adds	r3, #1
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005436:	8bfb      	ldrh	r3, [r7, #30]
 8005438:	3b01      	subs	r3, #1
 800543a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800543c:	8bfb      	ldrh	r3, [r7, #30]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1ea      	bne.n	8005418 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005444:	4618      	mov	r0, r3
 8005446:	372c      	adds	r7, #44	@ 0x2c
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4013      	ands	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005468:	68fb      	ldr	r3, [r7, #12]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f003 0301 	and.w	r3, r3, #1
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4a13      	ldr	r2, [pc, #76]	@ (80054f8 <USB_CoreReset+0x64>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d901      	bls.n	80054b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e01b      	b.n	80054ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	daf2      	bge.n	80054a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f043 0201 	orr.w	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3301      	adds	r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a09      	ldr	r2, [pc, #36]	@ (80054f8 <USB_CoreReset+0x64>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d901      	bls.n	80054dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e006      	b.n	80054ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d0f0      	beq.n	80054ca <USB_CoreReset+0x36>

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	00030d40 	.word	0x00030d40

080054fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054fc:	b084      	sub	sp, #16
 80054fe:	b580      	push	{r7, lr}
 8005500:	b086      	sub	sp, #24
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800550a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800551c:	461a      	mov	r2, r3
 800551e:	2300      	movs	r3, #0
 8005520:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005526:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005532:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d018      	beq.n	8005584 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10a      	bne.n	800556e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005566:	f043 0304 	orr.w	r3, r3, #4
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	e014      	b.n	8005598 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800557c:	f023 0304 	bic.w	r3, r3, #4
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e009      	b.n	8005598 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005592:	f023 0304 	bic.w	r3, r3, #4
 8005596:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005598:	2110      	movs	r1, #16
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff fe9c 	bl	80052d8 <USB_FlushTxFifo>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff fec8 	bl	8005340 <USB_FlushRxFifo>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	e015      	b.n	80055ec <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055cc:	461a      	mov	r2, r3
 80055ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055e0:	461a      	mov	r2, r3
 80055e2:	2300      	movs	r3, #0
 80055e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3301      	adds	r3, #1
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d3e5      	bcc.n	80055c0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005600:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005614:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a13      	ldr	r2, [pc, #76]	@ (8005668 <USB_HostInit+0x16c>)
 800561a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a13      	ldr	r2, [pc, #76]	@ (800566c <USB_HostInit+0x170>)
 8005620:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005624:	e009      	b.n	800563a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2280      	movs	r2, #128	@ 0x80
 800562a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a10      	ldr	r2, [pc, #64]	@ (8005670 <USB_HostInit+0x174>)
 8005630:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a0f      	ldr	r2, [pc, #60]	@ (8005674 <USB_HostInit+0x178>)
 8005636:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f043 0210 	orr.w	r2, r3, #16
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <USB_HostInit+0x17c>)
 8005652:	4313      	orrs	r3, r2
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005664:	b004      	add	sp, #16
 8005666:	4770      	bx	lr
 8005668:	01000200 	.word	0x01000200
 800566c:	00e00300 	.word	0x00e00300
 8005670:	00600080 	.word	0x00600080
 8005674:	004000e0 	.word	0x004000e0
 8005678:	a3200008 	.word	0xa3200008

0800567c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80056b4:	4313      	orrs	r3, r2
 80056b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d107      	bne.n	80056ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056c4:	461a      	mov	r2, r3
 80056c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80056ca:	6053      	str	r3, [r2, #4]
 80056cc:	e009      	b.n	80056e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d106      	bne.n	80056e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056da:	461a      	mov	r2, r3
 80056dc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80056e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	b29b      	uxth	r3, r3
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005712:	b480      	push	{r7}
 8005714:	b089      	sub	sp, #36	@ 0x24
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	4413      	add	r3, r2
 8005732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	0c9b      	lsrs	r3, r3, #18
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	0fdb      	lsrs	r3, r3, #31
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b20      	cmp	r3, #32
 8005760:	d104      	bne.n	800576c <USB_HC_Halt+0x5a>
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e0c8      	b.n	80058fe <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <USB_HC_Halt+0x66>
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d163      	bne.n	8005840 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	440a      	add	r2, r1
 800578e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005792:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005796:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f040 80ab 	bne.w	80058fc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d133      	bne.n	800581a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057d0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057f0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3301      	adds	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057fe:	d81d      	bhi.n	800583c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005812:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005816:	d0ec      	beq.n	80057f2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005818:	e070      	b.n	80058fc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	440a      	add	r2, r1
 8005830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005834:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005838:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800583a:	e05f      	b.n	80058fc <USB_HC_Halt+0x1ea>
            break;
 800583c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800583e:	e05d      	b.n	80058fc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	4413      	add	r3, r2
 8005848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	440a      	add	r2, r1
 8005856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800585a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800585e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d133      	bne.n	80058d8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	440a      	add	r2, r1
 8005886:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800588a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800588e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058ae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3301      	adds	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058bc:	d81d      	bhi.n	80058fa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058d4:	d0ec      	beq.n	80058b0 <USB_HC_Halt+0x19e>
 80058d6:	e011      	b.n	80058fc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	e000      	b.n	80058fc <USB_HC_Halt+0x1ea>
          break;
 80058fa:	bf00      	nop
    }
  }

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3724      	adds	r7, #36	@ 0x24
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <__cvt>:
 800590a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800590e:	ec57 6b10 	vmov	r6, r7, d0
 8005912:	2f00      	cmp	r7, #0
 8005914:	460c      	mov	r4, r1
 8005916:	4619      	mov	r1, r3
 8005918:	463b      	mov	r3, r7
 800591a:	bfbb      	ittet	lt
 800591c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005920:	461f      	movlt	r7, r3
 8005922:	2300      	movge	r3, #0
 8005924:	232d      	movlt	r3, #45	@ 0x2d
 8005926:	700b      	strb	r3, [r1, #0]
 8005928:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800592a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800592e:	4691      	mov	r9, r2
 8005930:	f023 0820 	bic.w	r8, r3, #32
 8005934:	bfbc      	itt	lt
 8005936:	4632      	movlt	r2, r6
 8005938:	4616      	movlt	r6, r2
 800593a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800593e:	d005      	beq.n	800594c <__cvt+0x42>
 8005940:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005944:	d100      	bne.n	8005948 <__cvt+0x3e>
 8005946:	3401      	adds	r4, #1
 8005948:	2102      	movs	r1, #2
 800594a:	e000      	b.n	800594e <__cvt+0x44>
 800594c:	2103      	movs	r1, #3
 800594e:	ab03      	add	r3, sp, #12
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	ab02      	add	r3, sp, #8
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	ec47 6b10 	vmov	d0, r6, r7
 800595a:	4653      	mov	r3, sl
 800595c:	4622      	mov	r2, r4
 800595e:	f001 fa3f 	bl	8006de0 <_dtoa_r>
 8005962:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005966:	4605      	mov	r5, r0
 8005968:	d119      	bne.n	800599e <__cvt+0x94>
 800596a:	f019 0f01 	tst.w	r9, #1
 800596e:	d00e      	beq.n	800598e <__cvt+0x84>
 8005970:	eb00 0904 	add.w	r9, r0, r4
 8005974:	2200      	movs	r2, #0
 8005976:	2300      	movs	r3, #0
 8005978:	4630      	mov	r0, r6
 800597a:	4639      	mov	r1, r7
 800597c:	f7fb f8b4 	bl	8000ae8 <__aeabi_dcmpeq>
 8005980:	b108      	cbz	r0, 8005986 <__cvt+0x7c>
 8005982:	f8cd 900c 	str.w	r9, [sp, #12]
 8005986:	2230      	movs	r2, #48	@ 0x30
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	454b      	cmp	r3, r9
 800598c:	d31e      	bcc.n	80059cc <__cvt+0xc2>
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005992:	1b5b      	subs	r3, r3, r5
 8005994:	4628      	mov	r0, r5
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	b004      	add	sp, #16
 800599a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059a2:	eb00 0904 	add.w	r9, r0, r4
 80059a6:	d1e5      	bne.n	8005974 <__cvt+0x6a>
 80059a8:	7803      	ldrb	r3, [r0, #0]
 80059aa:	2b30      	cmp	r3, #48	@ 0x30
 80059ac:	d10a      	bne.n	80059c4 <__cvt+0xba>
 80059ae:	2200      	movs	r2, #0
 80059b0:	2300      	movs	r3, #0
 80059b2:	4630      	mov	r0, r6
 80059b4:	4639      	mov	r1, r7
 80059b6:	f7fb f897 	bl	8000ae8 <__aeabi_dcmpeq>
 80059ba:	b918      	cbnz	r0, 80059c4 <__cvt+0xba>
 80059bc:	f1c4 0401 	rsb	r4, r4, #1
 80059c0:	f8ca 4000 	str.w	r4, [sl]
 80059c4:	f8da 3000 	ldr.w	r3, [sl]
 80059c8:	4499      	add	r9, r3
 80059ca:	e7d3      	b.n	8005974 <__cvt+0x6a>
 80059cc:	1c59      	adds	r1, r3, #1
 80059ce:	9103      	str	r1, [sp, #12]
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	e7d9      	b.n	8005988 <__cvt+0x7e>

080059d4 <__exponent>:
 80059d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059d6:	2900      	cmp	r1, #0
 80059d8:	bfba      	itte	lt
 80059da:	4249      	neglt	r1, r1
 80059dc:	232d      	movlt	r3, #45	@ 0x2d
 80059de:	232b      	movge	r3, #43	@ 0x2b
 80059e0:	2909      	cmp	r1, #9
 80059e2:	7002      	strb	r2, [r0, #0]
 80059e4:	7043      	strb	r3, [r0, #1]
 80059e6:	dd29      	ble.n	8005a3c <__exponent+0x68>
 80059e8:	f10d 0307 	add.w	r3, sp, #7
 80059ec:	461d      	mov	r5, r3
 80059ee:	270a      	movs	r7, #10
 80059f0:	461a      	mov	r2, r3
 80059f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80059f6:	fb07 1416 	mls	r4, r7, r6, r1
 80059fa:	3430      	adds	r4, #48	@ 0x30
 80059fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a00:	460c      	mov	r4, r1
 8005a02:	2c63      	cmp	r4, #99	@ 0x63
 8005a04:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005a08:	4631      	mov	r1, r6
 8005a0a:	dcf1      	bgt.n	80059f0 <__exponent+0x1c>
 8005a0c:	3130      	adds	r1, #48	@ 0x30
 8005a0e:	1e94      	subs	r4, r2, #2
 8005a10:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a14:	1c41      	adds	r1, r0, #1
 8005a16:	4623      	mov	r3, r4
 8005a18:	42ab      	cmp	r3, r5
 8005a1a:	d30a      	bcc.n	8005a32 <__exponent+0x5e>
 8005a1c:	f10d 0309 	add.w	r3, sp, #9
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	42ac      	cmp	r4, r5
 8005a24:	bf88      	it	hi
 8005a26:	2300      	movhi	r3, #0
 8005a28:	3302      	adds	r3, #2
 8005a2a:	4403      	add	r3, r0
 8005a2c:	1a18      	subs	r0, r3, r0
 8005a2e:	b003      	add	sp, #12
 8005a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a32:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a36:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a3a:	e7ed      	b.n	8005a18 <__exponent+0x44>
 8005a3c:	2330      	movs	r3, #48	@ 0x30
 8005a3e:	3130      	adds	r1, #48	@ 0x30
 8005a40:	7083      	strb	r3, [r0, #2]
 8005a42:	70c1      	strb	r1, [r0, #3]
 8005a44:	1d03      	adds	r3, r0, #4
 8005a46:	e7f1      	b.n	8005a2c <__exponent+0x58>

08005a48 <_printf_float>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	b08d      	sub	sp, #52	@ 0x34
 8005a4e:	460c      	mov	r4, r1
 8005a50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005a54:	4616      	mov	r6, r2
 8005a56:	461f      	mov	r7, r3
 8005a58:	4605      	mov	r5, r0
 8005a5a:	f001 f8b9 	bl	8006bd0 <_localeconv_r>
 8005a5e:	6803      	ldr	r3, [r0, #0]
 8005a60:	9304      	str	r3, [sp, #16]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fa fc14 	bl	8000290 <strlen>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a70:	9005      	str	r0, [sp, #20]
 8005a72:	3307      	adds	r3, #7
 8005a74:	f023 0307 	bic.w	r3, r3, #7
 8005a78:	f103 0208 	add.w	r2, r3, #8
 8005a7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a80:	f8d4 b000 	ldr.w	fp, [r4]
 8005a84:	f8c8 2000 	str.w	r2, [r8]
 8005a88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005a90:	9307      	str	r3, [sp, #28]
 8005a92:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a9e:	4b9c      	ldr	r3, [pc, #624]	@ (8005d10 <_printf_float+0x2c8>)
 8005aa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005aa4:	f7fb f852 	bl	8000b4c <__aeabi_dcmpun>
 8005aa8:	bb70      	cbnz	r0, 8005b08 <_printf_float+0xc0>
 8005aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aae:	4b98      	ldr	r3, [pc, #608]	@ (8005d10 <_printf_float+0x2c8>)
 8005ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ab4:	f7fb f82c 	bl	8000b10 <__aeabi_dcmple>
 8005ab8:	bb30      	cbnz	r0, 8005b08 <_printf_float+0xc0>
 8005aba:	2200      	movs	r2, #0
 8005abc:	2300      	movs	r3, #0
 8005abe:	4640      	mov	r0, r8
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	f7fb f81b 	bl	8000afc <__aeabi_dcmplt>
 8005ac6:	b110      	cbz	r0, 8005ace <_printf_float+0x86>
 8005ac8:	232d      	movs	r3, #45	@ 0x2d
 8005aca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ace:	4a91      	ldr	r2, [pc, #580]	@ (8005d14 <_printf_float+0x2cc>)
 8005ad0:	4b91      	ldr	r3, [pc, #580]	@ (8005d18 <_printf_float+0x2d0>)
 8005ad2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ad6:	bf94      	ite	ls
 8005ad8:	4690      	movls	r8, r2
 8005ada:	4698      	movhi	r8, r3
 8005adc:	2303      	movs	r3, #3
 8005ade:	6123      	str	r3, [r4, #16]
 8005ae0:	f02b 0304 	bic.w	r3, fp, #4
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	f04f 0900 	mov.w	r9, #0
 8005aea:	9700      	str	r7, [sp, #0]
 8005aec:	4633      	mov	r3, r6
 8005aee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005af0:	4621      	mov	r1, r4
 8005af2:	4628      	mov	r0, r5
 8005af4:	f000 f9d2 	bl	8005e9c <_printf_common>
 8005af8:	3001      	adds	r0, #1
 8005afa:	f040 808d 	bne.w	8005c18 <_printf_float+0x1d0>
 8005afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b02:	b00d      	add	sp, #52	@ 0x34
 8005b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	4649      	mov	r1, r9
 8005b10:	f7fb f81c 	bl	8000b4c <__aeabi_dcmpun>
 8005b14:	b140      	cbz	r0, 8005b28 <_printf_float+0xe0>
 8005b16:	464b      	mov	r3, r9
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bfbc      	itt	lt
 8005b1c:	232d      	movlt	r3, #45	@ 0x2d
 8005b1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b22:	4a7e      	ldr	r2, [pc, #504]	@ (8005d1c <_printf_float+0x2d4>)
 8005b24:	4b7e      	ldr	r3, [pc, #504]	@ (8005d20 <_printf_float+0x2d8>)
 8005b26:	e7d4      	b.n	8005ad2 <_printf_float+0x8a>
 8005b28:	6863      	ldr	r3, [r4, #4]
 8005b2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005b2e:	9206      	str	r2, [sp, #24]
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	d13b      	bne.n	8005bac <_printf_float+0x164>
 8005b34:	2306      	movs	r3, #6
 8005b36:	6063      	str	r3, [r4, #4]
 8005b38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6022      	str	r2, [r4, #0]
 8005b40:	9303      	str	r3, [sp, #12]
 8005b42:	ab0a      	add	r3, sp, #40	@ 0x28
 8005b44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005b48:	ab09      	add	r3, sp, #36	@ 0x24
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	6861      	ldr	r1, [r4, #4]
 8005b4e:	ec49 8b10 	vmov	d0, r8, r9
 8005b52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005b56:	4628      	mov	r0, r5
 8005b58:	f7ff fed7 	bl	800590a <__cvt>
 8005b5c:	9b06      	ldr	r3, [sp, #24]
 8005b5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b60:	2b47      	cmp	r3, #71	@ 0x47
 8005b62:	4680      	mov	r8, r0
 8005b64:	d129      	bne.n	8005bba <_printf_float+0x172>
 8005b66:	1cc8      	adds	r0, r1, #3
 8005b68:	db02      	blt.n	8005b70 <_printf_float+0x128>
 8005b6a:	6863      	ldr	r3, [r4, #4]
 8005b6c:	4299      	cmp	r1, r3
 8005b6e:	dd41      	ble.n	8005bf4 <_printf_float+0x1ac>
 8005b70:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b74:	fa5f fa8a 	uxtb.w	sl, sl
 8005b78:	3901      	subs	r1, #1
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b80:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b82:	f7ff ff27 	bl	80059d4 <__exponent>
 8005b86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b88:	1813      	adds	r3, r2, r0
 8005b8a:	2a01      	cmp	r2, #1
 8005b8c:	4681      	mov	r9, r0
 8005b8e:	6123      	str	r3, [r4, #16]
 8005b90:	dc02      	bgt.n	8005b98 <_printf_float+0x150>
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	07d2      	lsls	r2, r2, #31
 8005b96:	d501      	bpl.n	8005b9c <_printf_float+0x154>
 8005b98:	3301      	adds	r3, #1
 8005b9a:	6123      	str	r3, [r4, #16]
 8005b9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0a2      	beq.n	8005aea <_printf_float+0xa2>
 8005ba4:	232d      	movs	r3, #45	@ 0x2d
 8005ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005baa:	e79e      	b.n	8005aea <_printf_float+0xa2>
 8005bac:	9a06      	ldr	r2, [sp, #24]
 8005bae:	2a47      	cmp	r2, #71	@ 0x47
 8005bb0:	d1c2      	bne.n	8005b38 <_printf_float+0xf0>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1c0      	bne.n	8005b38 <_printf_float+0xf0>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e7bd      	b.n	8005b36 <_printf_float+0xee>
 8005bba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bbe:	d9db      	bls.n	8005b78 <_printf_float+0x130>
 8005bc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005bc4:	d118      	bne.n	8005bf8 <_printf_float+0x1b0>
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	6863      	ldr	r3, [r4, #4]
 8005bca:	dd0b      	ble.n	8005be4 <_printf_float+0x19c>
 8005bcc:	6121      	str	r1, [r4, #16]
 8005bce:	b913      	cbnz	r3, 8005bd6 <_printf_float+0x18e>
 8005bd0:	6822      	ldr	r2, [r4, #0]
 8005bd2:	07d0      	lsls	r0, r2, #31
 8005bd4:	d502      	bpl.n	8005bdc <_printf_float+0x194>
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	440b      	add	r3, r1
 8005bda:	6123      	str	r3, [r4, #16]
 8005bdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005bde:	f04f 0900 	mov.w	r9, #0
 8005be2:	e7db      	b.n	8005b9c <_printf_float+0x154>
 8005be4:	b913      	cbnz	r3, 8005bec <_printf_float+0x1a4>
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	07d2      	lsls	r2, r2, #31
 8005bea:	d501      	bpl.n	8005bf0 <_printf_float+0x1a8>
 8005bec:	3302      	adds	r3, #2
 8005bee:	e7f4      	b.n	8005bda <_printf_float+0x192>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e7f2      	b.n	8005bda <_printf_float+0x192>
 8005bf4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bfa:	4299      	cmp	r1, r3
 8005bfc:	db05      	blt.n	8005c0a <_printf_float+0x1c2>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	6121      	str	r1, [r4, #16]
 8005c02:	07d8      	lsls	r0, r3, #31
 8005c04:	d5ea      	bpl.n	8005bdc <_printf_float+0x194>
 8005c06:	1c4b      	adds	r3, r1, #1
 8005c08:	e7e7      	b.n	8005bda <_printf_float+0x192>
 8005c0a:	2900      	cmp	r1, #0
 8005c0c:	bfd4      	ite	le
 8005c0e:	f1c1 0202 	rsble	r2, r1, #2
 8005c12:	2201      	movgt	r2, #1
 8005c14:	4413      	add	r3, r2
 8005c16:	e7e0      	b.n	8005bda <_printf_float+0x192>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	055a      	lsls	r2, r3, #21
 8005c1c:	d407      	bmi.n	8005c2e <_printf_float+0x1e6>
 8005c1e:	6923      	ldr	r3, [r4, #16]
 8005c20:	4642      	mov	r2, r8
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d12b      	bne.n	8005c84 <_printf_float+0x23c>
 8005c2c:	e767      	b.n	8005afe <_printf_float+0xb6>
 8005c2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c32:	f240 80dd 	bls.w	8005df0 <_printf_float+0x3a8>
 8005c36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f7fa ff53 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d033      	beq.n	8005cae <_printf_float+0x266>
 8005c46:	4a37      	ldr	r2, [pc, #220]	@ (8005d24 <_printf_float+0x2dc>)
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	47b8      	blx	r7
 8005c50:	3001      	adds	r0, #1
 8005c52:	f43f af54 	beq.w	8005afe <_printf_float+0xb6>
 8005c56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005c5a:	4543      	cmp	r3, r8
 8005c5c:	db02      	blt.n	8005c64 <_printf_float+0x21c>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	07d8      	lsls	r0, r3, #31
 8005c62:	d50f      	bpl.n	8005c84 <_printf_float+0x23c>
 8005c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c68:	4631      	mov	r1, r6
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	f43f af45 	beq.w	8005afe <_printf_float+0xb6>
 8005c74:	f04f 0900 	mov.w	r9, #0
 8005c78:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005c7c:	f104 0a1a 	add.w	sl, r4, #26
 8005c80:	45c8      	cmp	r8, r9
 8005c82:	dc09      	bgt.n	8005c98 <_printf_float+0x250>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	079b      	lsls	r3, r3, #30
 8005c88:	f100 8103 	bmi.w	8005e92 <_printf_float+0x44a>
 8005c8c:	68e0      	ldr	r0, [r4, #12]
 8005c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c90:	4298      	cmp	r0, r3
 8005c92:	bfb8      	it	lt
 8005c94:	4618      	movlt	r0, r3
 8005c96:	e734      	b.n	8005b02 <_printf_float+0xba>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4652      	mov	r2, sl
 8005c9c:	4631      	mov	r1, r6
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	47b8      	blx	r7
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	f43f af2b 	beq.w	8005afe <_printf_float+0xb6>
 8005ca8:	f109 0901 	add.w	r9, r9, #1
 8005cac:	e7e8      	b.n	8005c80 <_printf_float+0x238>
 8005cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	dc39      	bgt.n	8005d28 <_printf_float+0x2e0>
 8005cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d24 <_printf_float+0x2dc>)
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f43f af1d 	beq.w	8005afe <_printf_float+0xb6>
 8005cc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005cc8:	ea59 0303 	orrs.w	r3, r9, r3
 8005ccc:	d102      	bne.n	8005cd4 <_printf_float+0x28c>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	07d9      	lsls	r1, r3, #31
 8005cd2:	d5d7      	bpl.n	8005c84 <_printf_float+0x23c>
 8005cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cd8:	4631      	mov	r1, r6
 8005cda:	4628      	mov	r0, r5
 8005cdc:	47b8      	blx	r7
 8005cde:	3001      	adds	r0, #1
 8005ce0:	f43f af0d 	beq.w	8005afe <_printf_float+0xb6>
 8005ce4:	f04f 0a00 	mov.w	sl, #0
 8005ce8:	f104 0b1a 	add.w	fp, r4, #26
 8005cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cee:	425b      	negs	r3, r3
 8005cf0:	4553      	cmp	r3, sl
 8005cf2:	dc01      	bgt.n	8005cf8 <_printf_float+0x2b0>
 8005cf4:	464b      	mov	r3, r9
 8005cf6:	e793      	b.n	8005c20 <_printf_float+0x1d8>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	465a      	mov	r2, fp
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f aefb 	beq.w	8005afe <_printf_float+0xb6>
 8005d08:	f10a 0a01 	add.w	sl, sl, #1
 8005d0c:	e7ee      	b.n	8005cec <_printf_float+0x2a4>
 8005d0e:	bf00      	nop
 8005d10:	7fefffff 	.word	0x7fefffff
 8005d14:	0800ad3c 	.word	0x0800ad3c
 8005d18:	0800ad40 	.word	0x0800ad40
 8005d1c:	0800ad44 	.word	0x0800ad44
 8005d20:	0800ad48 	.word	0x0800ad48
 8005d24:	0800b0d8 	.word	0x0800b0d8
 8005d28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d2e:	4553      	cmp	r3, sl
 8005d30:	bfa8      	it	ge
 8005d32:	4653      	movge	r3, sl
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	4699      	mov	r9, r3
 8005d38:	dc36      	bgt.n	8005da8 <_printf_float+0x360>
 8005d3a:	f04f 0b00 	mov.w	fp, #0
 8005d3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d42:	f104 021a 	add.w	r2, r4, #26
 8005d46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d48:	9306      	str	r3, [sp, #24]
 8005d4a:	eba3 0309 	sub.w	r3, r3, r9
 8005d4e:	455b      	cmp	r3, fp
 8005d50:	dc31      	bgt.n	8005db6 <_printf_float+0x36e>
 8005d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d54:	459a      	cmp	sl, r3
 8005d56:	dc3a      	bgt.n	8005dce <_printf_float+0x386>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	07da      	lsls	r2, r3, #31
 8005d5c:	d437      	bmi.n	8005dce <_printf_float+0x386>
 8005d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d60:	ebaa 0903 	sub.w	r9, sl, r3
 8005d64:	9b06      	ldr	r3, [sp, #24]
 8005d66:	ebaa 0303 	sub.w	r3, sl, r3
 8005d6a:	4599      	cmp	r9, r3
 8005d6c:	bfa8      	it	ge
 8005d6e:	4699      	movge	r9, r3
 8005d70:	f1b9 0f00 	cmp.w	r9, #0
 8005d74:	dc33      	bgt.n	8005dde <_printf_float+0x396>
 8005d76:	f04f 0800 	mov.w	r8, #0
 8005d7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d7e:	f104 0b1a 	add.w	fp, r4, #26
 8005d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d84:	ebaa 0303 	sub.w	r3, sl, r3
 8005d88:	eba3 0309 	sub.w	r3, r3, r9
 8005d8c:	4543      	cmp	r3, r8
 8005d8e:	f77f af79 	ble.w	8005c84 <_printf_float+0x23c>
 8005d92:	2301      	movs	r3, #1
 8005d94:	465a      	mov	r2, fp
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b8      	blx	r7
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	f43f aeae 	beq.w	8005afe <_printf_float+0xb6>
 8005da2:	f108 0801 	add.w	r8, r8, #1
 8005da6:	e7ec      	b.n	8005d82 <_printf_float+0x33a>
 8005da8:	4642      	mov	r2, r8
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	d1c2      	bne.n	8005d3a <_printf_float+0x2f2>
 8005db4:	e6a3      	b.n	8005afe <_printf_float+0xb6>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	9206      	str	r2, [sp, #24]
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f ae9c 	beq.w	8005afe <_printf_float+0xb6>
 8005dc6:	9a06      	ldr	r2, [sp, #24]
 8005dc8:	f10b 0b01 	add.w	fp, fp, #1
 8005dcc:	e7bb      	b.n	8005d46 <_printf_float+0x2fe>
 8005dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	47b8      	blx	r7
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d1c0      	bne.n	8005d5e <_printf_float+0x316>
 8005ddc:	e68f      	b.n	8005afe <_printf_float+0xb6>
 8005dde:	9a06      	ldr	r2, [sp, #24]
 8005de0:	464b      	mov	r3, r9
 8005de2:	4442      	add	r2, r8
 8005de4:	4631      	mov	r1, r6
 8005de6:	4628      	mov	r0, r5
 8005de8:	47b8      	blx	r7
 8005dea:	3001      	adds	r0, #1
 8005dec:	d1c3      	bne.n	8005d76 <_printf_float+0x32e>
 8005dee:	e686      	b.n	8005afe <_printf_float+0xb6>
 8005df0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005df4:	f1ba 0f01 	cmp.w	sl, #1
 8005df8:	dc01      	bgt.n	8005dfe <_printf_float+0x3b6>
 8005dfa:	07db      	lsls	r3, r3, #31
 8005dfc:	d536      	bpl.n	8005e6c <_printf_float+0x424>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4642      	mov	r2, r8
 8005e02:	4631      	mov	r1, r6
 8005e04:	4628      	mov	r0, r5
 8005e06:	47b8      	blx	r7
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f43f ae78 	beq.w	8005afe <_printf_float+0xb6>
 8005e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e12:	4631      	mov	r1, r6
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	f43f ae70 	beq.w	8005afe <_printf_float+0xb6>
 8005e1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e22:	2200      	movs	r2, #0
 8005e24:	2300      	movs	r3, #0
 8005e26:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005e2a:	f7fa fe5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e2e:	b9c0      	cbnz	r0, 8005e62 <_printf_float+0x41a>
 8005e30:	4653      	mov	r3, sl
 8005e32:	f108 0201 	add.w	r2, r8, #1
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d10c      	bne.n	8005e5a <_printf_float+0x412>
 8005e40:	e65d      	b.n	8005afe <_printf_float+0xb6>
 8005e42:	2301      	movs	r3, #1
 8005e44:	465a      	mov	r2, fp
 8005e46:	4631      	mov	r1, r6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b8      	blx	r7
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	f43f ae56 	beq.w	8005afe <_printf_float+0xb6>
 8005e52:	f108 0801 	add.w	r8, r8, #1
 8005e56:	45d0      	cmp	r8, sl
 8005e58:	dbf3      	blt.n	8005e42 <_printf_float+0x3fa>
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e60:	e6df      	b.n	8005c22 <_printf_float+0x1da>
 8005e62:	f04f 0800 	mov.w	r8, #0
 8005e66:	f104 0b1a 	add.w	fp, r4, #26
 8005e6a:	e7f4      	b.n	8005e56 <_printf_float+0x40e>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	4642      	mov	r2, r8
 8005e70:	e7e1      	b.n	8005e36 <_printf_float+0x3ee>
 8005e72:	2301      	movs	r3, #1
 8005e74:	464a      	mov	r2, r9
 8005e76:	4631      	mov	r1, r6
 8005e78:	4628      	mov	r0, r5
 8005e7a:	47b8      	blx	r7
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	f43f ae3e 	beq.w	8005afe <_printf_float+0xb6>
 8005e82:	f108 0801 	add.w	r8, r8, #1
 8005e86:	68e3      	ldr	r3, [r4, #12]
 8005e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e8a:	1a5b      	subs	r3, r3, r1
 8005e8c:	4543      	cmp	r3, r8
 8005e8e:	dcf0      	bgt.n	8005e72 <_printf_float+0x42a>
 8005e90:	e6fc      	b.n	8005c8c <_printf_float+0x244>
 8005e92:	f04f 0800 	mov.w	r8, #0
 8005e96:	f104 0919 	add.w	r9, r4, #25
 8005e9a:	e7f4      	b.n	8005e86 <_printf_float+0x43e>

08005e9c <_printf_common>:
 8005e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea0:	4616      	mov	r6, r2
 8005ea2:	4698      	mov	r8, r3
 8005ea4:	688a      	ldr	r2, [r1, #8]
 8005ea6:	690b      	ldr	r3, [r1, #16]
 8005ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	bfb8      	it	lt
 8005eb0:	4613      	movlt	r3, r2
 8005eb2:	6033      	str	r3, [r6, #0]
 8005eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005eb8:	4607      	mov	r7, r0
 8005eba:	460c      	mov	r4, r1
 8005ebc:	b10a      	cbz	r2, 8005ec2 <_printf_common+0x26>
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	6033      	str	r3, [r6, #0]
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	0699      	lsls	r1, r3, #26
 8005ec6:	bf42      	ittt	mi
 8005ec8:	6833      	ldrmi	r3, [r6, #0]
 8005eca:	3302      	addmi	r3, #2
 8005ecc:	6033      	strmi	r3, [r6, #0]
 8005ece:	6825      	ldr	r5, [r4, #0]
 8005ed0:	f015 0506 	ands.w	r5, r5, #6
 8005ed4:	d106      	bne.n	8005ee4 <_printf_common+0x48>
 8005ed6:	f104 0a19 	add.w	sl, r4, #25
 8005eda:	68e3      	ldr	r3, [r4, #12]
 8005edc:	6832      	ldr	r2, [r6, #0]
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	42ab      	cmp	r3, r5
 8005ee2:	dc26      	bgt.n	8005f32 <_printf_common+0x96>
 8005ee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ee8:	6822      	ldr	r2, [r4, #0]
 8005eea:	3b00      	subs	r3, #0
 8005eec:	bf18      	it	ne
 8005eee:	2301      	movne	r3, #1
 8005ef0:	0692      	lsls	r2, r2, #26
 8005ef2:	d42b      	bmi.n	8005f4c <_printf_common+0xb0>
 8005ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ef8:	4641      	mov	r1, r8
 8005efa:	4638      	mov	r0, r7
 8005efc:	47c8      	blx	r9
 8005efe:	3001      	adds	r0, #1
 8005f00:	d01e      	beq.n	8005f40 <_printf_common+0xa4>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	f003 0306 	and.w	r3, r3, #6
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	bf02      	ittt	eq
 8005f0e:	68e5      	ldreq	r5, [r4, #12]
 8005f10:	6833      	ldreq	r3, [r6, #0]
 8005f12:	1aed      	subeq	r5, r5, r3
 8005f14:	68a3      	ldr	r3, [r4, #8]
 8005f16:	bf0c      	ite	eq
 8005f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f1c:	2500      	movne	r5, #0
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	bfc4      	itt	gt
 8005f22:	1a9b      	subgt	r3, r3, r2
 8005f24:	18ed      	addgt	r5, r5, r3
 8005f26:	2600      	movs	r6, #0
 8005f28:	341a      	adds	r4, #26
 8005f2a:	42b5      	cmp	r5, r6
 8005f2c:	d11a      	bne.n	8005f64 <_printf_common+0xc8>
 8005f2e:	2000      	movs	r0, #0
 8005f30:	e008      	b.n	8005f44 <_printf_common+0xa8>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4652      	mov	r2, sl
 8005f36:	4641      	mov	r1, r8
 8005f38:	4638      	mov	r0, r7
 8005f3a:	47c8      	blx	r9
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d103      	bne.n	8005f48 <_printf_common+0xac>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f48:	3501      	adds	r5, #1
 8005f4a:	e7c6      	b.n	8005eda <_printf_common+0x3e>
 8005f4c:	18e1      	adds	r1, r4, r3
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	2030      	movs	r0, #48	@ 0x30
 8005f52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f56:	4422      	add	r2, r4
 8005f58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f60:	3302      	adds	r3, #2
 8005f62:	e7c7      	b.n	8005ef4 <_printf_common+0x58>
 8005f64:	2301      	movs	r3, #1
 8005f66:	4622      	mov	r2, r4
 8005f68:	4641      	mov	r1, r8
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	47c8      	blx	r9
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d0e6      	beq.n	8005f40 <_printf_common+0xa4>
 8005f72:	3601      	adds	r6, #1
 8005f74:	e7d9      	b.n	8005f2a <_printf_common+0x8e>
	...

08005f78 <_printf_i>:
 8005f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f7c:	7e0f      	ldrb	r7, [r1, #24]
 8005f7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f80:	2f78      	cmp	r7, #120	@ 0x78
 8005f82:	4691      	mov	r9, r2
 8005f84:	4680      	mov	r8, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	469a      	mov	sl, r3
 8005f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f8e:	d807      	bhi.n	8005fa0 <_printf_i+0x28>
 8005f90:	2f62      	cmp	r7, #98	@ 0x62
 8005f92:	d80a      	bhi.n	8005faa <_printf_i+0x32>
 8005f94:	2f00      	cmp	r7, #0
 8005f96:	f000 80d2 	beq.w	800613e <_printf_i+0x1c6>
 8005f9a:	2f58      	cmp	r7, #88	@ 0x58
 8005f9c:	f000 80b9 	beq.w	8006112 <_printf_i+0x19a>
 8005fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fa8:	e03a      	b.n	8006020 <_printf_i+0xa8>
 8005faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fae:	2b15      	cmp	r3, #21
 8005fb0:	d8f6      	bhi.n	8005fa0 <_printf_i+0x28>
 8005fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8005fb8 <_printf_i+0x40>)
 8005fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb8:	08006011 	.word	0x08006011
 8005fbc:	08006025 	.word	0x08006025
 8005fc0:	08005fa1 	.word	0x08005fa1
 8005fc4:	08005fa1 	.word	0x08005fa1
 8005fc8:	08005fa1 	.word	0x08005fa1
 8005fcc:	08005fa1 	.word	0x08005fa1
 8005fd0:	08006025 	.word	0x08006025
 8005fd4:	08005fa1 	.word	0x08005fa1
 8005fd8:	08005fa1 	.word	0x08005fa1
 8005fdc:	08005fa1 	.word	0x08005fa1
 8005fe0:	08005fa1 	.word	0x08005fa1
 8005fe4:	08006125 	.word	0x08006125
 8005fe8:	0800604f 	.word	0x0800604f
 8005fec:	080060df 	.word	0x080060df
 8005ff0:	08005fa1 	.word	0x08005fa1
 8005ff4:	08005fa1 	.word	0x08005fa1
 8005ff8:	08006147 	.word	0x08006147
 8005ffc:	08005fa1 	.word	0x08005fa1
 8006000:	0800604f 	.word	0x0800604f
 8006004:	08005fa1 	.word	0x08005fa1
 8006008:	08005fa1 	.word	0x08005fa1
 800600c:	080060e7 	.word	0x080060e7
 8006010:	6833      	ldr	r3, [r6, #0]
 8006012:	1d1a      	adds	r2, r3, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6032      	str	r2, [r6, #0]
 8006018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800601c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006020:	2301      	movs	r3, #1
 8006022:	e09d      	b.n	8006160 <_printf_i+0x1e8>
 8006024:	6833      	ldr	r3, [r6, #0]
 8006026:	6820      	ldr	r0, [r4, #0]
 8006028:	1d19      	adds	r1, r3, #4
 800602a:	6031      	str	r1, [r6, #0]
 800602c:	0606      	lsls	r6, r0, #24
 800602e:	d501      	bpl.n	8006034 <_printf_i+0xbc>
 8006030:	681d      	ldr	r5, [r3, #0]
 8006032:	e003      	b.n	800603c <_printf_i+0xc4>
 8006034:	0645      	lsls	r5, r0, #25
 8006036:	d5fb      	bpl.n	8006030 <_printf_i+0xb8>
 8006038:	f9b3 5000 	ldrsh.w	r5, [r3]
 800603c:	2d00      	cmp	r5, #0
 800603e:	da03      	bge.n	8006048 <_printf_i+0xd0>
 8006040:	232d      	movs	r3, #45	@ 0x2d
 8006042:	426d      	negs	r5, r5
 8006044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006048:	4859      	ldr	r0, [pc, #356]	@ (80061b0 <_printf_i+0x238>)
 800604a:	230a      	movs	r3, #10
 800604c:	e011      	b.n	8006072 <_printf_i+0xfa>
 800604e:	6821      	ldr	r1, [r4, #0]
 8006050:	6833      	ldr	r3, [r6, #0]
 8006052:	0608      	lsls	r0, r1, #24
 8006054:	f853 5b04 	ldr.w	r5, [r3], #4
 8006058:	d402      	bmi.n	8006060 <_printf_i+0xe8>
 800605a:	0649      	lsls	r1, r1, #25
 800605c:	bf48      	it	mi
 800605e:	b2ad      	uxthmi	r5, r5
 8006060:	2f6f      	cmp	r7, #111	@ 0x6f
 8006062:	4853      	ldr	r0, [pc, #332]	@ (80061b0 <_printf_i+0x238>)
 8006064:	6033      	str	r3, [r6, #0]
 8006066:	bf14      	ite	ne
 8006068:	230a      	movne	r3, #10
 800606a:	2308      	moveq	r3, #8
 800606c:	2100      	movs	r1, #0
 800606e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006072:	6866      	ldr	r6, [r4, #4]
 8006074:	60a6      	str	r6, [r4, #8]
 8006076:	2e00      	cmp	r6, #0
 8006078:	bfa2      	ittt	ge
 800607a:	6821      	ldrge	r1, [r4, #0]
 800607c:	f021 0104 	bicge.w	r1, r1, #4
 8006080:	6021      	strge	r1, [r4, #0]
 8006082:	b90d      	cbnz	r5, 8006088 <_printf_i+0x110>
 8006084:	2e00      	cmp	r6, #0
 8006086:	d04b      	beq.n	8006120 <_printf_i+0x1a8>
 8006088:	4616      	mov	r6, r2
 800608a:	fbb5 f1f3 	udiv	r1, r5, r3
 800608e:	fb03 5711 	mls	r7, r3, r1, r5
 8006092:	5dc7      	ldrb	r7, [r0, r7]
 8006094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006098:	462f      	mov	r7, r5
 800609a:	42bb      	cmp	r3, r7
 800609c:	460d      	mov	r5, r1
 800609e:	d9f4      	bls.n	800608a <_printf_i+0x112>
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d10b      	bne.n	80060bc <_printf_i+0x144>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	07df      	lsls	r7, r3, #31
 80060a8:	d508      	bpl.n	80060bc <_printf_i+0x144>
 80060aa:	6923      	ldr	r3, [r4, #16]
 80060ac:	6861      	ldr	r1, [r4, #4]
 80060ae:	4299      	cmp	r1, r3
 80060b0:	bfde      	ittt	le
 80060b2:	2330      	movle	r3, #48	@ 0x30
 80060b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80060bc:	1b92      	subs	r2, r2, r6
 80060be:	6122      	str	r2, [r4, #16]
 80060c0:	f8cd a000 	str.w	sl, [sp]
 80060c4:	464b      	mov	r3, r9
 80060c6:	aa03      	add	r2, sp, #12
 80060c8:	4621      	mov	r1, r4
 80060ca:	4640      	mov	r0, r8
 80060cc:	f7ff fee6 	bl	8005e9c <_printf_common>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d14a      	bne.n	800616a <_printf_i+0x1f2>
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060d8:	b004      	add	sp, #16
 80060da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	f043 0320 	orr.w	r3, r3, #32
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	4833      	ldr	r0, [pc, #204]	@ (80061b4 <_printf_i+0x23c>)
 80060e8:	2778      	movs	r7, #120	@ 0x78
 80060ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6831      	ldr	r1, [r6, #0]
 80060f2:	061f      	lsls	r7, r3, #24
 80060f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80060f8:	d402      	bmi.n	8006100 <_printf_i+0x188>
 80060fa:	065f      	lsls	r7, r3, #25
 80060fc:	bf48      	it	mi
 80060fe:	b2ad      	uxthmi	r5, r5
 8006100:	6031      	str	r1, [r6, #0]
 8006102:	07d9      	lsls	r1, r3, #31
 8006104:	bf44      	itt	mi
 8006106:	f043 0320 	orrmi.w	r3, r3, #32
 800610a:	6023      	strmi	r3, [r4, #0]
 800610c:	b11d      	cbz	r5, 8006116 <_printf_i+0x19e>
 800610e:	2310      	movs	r3, #16
 8006110:	e7ac      	b.n	800606c <_printf_i+0xf4>
 8006112:	4827      	ldr	r0, [pc, #156]	@ (80061b0 <_printf_i+0x238>)
 8006114:	e7e9      	b.n	80060ea <_printf_i+0x172>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	f023 0320 	bic.w	r3, r3, #32
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	e7f6      	b.n	800610e <_printf_i+0x196>
 8006120:	4616      	mov	r6, r2
 8006122:	e7bd      	b.n	80060a0 <_printf_i+0x128>
 8006124:	6833      	ldr	r3, [r6, #0]
 8006126:	6825      	ldr	r5, [r4, #0]
 8006128:	6961      	ldr	r1, [r4, #20]
 800612a:	1d18      	adds	r0, r3, #4
 800612c:	6030      	str	r0, [r6, #0]
 800612e:	062e      	lsls	r6, r5, #24
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	d501      	bpl.n	8006138 <_printf_i+0x1c0>
 8006134:	6019      	str	r1, [r3, #0]
 8006136:	e002      	b.n	800613e <_printf_i+0x1c6>
 8006138:	0668      	lsls	r0, r5, #25
 800613a:	d5fb      	bpl.n	8006134 <_printf_i+0x1bc>
 800613c:	8019      	strh	r1, [r3, #0]
 800613e:	2300      	movs	r3, #0
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	4616      	mov	r6, r2
 8006144:	e7bc      	b.n	80060c0 <_printf_i+0x148>
 8006146:	6833      	ldr	r3, [r6, #0]
 8006148:	1d1a      	adds	r2, r3, #4
 800614a:	6032      	str	r2, [r6, #0]
 800614c:	681e      	ldr	r6, [r3, #0]
 800614e:	6862      	ldr	r2, [r4, #4]
 8006150:	2100      	movs	r1, #0
 8006152:	4630      	mov	r0, r6
 8006154:	f7fa f84c 	bl	80001f0 <memchr>
 8006158:	b108      	cbz	r0, 800615e <_printf_i+0x1e6>
 800615a:	1b80      	subs	r0, r0, r6
 800615c:	6060      	str	r0, [r4, #4]
 800615e:	6863      	ldr	r3, [r4, #4]
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	2300      	movs	r3, #0
 8006164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006168:	e7aa      	b.n	80060c0 <_printf_i+0x148>
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	4632      	mov	r2, r6
 800616e:	4649      	mov	r1, r9
 8006170:	4640      	mov	r0, r8
 8006172:	47d0      	blx	sl
 8006174:	3001      	adds	r0, #1
 8006176:	d0ad      	beq.n	80060d4 <_printf_i+0x15c>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	079b      	lsls	r3, r3, #30
 800617c:	d413      	bmi.n	80061a6 <_printf_i+0x22e>
 800617e:	68e0      	ldr	r0, [r4, #12]
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	4298      	cmp	r0, r3
 8006184:	bfb8      	it	lt
 8006186:	4618      	movlt	r0, r3
 8006188:	e7a6      	b.n	80060d8 <_printf_i+0x160>
 800618a:	2301      	movs	r3, #1
 800618c:	4632      	mov	r2, r6
 800618e:	4649      	mov	r1, r9
 8006190:	4640      	mov	r0, r8
 8006192:	47d0      	blx	sl
 8006194:	3001      	adds	r0, #1
 8006196:	d09d      	beq.n	80060d4 <_printf_i+0x15c>
 8006198:	3501      	adds	r5, #1
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	9903      	ldr	r1, [sp, #12]
 800619e:	1a5b      	subs	r3, r3, r1
 80061a0:	42ab      	cmp	r3, r5
 80061a2:	dcf2      	bgt.n	800618a <_printf_i+0x212>
 80061a4:	e7eb      	b.n	800617e <_printf_i+0x206>
 80061a6:	2500      	movs	r5, #0
 80061a8:	f104 0619 	add.w	r6, r4, #25
 80061ac:	e7f5      	b.n	800619a <_printf_i+0x222>
 80061ae:	bf00      	nop
 80061b0:	0800ad4c 	.word	0x0800ad4c
 80061b4:	0800ad5d 	.word	0x0800ad5d

080061b8 <_scanf_float>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	b087      	sub	sp, #28
 80061be:	4617      	mov	r7, r2
 80061c0:	9303      	str	r3, [sp, #12]
 80061c2:	688b      	ldr	r3, [r1, #8]
 80061c4:	1e5a      	subs	r2, r3, #1
 80061c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80061ca:	bf81      	itttt	hi
 80061cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80061d0:	eb03 0b05 	addhi.w	fp, r3, r5
 80061d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80061d8:	608b      	strhi	r3, [r1, #8]
 80061da:	680b      	ldr	r3, [r1, #0]
 80061dc:	460a      	mov	r2, r1
 80061de:	f04f 0500 	mov.w	r5, #0
 80061e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80061e6:	f842 3b1c 	str.w	r3, [r2], #28
 80061ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80061ee:	4680      	mov	r8, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	bf98      	it	ls
 80061f4:	f04f 0b00 	movls.w	fp, #0
 80061f8:	9201      	str	r2, [sp, #4]
 80061fa:	4616      	mov	r6, r2
 80061fc:	46aa      	mov	sl, r5
 80061fe:	46a9      	mov	r9, r5
 8006200:	9502      	str	r5, [sp, #8]
 8006202:	68a2      	ldr	r2, [r4, #8]
 8006204:	b152      	cbz	r2, 800621c <_scanf_float+0x64>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b4e      	cmp	r3, #78	@ 0x4e
 800620c:	d864      	bhi.n	80062d8 <_scanf_float+0x120>
 800620e:	2b40      	cmp	r3, #64	@ 0x40
 8006210:	d83c      	bhi.n	800628c <_scanf_float+0xd4>
 8006212:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006216:	b2c8      	uxtb	r0, r1
 8006218:	280e      	cmp	r0, #14
 800621a:	d93a      	bls.n	8006292 <_scanf_float+0xda>
 800621c:	f1b9 0f00 	cmp.w	r9, #0
 8006220:	d003      	beq.n	800622a <_scanf_float+0x72>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800622e:	f1ba 0f01 	cmp.w	sl, #1
 8006232:	f200 8117 	bhi.w	8006464 <_scanf_float+0x2ac>
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	429e      	cmp	r6, r3
 800623a:	f200 8108 	bhi.w	800644e <_scanf_float+0x296>
 800623e:	2001      	movs	r0, #1
 8006240:	b007      	add	sp, #28
 8006242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006246:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800624a:	2a0d      	cmp	r2, #13
 800624c:	d8e6      	bhi.n	800621c <_scanf_float+0x64>
 800624e:	a101      	add	r1, pc, #4	@ (adr r1, 8006254 <_scanf_float+0x9c>)
 8006250:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006254:	0800639b 	.word	0x0800639b
 8006258:	0800621d 	.word	0x0800621d
 800625c:	0800621d 	.word	0x0800621d
 8006260:	0800621d 	.word	0x0800621d
 8006264:	080063fb 	.word	0x080063fb
 8006268:	080063d3 	.word	0x080063d3
 800626c:	0800621d 	.word	0x0800621d
 8006270:	0800621d 	.word	0x0800621d
 8006274:	080063a9 	.word	0x080063a9
 8006278:	0800621d 	.word	0x0800621d
 800627c:	0800621d 	.word	0x0800621d
 8006280:	0800621d 	.word	0x0800621d
 8006284:	0800621d 	.word	0x0800621d
 8006288:	08006361 	.word	0x08006361
 800628c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006290:	e7db      	b.n	800624a <_scanf_float+0x92>
 8006292:	290e      	cmp	r1, #14
 8006294:	d8c2      	bhi.n	800621c <_scanf_float+0x64>
 8006296:	a001      	add	r0, pc, #4	@ (adr r0, 800629c <_scanf_float+0xe4>)
 8006298:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800629c:	08006351 	.word	0x08006351
 80062a0:	0800621d 	.word	0x0800621d
 80062a4:	08006351 	.word	0x08006351
 80062a8:	080063e7 	.word	0x080063e7
 80062ac:	0800621d 	.word	0x0800621d
 80062b0:	080062f9 	.word	0x080062f9
 80062b4:	08006337 	.word	0x08006337
 80062b8:	08006337 	.word	0x08006337
 80062bc:	08006337 	.word	0x08006337
 80062c0:	08006337 	.word	0x08006337
 80062c4:	08006337 	.word	0x08006337
 80062c8:	08006337 	.word	0x08006337
 80062cc:	08006337 	.word	0x08006337
 80062d0:	08006337 	.word	0x08006337
 80062d4:	08006337 	.word	0x08006337
 80062d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80062da:	d809      	bhi.n	80062f0 <_scanf_float+0x138>
 80062dc:	2b60      	cmp	r3, #96	@ 0x60
 80062de:	d8b2      	bhi.n	8006246 <_scanf_float+0x8e>
 80062e0:	2b54      	cmp	r3, #84	@ 0x54
 80062e2:	d07b      	beq.n	80063dc <_scanf_float+0x224>
 80062e4:	2b59      	cmp	r3, #89	@ 0x59
 80062e6:	d199      	bne.n	800621c <_scanf_float+0x64>
 80062e8:	2d07      	cmp	r5, #7
 80062ea:	d197      	bne.n	800621c <_scanf_float+0x64>
 80062ec:	2508      	movs	r5, #8
 80062ee:	e02c      	b.n	800634a <_scanf_float+0x192>
 80062f0:	2b74      	cmp	r3, #116	@ 0x74
 80062f2:	d073      	beq.n	80063dc <_scanf_float+0x224>
 80062f4:	2b79      	cmp	r3, #121	@ 0x79
 80062f6:	e7f6      	b.n	80062e6 <_scanf_float+0x12e>
 80062f8:	6821      	ldr	r1, [r4, #0]
 80062fa:	05c8      	lsls	r0, r1, #23
 80062fc:	d51b      	bpl.n	8006336 <_scanf_float+0x17e>
 80062fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006302:	6021      	str	r1, [r4, #0]
 8006304:	f109 0901 	add.w	r9, r9, #1
 8006308:	f1bb 0f00 	cmp.w	fp, #0
 800630c:	d003      	beq.n	8006316 <_scanf_float+0x15e>
 800630e:	3201      	adds	r2, #1
 8006310:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006314:	60a2      	str	r2, [r4, #8]
 8006316:	68a3      	ldr	r3, [r4, #8]
 8006318:	3b01      	subs	r3, #1
 800631a:	60a3      	str	r3, [r4, #8]
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	3301      	adds	r3, #1
 8006320:	6123      	str	r3, [r4, #16]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3b01      	subs	r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	607b      	str	r3, [r7, #4]
 800632a:	f340 8087 	ble.w	800643c <_scanf_float+0x284>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	3301      	adds	r3, #1
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	e765      	b.n	8006202 <_scanf_float+0x4a>
 8006336:	eb1a 0105 	adds.w	r1, sl, r5
 800633a:	f47f af6f 	bne.w	800621c <_scanf_float+0x64>
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006344:	6022      	str	r2, [r4, #0]
 8006346:	460d      	mov	r5, r1
 8006348:	468a      	mov	sl, r1
 800634a:	f806 3b01 	strb.w	r3, [r6], #1
 800634e:	e7e2      	b.n	8006316 <_scanf_float+0x15e>
 8006350:	6822      	ldr	r2, [r4, #0]
 8006352:	0610      	lsls	r0, r2, #24
 8006354:	f57f af62 	bpl.w	800621c <_scanf_float+0x64>
 8006358:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	e7f4      	b.n	800634a <_scanf_float+0x192>
 8006360:	f1ba 0f00 	cmp.w	sl, #0
 8006364:	d10e      	bne.n	8006384 <_scanf_float+0x1cc>
 8006366:	f1b9 0f00 	cmp.w	r9, #0
 800636a:	d10e      	bne.n	800638a <_scanf_float+0x1d2>
 800636c:	6822      	ldr	r2, [r4, #0]
 800636e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006372:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006376:	d108      	bne.n	800638a <_scanf_float+0x1d2>
 8006378:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800637c:	6022      	str	r2, [r4, #0]
 800637e:	f04f 0a01 	mov.w	sl, #1
 8006382:	e7e2      	b.n	800634a <_scanf_float+0x192>
 8006384:	f1ba 0f02 	cmp.w	sl, #2
 8006388:	d055      	beq.n	8006436 <_scanf_float+0x27e>
 800638a:	2d01      	cmp	r5, #1
 800638c:	d002      	beq.n	8006394 <_scanf_float+0x1dc>
 800638e:	2d04      	cmp	r5, #4
 8006390:	f47f af44 	bne.w	800621c <_scanf_float+0x64>
 8006394:	3501      	adds	r5, #1
 8006396:	b2ed      	uxtb	r5, r5
 8006398:	e7d7      	b.n	800634a <_scanf_float+0x192>
 800639a:	f1ba 0f01 	cmp.w	sl, #1
 800639e:	f47f af3d 	bne.w	800621c <_scanf_float+0x64>
 80063a2:	f04f 0a02 	mov.w	sl, #2
 80063a6:	e7d0      	b.n	800634a <_scanf_float+0x192>
 80063a8:	b97d      	cbnz	r5, 80063ca <_scanf_float+0x212>
 80063aa:	f1b9 0f00 	cmp.w	r9, #0
 80063ae:	f47f af38 	bne.w	8006222 <_scanf_float+0x6a>
 80063b2:	6822      	ldr	r2, [r4, #0]
 80063b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80063b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80063bc:	f040 8108 	bne.w	80065d0 <_scanf_float+0x418>
 80063c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80063c4:	6022      	str	r2, [r4, #0]
 80063c6:	2501      	movs	r5, #1
 80063c8:	e7bf      	b.n	800634a <_scanf_float+0x192>
 80063ca:	2d03      	cmp	r5, #3
 80063cc:	d0e2      	beq.n	8006394 <_scanf_float+0x1dc>
 80063ce:	2d05      	cmp	r5, #5
 80063d0:	e7de      	b.n	8006390 <_scanf_float+0x1d8>
 80063d2:	2d02      	cmp	r5, #2
 80063d4:	f47f af22 	bne.w	800621c <_scanf_float+0x64>
 80063d8:	2503      	movs	r5, #3
 80063da:	e7b6      	b.n	800634a <_scanf_float+0x192>
 80063dc:	2d06      	cmp	r5, #6
 80063de:	f47f af1d 	bne.w	800621c <_scanf_float+0x64>
 80063e2:	2507      	movs	r5, #7
 80063e4:	e7b1      	b.n	800634a <_scanf_float+0x192>
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	0591      	lsls	r1, r2, #22
 80063ea:	f57f af17 	bpl.w	800621c <_scanf_float+0x64>
 80063ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80063f2:	6022      	str	r2, [r4, #0]
 80063f4:	f8cd 9008 	str.w	r9, [sp, #8]
 80063f8:	e7a7      	b.n	800634a <_scanf_float+0x192>
 80063fa:	6822      	ldr	r2, [r4, #0]
 80063fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006400:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006404:	d006      	beq.n	8006414 <_scanf_float+0x25c>
 8006406:	0550      	lsls	r0, r2, #21
 8006408:	f57f af08 	bpl.w	800621c <_scanf_float+0x64>
 800640c:	f1b9 0f00 	cmp.w	r9, #0
 8006410:	f000 80de 	beq.w	80065d0 <_scanf_float+0x418>
 8006414:	0591      	lsls	r1, r2, #22
 8006416:	bf58      	it	pl
 8006418:	9902      	ldrpl	r1, [sp, #8]
 800641a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800641e:	bf58      	it	pl
 8006420:	eba9 0101 	subpl.w	r1, r9, r1
 8006424:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006428:	bf58      	it	pl
 800642a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800642e:	6022      	str	r2, [r4, #0]
 8006430:	f04f 0900 	mov.w	r9, #0
 8006434:	e789      	b.n	800634a <_scanf_float+0x192>
 8006436:	f04f 0a03 	mov.w	sl, #3
 800643a:	e786      	b.n	800634a <_scanf_float+0x192>
 800643c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006440:	4639      	mov	r1, r7
 8006442:	4640      	mov	r0, r8
 8006444:	4798      	blx	r3
 8006446:	2800      	cmp	r0, #0
 8006448:	f43f aedb 	beq.w	8006202 <_scanf_float+0x4a>
 800644c:	e6e6      	b.n	800621c <_scanf_float+0x64>
 800644e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006452:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006456:	463a      	mov	r2, r7
 8006458:	4640      	mov	r0, r8
 800645a:	4798      	blx	r3
 800645c:	6923      	ldr	r3, [r4, #16]
 800645e:	3b01      	subs	r3, #1
 8006460:	6123      	str	r3, [r4, #16]
 8006462:	e6e8      	b.n	8006236 <_scanf_float+0x7e>
 8006464:	1e6b      	subs	r3, r5, #1
 8006466:	2b06      	cmp	r3, #6
 8006468:	d824      	bhi.n	80064b4 <_scanf_float+0x2fc>
 800646a:	2d02      	cmp	r5, #2
 800646c:	d836      	bhi.n	80064dc <_scanf_float+0x324>
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	429e      	cmp	r6, r3
 8006472:	f67f aee4 	bls.w	800623e <_scanf_float+0x86>
 8006476:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800647a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800647e:	463a      	mov	r2, r7
 8006480:	4640      	mov	r0, r8
 8006482:	4798      	blx	r3
 8006484:	6923      	ldr	r3, [r4, #16]
 8006486:	3b01      	subs	r3, #1
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	e7f0      	b.n	800646e <_scanf_float+0x2b6>
 800648c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006490:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006494:	463a      	mov	r2, r7
 8006496:	4640      	mov	r0, r8
 8006498:	4798      	blx	r3
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	3b01      	subs	r3, #1
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80064a4:	fa5f fa8a 	uxtb.w	sl, sl
 80064a8:	f1ba 0f02 	cmp.w	sl, #2
 80064ac:	d1ee      	bne.n	800648c <_scanf_float+0x2d4>
 80064ae:	3d03      	subs	r5, #3
 80064b0:	b2ed      	uxtb	r5, r5
 80064b2:	1b76      	subs	r6, r6, r5
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	05da      	lsls	r2, r3, #23
 80064b8:	d530      	bpl.n	800651c <_scanf_float+0x364>
 80064ba:	055b      	lsls	r3, r3, #21
 80064bc:	d511      	bpl.n	80064e2 <_scanf_float+0x32a>
 80064be:	9b01      	ldr	r3, [sp, #4]
 80064c0:	429e      	cmp	r6, r3
 80064c2:	f67f aebc 	bls.w	800623e <_scanf_float+0x86>
 80064c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80064ce:	463a      	mov	r2, r7
 80064d0:	4640      	mov	r0, r8
 80064d2:	4798      	blx	r3
 80064d4:	6923      	ldr	r3, [r4, #16]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	e7f0      	b.n	80064be <_scanf_float+0x306>
 80064dc:	46aa      	mov	sl, r5
 80064de:	46b3      	mov	fp, r6
 80064e0:	e7de      	b.n	80064a0 <_scanf_float+0x2e8>
 80064e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80064e6:	6923      	ldr	r3, [r4, #16]
 80064e8:	2965      	cmp	r1, #101	@ 0x65
 80064ea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80064ee:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80064f2:	6123      	str	r3, [r4, #16]
 80064f4:	d00c      	beq.n	8006510 <_scanf_float+0x358>
 80064f6:	2945      	cmp	r1, #69	@ 0x45
 80064f8:	d00a      	beq.n	8006510 <_scanf_float+0x358>
 80064fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064fe:	463a      	mov	r2, r7
 8006500:	4640      	mov	r0, r8
 8006502:	4798      	blx	r3
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800650a:	3b01      	subs	r3, #1
 800650c:	1eb5      	subs	r5, r6, #2
 800650e:	6123      	str	r3, [r4, #16]
 8006510:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006514:	463a      	mov	r2, r7
 8006516:	4640      	mov	r0, r8
 8006518:	4798      	blx	r3
 800651a:	462e      	mov	r6, r5
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	f012 0210 	ands.w	r2, r2, #16
 8006522:	d001      	beq.n	8006528 <_scanf_float+0x370>
 8006524:	2000      	movs	r0, #0
 8006526:	e68b      	b.n	8006240 <_scanf_float+0x88>
 8006528:	7032      	strb	r2, [r6, #0]
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006534:	d11c      	bne.n	8006570 <_scanf_float+0x3b8>
 8006536:	9b02      	ldr	r3, [sp, #8]
 8006538:	454b      	cmp	r3, r9
 800653a:	eba3 0209 	sub.w	r2, r3, r9
 800653e:	d123      	bne.n	8006588 <_scanf_float+0x3d0>
 8006540:	9901      	ldr	r1, [sp, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	4640      	mov	r0, r8
 8006546:	f002 fdc3 	bl	80090d0 <_strtod_r>
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	6821      	ldr	r1, [r4, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f011 0f02 	tst.w	r1, #2
 8006554:	ec57 6b10 	vmov	r6, r7, d0
 8006558:	f103 0204 	add.w	r2, r3, #4
 800655c:	d01f      	beq.n	800659e <_scanf_float+0x3e6>
 800655e:	9903      	ldr	r1, [sp, #12]
 8006560:	600a      	str	r2, [r1, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	e9c3 6700 	strd	r6, r7, [r3]
 8006568:	68e3      	ldr	r3, [r4, #12]
 800656a:	3301      	adds	r3, #1
 800656c:	60e3      	str	r3, [r4, #12]
 800656e:	e7d9      	b.n	8006524 <_scanf_float+0x36c>
 8006570:	9b04      	ldr	r3, [sp, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0e4      	beq.n	8006540 <_scanf_float+0x388>
 8006576:	9905      	ldr	r1, [sp, #20]
 8006578:	230a      	movs	r3, #10
 800657a:	3101      	adds	r1, #1
 800657c:	4640      	mov	r0, r8
 800657e:	f002 fe27 	bl	80091d0 <_strtol_r>
 8006582:	9b04      	ldr	r3, [sp, #16]
 8006584:	9e05      	ldr	r6, [sp, #20]
 8006586:	1ac2      	subs	r2, r0, r3
 8006588:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800658c:	429e      	cmp	r6, r3
 800658e:	bf28      	it	cs
 8006590:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006594:	4910      	ldr	r1, [pc, #64]	@ (80065d8 <_scanf_float+0x420>)
 8006596:	4630      	mov	r0, r6
 8006598:	f000 fa1a 	bl	80069d0 <siprintf>
 800659c:	e7d0      	b.n	8006540 <_scanf_float+0x388>
 800659e:	f011 0f04 	tst.w	r1, #4
 80065a2:	9903      	ldr	r1, [sp, #12]
 80065a4:	600a      	str	r2, [r1, #0]
 80065a6:	d1dc      	bne.n	8006562 <_scanf_float+0x3aa>
 80065a8:	681d      	ldr	r5, [r3, #0]
 80065aa:	4632      	mov	r2, r6
 80065ac:	463b      	mov	r3, r7
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7fa facb 	bl	8000b4c <__aeabi_dcmpun>
 80065b6:	b128      	cbz	r0, 80065c4 <_scanf_float+0x40c>
 80065b8:	4808      	ldr	r0, [pc, #32]	@ (80065dc <_scanf_float+0x424>)
 80065ba:	f000 fb81 	bl	8006cc0 <nanf>
 80065be:	ed85 0a00 	vstr	s0, [r5]
 80065c2:	e7d1      	b.n	8006568 <_scanf_float+0x3b0>
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7fa fb1e 	bl	8000c08 <__aeabi_d2f>
 80065cc:	6028      	str	r0, [r5, #0]
 80065ce:	e7cb      	b.n	8006568 <_scanf_float+0x3b0>
 80065d0:	f04f 0900 	mov.w	r9, #0
 80065d4:	e629      	b.n	800622a <_scanf_float+0x72>
 80065d6:	bf00      	nop
 80065d8:	0800ad6e 	.word	0x0800ad6e
 80065dc:	0800b120 	.word	0x0800b120

080065e0 <std>:
 80065e0:	2300      	movs	r3, #0
 80065e2:	b510      	push	{r4, lr}
 80065e4:	4604      	mov	r4, r0
 80065e6:	e9c0 3300 	strd	r3, r3, [r0]
 80065ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065ee:	6083      	str	r3, [r0, #8]
 80065f0:	8181      	strh	r1, [r0, #12]
 80065f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80065f4:	81c2      	strh	r2, [r0, #14]
 80065f6:	6183      	str	r3, [r0, #24]
 80065f8:	4619      	mov	r1, r3
 80065fa:	2208      	movs	r2, #8
 80065fc:	305c      	adds	r0, #92	@ 0x5c
 80065fe:	f000 fadf 	bl	8006bc0 <memset>
 8006602:	4b0d      	ldr	r3, [pc, #52]	@ (8006638 <std+0x58>)
 8006604:	6263      	str	r3, [r4, #36]	@ 0x24
 8006606:	4b0d      	ldr	r3, [pc, #52]	@ (800663c <std+0x5c>)
 8006608:	62a3      	str	r3, [r4, #40]	@ 0x28
 800660a:	4b0d      	ldr	r3, [pc, #52]	@ (8006640 <std+0x60>)
 800660c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800660e:	4b0d      	ldr	r3, [pc, #52]	@ (8006644 <std+0x64>)
 8006610:	6323      	str	r3, [r4, #48]	@ 0x30
 8006612:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <std+0x68>)
 8006614:	6224      	str	r4, [r4, #32]
 8006616:	429c      	cmp	r4, r3
 8006618:	d006      	beq.n	8006628 <std+0x48>
 800661a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800661e:	4294      	cmp	r4, r2
 8006620:	d002      	beq.n	8006628 <std+0x48>
 8006622:	33d0      	adds	r3, #208	@ 0xd0
 8006624:	429c      	cmp	r4, r3
 8006626:	d105      	bne.n	8006634 <std+0x54>
 8006628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800662c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006630:	f000 bb42 	b.w	8006cb8 <__retarget_lock_init_recursive>
 8006634:	bd10      	pop	{r4, pc}
 8006636:	bf00      	nop
 8006638:	08006a11 	.word	0x08006a11
 800663c:	08006a33 	.word	0x08006a33
 8006640:	08006a6b 	.word	0x08006a6b
 8006644:	08006a8f 	.word	0x08006a8f
 8006648:	20000884 	.word	0x20000884

0800664c <stdio_exit_handler>:
 800664c:	4a02      	ldr	r2, [pc, #8]	@ (8006658 <stdio_exit_handler+0xc>)
 800664e:	4903      	ldr	r1, [pc, #12]	@ (800665c <stdio_exit_handler+0x10>)
 8006650:	4803      	ldr	r0, [pc, #12]	@ (8006660 <stdio_exit_handler+0x14>)
 8006652:	f000 b869 	b.w	8006728 <_fwalk_sglue>
 8006656:	bf00      	nop
 8006658:	2000000c 	.word	0x2000000c
 800665c:	08009e0d 	.word	0x08009e0d
 8006660:	2000001c 	.word	0x2000001c

08006664 <cleanup_stdio>:
 8006664:	6841      	ldr	r1, [r0, #4]
 8006666:	4b0c      	ldr	r3, [pc, #48]	@ (8006698 <cleanup_stdio+0x34>)
 8006668:	4299      	cmp	r1, r3
 800666a:	b510      	push	{r4, lr}
 800666c:	4604      	mov	r4, r0
 800666e:	d001      	beq.n	8006674 <cleanup_stdio+0x10>
 8006670:	f003 fbcc 	bl	8009e0c <_fflush_r>
 8006674:	68a1      	ldr	r1, [r4, #8]
 8006676:	4b09      	ldr	r3, [pc, #36]	@ (800669c <cleanup_stdio+0x38>)
 8006678:	4299      	cmp	r1, r3
 800667a:	d002      	beq.n	8006682 <cleanup_stdio+0x1e>
 800667c:	4620      	mov	r0, r4
 800667e:	f003 fbc5 	bl	8009e0c <_fflush_r>
 8006682:	68e1      	ldr	r1, [r4, #12]
 8006684:	4b06      	ldr	r3, [pc, #24]	@ (80066a0 <cleanup_stdio+0x3c>)
 8006686:	4299      	cmp	r1, r3
 8006688:	d004      	beq.n	8006694 <cleanup_stdio+0x30>
 800668a:	4620      	mov	r0, r4
 800668c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006690:	f003 bbbc 	b.w	8009e0c <_fflush_r>
 8006694:	bd10      	pop	{r4, pc}
 8006696:	bf00      	nop
 8006698:	20000884 	.word	0x20000884
 800669c:	200008ec 	.word	0x200008ec
 80066a0:	20000954 	.word	0x20000954

080066a4 <global_stdio_init.part.0>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	4b0b      	ldr	r3, [pc, #44]	@ (80066d4 <global_stdio_init.part.0+0x30>)
 80066a8:	4c0b      	ldr	r4, [pc, #44]	@ (80066d8 <global_stdio_init.part.0+0x34>)
 80066aa:	4a0c      	ldr	r2, [pc, #48]	@ (80066dc <global_stdio_init.part.0+0x38>)
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	4620      	mov	r0, r4
 80066b0:	2200      	movs	r2, #0
 80066b2:	2104      	movs	r1, #4
 80066b4:	f7ff ff94 	bl	80065e0 <std>
 80066b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066bc:	2201      	movs	r2, #1
 80066be:	2109      	movs	r1, #9
 80066c0:	f7ff ff8e 	bl	80065e0 <std>
 80066c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066c8:	2202      	movs	r2, #2
 80066ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ce:	2112      	movs	r1, #18
 80066d0:	f7ff bf86 	b.w	80065e0 <std>
 80066d4:	200009bc 	.word	0x200009bc
 80066d8:	20000884 	.word	0x20000884
 80066dc:	0800664d 	.word	0x0800664d

080066e0 <__sfp_lock_acquire>:
 80066e0:	4801      	ldr	r0, [pc, #4]	@ (80066e8 <__sfp_lock_acquire+0x8>)
 80066e2:	f000 baea 	b.w	8006cba <__retarget_lock_acquire_recursive>
 80066e6:	bf00      	nop
 80066e8:	200009c5 	.word	0x200009c5

080066ec <__sfp_lock_release>:
 80066ec:	4801      	ldr	r0, [pc, #4]	@ (80066f4 <__sfp_lock_release+0x8>)
 80066ee:	f000 bae5 	b.w	8006cbc <__retarget_lock_release_recursive>
 80066f2:	bf00      	nop
 80066f4:	200009c5 	.word	0x200009c5

080066f8 <__sinit>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	4604      	mov	r4, r0
 80066fc:	f7ff fff0 	bl	80066e0 <__sfp_lock_acquire>
 8006700:	6a23      	ldr	r3, [r4, #32]
 8006702:	b11b      	cbz	r3, 800670c <__sinit+0x14>
 8006704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006708:	f7ff bff0 	b.w	80066ec <__sfp_lock_release>
 800670c:	4b04      	ldr	r3, [pc, #16]	@ (8006720 <__sinit+0x28>)
 800670e:	6223      	str	r3, [r4, #32]
 8006710:	4b04      	ldr	r3, [pc, #16]	@ (8006724 <__sinit+0x2c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1f5      	bne.n	8006704 <__sinit+0xc>
 8006718:	f7ff ffc4 	bl	80066a4 <global_stdio_init.part.0>
 800671c:	e7f2      	b.n	8006704 <__sinit+0xc>
 800671e:	bf00      	nop
 8006720:	08006665 	.word	0x08006665
 8006724:	200009bc 	.word	0x200009bc

08006728 <_fwalk_sglue>:
 8006728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800672c:	4607      	mov	r7, r0
 800672e:	4688      	mov	r8, r1
 8006730:	4614      	mov	r4, r2
 8006732:	2600      	movs	r6, #0
 8006734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006738:	f1b9 0901 	subs.w	r9, r9, #1
 800673c:	d505      	bpl.n	800674a <_fwalk_sglue+0x22>
 800673e:	6824      	ldr	r4, [r4, #0]
 8006740:	2c00      	cmp	r4, #0
 8006742:	d1f7      	bne.n	8006734 <_fwalk_sglue+0xc>
 8006744:	4630      	mov	r0, r6
 8006746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800674a:	89ab      	ldrh	r3, [r5, #12]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d907      	bls.n	8006760 <_fwalk_sglue+0x38>
 8006750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006754:	3301      	adds	r3, #1
 8006756:	d003      	beq.n	8006760 <_fwalk_sglue+0x38>
 8006758:	4629      	mov	r1, r5
 800675a:	4638      	mov	r0, r7
 800675c:	47c0      	blx	r8
 800675e:	4306      	orrs	r6, r0
 8006760:	3568      	adds	r5, #104	@ 0x68
 8006762:	e7e9      	b.n	8006738 <_fwalk_sglue+0x10>

08006764 <iprintf>:
 8006764:	b40f      	push	{r0, r1, r2, r3}
 8006766:	b507      	push	{r0, r1, r2, lr}
 8006768:	4906      	ldr	r1, [pc, #24]	@ (8006784 <iprintf+0x20>)
 800676a:	ab04      	add	r3, sp, #16
 800676c:	6808      	ldr	r0, [r1, #0]
 800676e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006772:	6881      	ldr	r1, [r0, #8]
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	f002 feaf 	bl	80094d8 <_vfiprintf_r>
 800677a:	b003      	add	sp, #12
 800677c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006780:	b004      	add	sp, #16
 8006782:	4770      	bx	lr
 8006784:	20000018 	.word	0x20000018

08006788 <_puts_r>:
 8006788:	6a03      	ldr	r3, [r0, #32]
 800678a:	b570      	push	{r4, r5, r6, lr}
 800678c:	6884      	ldr	r4, [r0, #8]
 800678e:	4605      	mov	r5, r0
 8006790:	460e      	mov	r6, r1
 8006792:	b90b      	cbnz	r3, 8006798 <_puts_r+0x10>
 8006794:	f7ff ffb0 	bl	80066f8 <__sinit>
 8006798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800679a:	07db      	lsls	r3, r3, #31
 800679c:	d405      	bmi.n	80067aa <_puts_r+0x22>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	0598      	lsls	r0, r3, #22
 80067a2:	d402      	bmi.n	80067aa <_puts_r+0x22>
 80067a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067a6:	f000 fa88 	bl	8006cba <__retarget_lock_acquire_recursive>
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	0719      	lsls	r1, r3, #28
 80067ae:	d502      	bpl.n	80067b6 <_puts_r+0x2e>
 80067b0:	6923      	ldr	r3, [r4, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d135      	bne.n	8006822 <_puts_r+0x9a>
 80067b6:	4621      	mov	r1, r4
 80067b8:	4628      	mov	r0, r5
 80067ba:	f000 f9ab 	bl	8006b14 <__swsetup_r>
 80067be:	b380      	cbz	r0, 8006822 <_puts_r+0x9a>
 80067c0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80067c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067c6:	07da      	lsls	r2, r3, #31
 80067c8:	d405      	bmi.n	80067d6 <_puts_r+0x4e>
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	059b      	lsls	r3, r3, #22
 80067ce:	d402      	bmi.n	80067d6 <_puts_r+0x4e>
 80067d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067d2:	f000 fa73 	bl	8006cbc <__retarget_lock_release_recursive>
 80067d6:	4628      	mov	r0, r5
 80067d8:	bd70      	pop	{r4, r5, r6, pc}
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da04      	bge.n	80067e8 <_puts_r+0x60>
 80067de:	69a2      	ldr	r2, [r4, #24]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	dc17      	bgt.n	8006814 <_puts_r+0x8c>
 80067e4:	290a      	cmp	r1, #10
 80067e6:	d015      	beq.n	8006814 <_puts_r+0x8c>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	6022      	str	r2, [r4, #0]
 80067ee:	7019      	strb	r1, [r3, #0]
 80067f0:	68a3      	ldr	r3, [r4, #8]
 80067f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067f6:	3b01      	subs	r3, #1
 80067f8:	60a3      	str	r3, [r4, #8]
 80067fa:	2900      	cmp	r1, #0
 80067fc:	d1ed      	bne.n	80067da <_puts_r+0x52>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	da11      	bge.n	8006826 <_puts_r+0x9e>
 8006802:	4622      	mov	r2, r4
 8006804:	210a      	movs	r1, #10
 8006806:	4628      	mov	r0, r5
 8006808:	f000 f945 	bl	8006a96 <__swbuf_r>
 800680c:	3001      	adds	r0, #1
 800680e:	d0d7      	beq.n	80067c0 <_puts_r+0x38>
 8006810:	250a      	movs	r5, #10
 8006812:	e7d7      	b.n	80067c4 <_puts_r+0x3c>
 8006814:	4622      	mov	r2, r4
 8006816:	4628      	mov	r0, r5
 8006818:	f000 f93d 	bl	8006a96 <__swbuf_r>
 800681c:	3001      	adds	r0, #1
 800681e:	d1e7      	bne.n	80067f0 <_puts_r+0x68>
 8006820:	e7ce      	b.n	80067c0 <_puts_r+0x38>
 8006822:	3e01      	subs	r6, #1
 8006824:	e7e4      	b.n	80067f0 <_puts_r+0x68>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	6022      	str	r2, [r4, #0]
 800682c:	220a      	movs	r2, #10
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	e7ee      	b.n	8006810 <_puts_r+0x88>
	...

08006834 <puts>:
 8006834:	4b02      	ldr	r3, [pc, #8]	@ (8006840 <puts+0xc>)
 8006836:	4601      	mov	r1, r0
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	f7ff bfa5 	b.w	8006788 <_puts_r>
 800683e:	bf00      	nop
 8006840:	20000018 	.word	0x20000018

08006844 <iscanf>:
 8006844:	b40f      	push	{r0, r1, r2, r3}
 8006846:	b507      	push	{r0, r1, r2, lr}
 8006848:	4906      	ldr	r1, [pc, #24]	@ (8006864 <iscanf+0x20>)
 800684a:	ab04      	add	r3, sp, #16
 800684c:	6808      	ldr	r0, [r1, #0]
 800684e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006852:	6841      	ldr	r1, [r0, #4]
 8006854:	9301      	str	r3, [sp, #4]
 8006856:	f003 f8f3 	bl	8009a40 <_vfiscanf_r>
 800685a:	b003      	add	sp, #12
 800685c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006860:	b004      	add	sp, #16
 8006862:	4770      	bx	lr
 8006864:	20000018 	.word	0x20000018

08006868 <setvbuf>:
 8006868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800686c:	461d      	mov	r5, r3
 800686e:	4b57      	ldr	r3, [pc, #348]	@ (80069cc <setvbuf+0x164>)
 8006870:	681f      	ldr	r7, [r3, #0]
 8006872:	4604      	mov	r4, r0
 8006874:	460e      	mov	r6, r1
 8006876:	4690      	mov	r8, r2
 8006878:	b127      	cbz	r7, 8006884 <setvbuf+0x1c>
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	b913      	cbnz	r3, 8006884 <setvbuf+0x1c>
 800687e:	4638      	mov	r0, r7
 8006880:	f7ff ff3a 	bl	80066f8 <__sinit>
 8006884:	f1b8 0f02 	cmp.w	r8, #2
 8006888:	d006      	beq.n	8006898 <setvbuf+0x30>
 800688a:	f1b8 0f01 	cmp.w	r8, #1
 800688e:	f200 809a 	bhi.w	80069c6 <setvbuf+0x15e>
 8006892:	2d00      	cmp	r5, #0
 8006894:	f2c0 8097 	blt.w	80069c6 <setvbuf+0x15e>
 8006898:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800689a:	07d9      	lsls	r1, r3, #31
 800689c:	d405      	bmi.n	80068aa <setvbuf+0x42>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	059a      	lsls	r2, r3, #22
 80068a2:	d402      	bmi.n	80068aa <setvbuf+0x42>
 80068a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068a6:	f000 fa08 	bl	8006cba <__retarget_lock_acquire_recursive>
 80068aa:	4621      	mov	r1, r4
 80068ac:	4638      	mov	r0, r7
 80068ae:	f003 faad 	bl	8009e0c <_fflush_r>
 80068b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068b4:	b141      	cbz	r1, 80068c8 <setvbuf+0x60>
 80068b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068ba:	4299      	cmp	r1, r3
 80068bc:	d002      	beq.n	80068c4 <setvbuf+0x5c>
 80068be:	4638      	mov	r0, r7
 80068c0:	f001 f852 	bl	8007968 <_free_r>
 80068c4:	2300      	movs	r3, #0
 80068c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80068c8:	2300      	movs	r3, #0
 80068ca:	61a3      	str	r3, [r4, #24]
 80068cc:	6063      	str	r3, [r4, #4]
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	061b      	lsls	r3, r3, #24
 80068d2:	d503      	bpl.n	80068dc <setvbuf+0x74>
 80068d4:	6921      	ldr	r1, [r4, #16]
 80068d6:	4638      	mov	r0, r7
 80068d8:	f001 f846 	bl	8007968 <_free_r>
 80068dc:	89a3      	ldrh	r3, [r4, #12]
 80068de:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80068e2:	f023 0303 	bic.w	r3, r3, #3
 80068e6:	f1b8 0f02 	cmp.w	r8, #2
 80068ea:	81a3      	strh	r3, [r4, #12]
 80068ec:	d061      	beq.n	80069b2 <setvbuf+0x14a>
 80068ee:	ab01      	add	r3, sp, #4
 80068f0:	466a      	mov	r2, sp
 80068f2:	4621      	mov	r1, r4
 80068f4:	4638      	mov	r0, r7
 80068f6:	f003 fab1 	bl	8009e5c <__swhatbuf_r>
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	4318      	orrs	r0, r3
 80068fe:	81a0      	strh	r0, [r4, #12]
 8006900:	bb2d      	cbnz	r5, 800694e <setvbuf+0xe6>
 8006902:	9d00      	ldr	r5, [sp, #0]
 8006904:	4628      	mov	r0, r5
 8006906:	f001 f879 	bl	80079fc <malloc>
 800690a:	4606      	mov	r6, r0
 800690c:	2800      	cmp	r0, #0
 800690e:	d152      	bne.n	80069b6 <setvbuf+0x14e>
 8006910:	f8dd 9000 	ldr.w	r9, [sp]
 8006914:	45a9      	cmp	r9, r5
 8006916:	d140      	bne.n	800699a <setvbuf+0x132>
 8006918:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800691c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006920:	f043 0202 	orr.w	r2, r3, #2
 8006924:	81a2      	strh	r2, [r4, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	60a2      	str	r2, [r4, #8]
 800692a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800692e:	6022      	str	r2, [r4, #0]
 8006930:	6122      	str	r2, [r4, #16]
 8006932:	2201      	movs	r2, #1
 8006934:	6162      	str	r2, [r4, #20]
 8006936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006938:	07d6      	lsls	r6, r2, #31
 800693a:	d404      	bmi.n	8006946 <setvbuf+0xde>
 800693c:	0598      	lsls	r0, r3, #22
 800693e:	d402      	bmi.n	8006946 <setvbuf+0xde>
 8006940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006942:	f000 f9bb 	bl	8006cbc <__retarget_lock_release_recursive>
 8006946:	4628      	mov	r0, r5
 8006948:	b003      	add	sp, #12
 800694a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800694e:	2e00      	cmp	r6, #0
 8006950:	d0d8      	beq.n	8006904 <setvbuf+0x9c>
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	b913      	cbnz	r3, 800695c <setvbuf+0xf4>
 8006956:	4638      	mov	r0, r7
 8006958:	f7ff fece 	bl	80066f8 <__sinit>
 800695c:	f1b8 0f01 	cmp.w	r8, #1
 8006960:	bf08      	it	eq
 8006962:	89a3      	ldrheq	r3, [r4, #12]
 8006964:	6026      	str	r6, [r4, #0]
 8006966:	bf04      	itt	eq
 8006968:	f043 0301 	orreq.w	r3, r3, #1
 800696c:	81a3      	strheq	r3, [r4, #12]
 800696e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006972:	f013 0208 	ands.w	r2, r3, #8
 8006976:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800697a:	d01e      	beq.n	80069ba <setvbuf+0x152>
 800697c:	07d9      	lsls	r1, r3, #31
 800697e:	bf41      	itttt	mi
 8006980:	2200      	movmi	r2, #0
 8006982:	426d      	negmi	r5, r5
 8006984:	60a2      	strmi	r2, [r4, #8]
 8006986:	61a5      	strmi	r5, [r4, #24]
 8006988:	bf58      	it	pl
 800698a:	60a5      	strpl	r5, [r4, #8]
 800698c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800698e:	07d2      	lsls	r2, r2, #31
 8006990:	d401      	bmi.n	8006996 <setvbuf+0x12e>
 8006992:	059b      	lsls	r3, r3, #22
 8006994:	d513      	bpl.n	80069be <setvbuf+0x156>
 8006996:	2500      	movs	r5, #0
 8006998:	e7d5      	b.n	8006946 <setvbuf+0xde>
 800699a:	4648      	mov	r0, r9
 800699c:	f001 f82e 	bl	80079fc <malloc>
 80069a0:	4606      	mov	r6, r0
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d0b8      	beq.n	8006918 <setvbuf+0xb0>
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ac:	81a3      	strh	r3, [r4, #12]
 80069ae:	464d      	mov	r5, r9
 80069b0:	e7cf      	b.n	8006952 <setvbuf+0xea>
 80069b2:	2500      	movs	r5, #0
 80069b4:	e7b2      	b.n	800691c <setvbuf+0xb4>
 80069b6:	46a9      	mov	r9, r5
 80069b8:	e7f5      	b.n	80069a6 <setvbuf+0x13e>
 80069ba:	60a2      	str	r2, [r4, #8]
 80069bc:	e7e6      	b.n	800698c <setvbuf+0x124>
 80069be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069c0:	f000 f97c 	bl	8006cbc <__retarget_lock_release_recursive>
 80069c4:	e7e7      	b.n	8006996 <setvbuf+0x12e>
 80069c6:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80069ca:	e7bc      	b.n	8006946 <setvbuf+0xde>
 80069cc:	20000018 	.word	0x20000018

080069d0 <siprintf>:
 80069d0:	b40e      	push	{r1, r2, r3}
 80069d2:	b500      	push	{lr}
 80069d4:	b09c      	sub	sp, #112	@ 0x70
 80069d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80069d8:	9002      	str	r0, [sp, #8]
 80069da:	9006      	str	r0, [sp, #24]
 80069dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069e0:	4809      	ldr	r0, [pc, #36]	@ (8006a08 <siprintf+0x38>)
 80069e2:	9107      	str	r1, [sp, #28]
 80069e4:	9104      	str	r1, [sp, #16]
 80069e6:	4909      	ldr	r1, [pc, #36]	@ (8006a0c <siprintf+0x3c>)
 80069e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ec:	9105      	str	r1, [sp, #20]
 80069ee:	6800      	ldr	r0, [r0, #0]
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	a902      	add	r1, sp, #8
 80069f4:	f002 fc4a 	bl	800928c <_svfiprintf_r>
 80069f8:	9b02      	ldr	r3, [sp, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	b01c      	add	sp, #112	@ 0x70
 8006a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a04:	b003      	add	sp, #12
 8006a06:	4770      	bx	lr
 8006a08:	20000018 	.word	0x20000018
 8006a0c:	ffff0208 	.word	0xffff0208

08006a10 <__sread>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	460c      	mov	r4, r1
 8006a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a18:	f000 f900 	bl	8006c1c <_read_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	bfab      	itete	ge
 8006a20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a22:	89a3      	ldrhlt	r3, [r4, #12]
 8006a24:	181b      	addge	r3, r3, r0
 8006a26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a2a:	bfac      	ite	ge
 8006a2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a2e:	81a3      	strhlt	r3, [r4, #12]
 8006a30:	bd10      	pop	{r4, pc}

08006a32 <__swrite>:
 8006a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a36:	461f      	mov	r7, r3
 8006a38:	898b      	ldrh	r3, [r1, #12]
 8006a3a:	05db      	lsls	r3, r3, #23
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	4616      	mov	r6, r2
 8006a42:	d505      	bpl.n	8006a50 <__swrite+0x1e>
 8006a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a48:	2302      	movs	r3, #2
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f000 f8d4 	bl	8006bf8 <_lseek_r>
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	463b      	mov	r3, r7
 8006a60:	4628      	mov	r0, r5
 8006a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a66:	f000 b8eb 	b.w	8006c40 <_write_r>

08006a6a <__sseek>:
 8006a6a:	b510      	push	{r4, lr}
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a72:	f000 f8c1 	bl	8006bf8 <_lseek_r>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	bf15      	itete	ne
 8006a7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a86:	81a3      	strheq	r3, [r4, #12]
 8006a88:	bf18      	it	ne
 8006a8a:	81a3      	strhne	r3, [r4, #12]
 8006a8c:	bd10      	pop	{r4, pc}

08006a8e <__sclose>:
 8006a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a92:	f000 b8a1 	b.w	8006bd8 <_close_r>

08006a96 <__swbuf_r>:
 8006a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a98:	460e      	mov	r6, r1
 8006a9a:	4614      	mov	r4, r2
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	b118      	cbz	r0, 8006aa8 <__swbuf_r+0x12>
 8006aa0:	6a03      	ldr	r3, [r0, #32]
 8006aa2:	b90b      	cbnz	r3, 8006aa8 <__swbuf_r+0x12>
 8006aa4:	f7ff fe28 	bl	80066f8 <__sinit>
 8006aa8:	69a3      	ldr	r3, [r4, #24]
 8006aaa:	60a3      	str	r3, [r4, #8]
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	071a      	lsls	r2, r3, #28
 8006ab0:	d501      	bpl.n	8006ab6 <__swbuf_r+0x20>
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	b943      	cbnz	r3, 8006ac8 <__swbuf_r+0x32>
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 f82b 	bl	8006b14 <__swsetup_r>
 8006abe:	b118      	cbz	r0, 8006ac8 <__swbuf_r+0x32>
 8006ac0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	6922      	ldr	r2, [r4, #16]
 8006acc:	1a98      	subs	r0, r3, r2
 8006ace:	6963      	ldr	r3, [r4, #20]
 8006ad0:	b2f6      	uxtb	r6, r6
 8006ad2:	4283      	cmp	r3, r0
 8006ad4:	4637      	mov	r7, r6
 8006ad6:	dc05      	bgt.n	8006ae4 <__swbuf_r+0x4e>
 8006ad8:	4621      	mov	r1, r4
 8006ada:	4628      	mov	r0, r5
 8006adc:	f003 f996 	bl	8009e0c <_fflush_r>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d1ed      	bne.n	8006ac0 <__swbuf_r+0x2a>
 8006ae4:	68a3      	ldr	r3, [r4, #8]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	60a3      	str	r3, [r4, #8]
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	6022      	str	r2, [r4, #0]
 8006af0:	701e      	strb	r6, [r3, #0]
 8006af2:	6962      	ldr	r2, [r4, #20]
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d004      	beq.n	8006b04 <__swbuf_r+0x6e>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	07db      	lsls	r3, r3, #31
 8006afe:	d5e1      	bpl.n	8006ac4 <__swbuf_r+0x2e>
 8006b00:	2e0a      	cmp	r6, #10
 8006b02:	d1df      	bne.n	8006ac4 <__swbuf_r+0x2e>
 8006b04:	4621      	mov	r1, r4
 8006b06:	4628      	mov	r0, r5
 8006b08:	f003 f980 	bl	8009e0c <_fflush_r>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d0d9      	beq.n	8006ac4 <__swbuf_r+0x2e>
 8006b10:	e7d6      	b.n	8006ac0 <__swbuf_r+0x2a>
	...

08006b14 <__swsetup_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4b29      	ldr	r3, [pc, #164]	@ (8006bbc <__swsetup_r+0xa8>)
 8006b18:	4605      	mov	r5, r0
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	b118      	cbz	r0, 8006b28 <__swsetup_r+0x14>
 8006b20:	6a03      	ldr	r3, [r0, #32]
 8006b22:	b90b      	cbnz	r3, 8006b28 <__swsetup_r+0x14>
 8006b24:	f7ff fde8 	bl	80066f8 <__sinit>
 8006b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b2c:	0719      	lsls	r1, r3, #28
 8006b2e:	d422      	bmi.n	8006b76 <__swsetup_r+0x62>
 8006b30:	06da      	lsls	r2, r3, #27
 8006b32:	d407      	bmi.n	8006b44 <__swsetup_r+0x30>
 8006b34:	2209      	movs	r2, #9
 8006b36:	602a      	str	r2, [r5, #0]
 8006b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b42:	e033      	b.n	8006bac <__swsetup_r+0x98>
 8006b44:	0758      	lsls	r0, r3, #29
 8006b46:	d512      	bpl.n	8006b6e <__swsetup_r+0x5a>
 8006b48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b4a:	b141      	cbz	r1, 8006b5e <__swsetup_r+0x4a>
 8006b4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b50:	4299      	cmp	r1, r3
 8006b52:	d002      	beq.n	8006b5a <__swsetup_r+0x46>
 8006b54:	4628      	mov	r0, r5
 8006b56:	f000 ff07 	bl	8007968 <_free_r>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	2300      	movs	r3, #0
 8006b68:	6063      	str	r3, [r4, #4]
 8006b6a:	6923      	ldr	r3, [r4, #16]
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	f043 0308 	orr.w	r3, r3, #8
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	6923      	ldr	r3, [r4, #16]
 8006b78:	b94b      	cbnz	r3, 8006b8e <__swsetup_r+0x7a>
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b84:	d003      	beq.n	8006b8e <__swsetup_r+0x7a>
 8006b86:	4621      	mov	r1, r4
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f003 f98d 	bl	8009ea8 <__smakebuf_r>
 8006b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b92:	f013 0201 	ands.w	r2, r3, #1
 8006b96:	d00a      	beq.n	8006bae <__swsetup_r+0x9a>
 8006b98:	2200      	movs	r2, #0
 8006b9a:	60a2      	str	r2, [r4, #8]
 8006b9c:	6962      	ldr	r2, [r4, #20]
 8006b9e:	4252      	negs	r2, r2
 8006ba0:	61a2      	str	r2, [r4, #24]
 8006ba2:	6922      	ldr	r2, [r4, #16]
 8006ba4:	b942      	cbnz	r2, 8006bb8 <__swsetup_r+0xa4>
 8006ba6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006baa:	d1c5      	bne.n	8006b38 <__swsetup_r+0x24>
 8006bac:	bd38      	pop	{r3, r4, r5, pc}
 8006bae:	0799      	lsls	r1, r3, #30
 8006bb0:	bf58      	it	pl
 8006bb2:	6962      	ldrpl	r2, [r4, #20]
 8006bb4:	60a2      	str	r2, [r4, #8]
 8006bb6:	e7f4      	b.n	8006ba2 <__swsetup_r+0x8e>
 8006bb8:	2000      	movs	r0, #0
 8006bba:	e7f7      	b.n	8006bac <__swsetup_r+0x98>
 8006bbc:	20000018 	.word	0x20000018

08006bc0 <memset>:
 8006bc0:	4402      	add	r2, r0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d100      	bne.n	8006bca <memset+0xa>
 8006bc8:	4770      	bx	lr
 8006bca:	f803 1b01 	strb.w	r1, [r3], #1
 8006bce:	e7f9      	b.n	8006bc4 <memset+0x4>

08006bd0 <_localeconv_r>:
 8006bd0:	4800      	ldr	r0, [pc, #0]	@ (8006bd4 <_localeconv_r+0x4>)
 8006bd2:	4770      	bx	lr
 8006bd4:	20000158 	.word	0x20000158

08006bd8 <_close_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4d06      	ldr	r5, [pc, #24]	@ (8006bf4 <_close_r+0x1c>)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4604      	mov	r4, r0
 8006be0:	4608      	mov	r0, r1
 8006be2:	602b      	str	r3, [r5, #0]
 8006be4:	f7fa fd20 	bl	8001628 <_close>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d102      	bne.n	8006bf2 <_close_r+0x1a>
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	b103      	cbz	r3, 8006bf2 <_close_r+0x1a>
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	200009c0 	.word	0x200009c0

08006bf8 <_lseek_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d07      	ldr	r5, [pc, #28]	@ (8006c18 <_lseek_r+0x20>)
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	4608      	mov	r0, r1
 8006c00:	4611      	mov	r1, r2
 8006c02:	2200      	movs	r2, #0
 8006c04:	602a      	str	r2, [r5, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f7fa fd25 	bl	8001656 <_lseek>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_lseek_r+0x1e>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_lseek_r+0x1e>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	200009c0 	.word	0x200009c0

08006c1c <_read_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4d07      	ldr	r5, [pc, #28]	@ (8006c3c <_read_r+0x20>)
 8006c20:	4604      	mov	r4, r0
 8006c22:	4608      	mov	r0, r1
 8006c24:	4611      	mov	r1, r2
 8006c26:	2200      	movs	r2, #0
 8006c28:	602a      	str	r2, [r5, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f7fa fd24 	bl	8001678 <_read>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_read_r+0x1e>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_read_r+0x1e>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	200009c0 	.word	0x200009c0

08006c40 <_write_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	4d07      	ldr	r5, [pc, #28]	@ (8006c60 <_write_r+0x20>)
 8006c44:	4604      	mov	r4, r0
 8006c46:	4608      	mov	r0, r1
 8006c48:	4611      	mov	r1, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	602a      	str	r2, [r5, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f7fa fcbe 	bl	80015d0 <_write>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_write_r+0x1e>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_write_r+0x1e>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	200009c0 	.word	0x200009c0

08006c64 <__errno>:
 8006c64:	4b01      	ldr	r3, [pc, #4]	@ (8006c6c <__errno+0x8>)
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	20000018 	.word	0x20000018

08006c70 <__libc_init_array>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	4d0d      	ldr	r5, [pc, #52]	@ (8006ca8 <__libc_init_array+0x38>)
 8006c74:	4c0d      	ldr	r4, [pc, #52]	@ (8006cac <__libc_init_array+0x3c>)
 8006c76:	1b64      	subs	r4, r4, r5
 8006c78:	10a4      	asrs	r4, r4, #2
 8006c7a:	2600      	movs	r6, #0
 8006c7c:	42a6      	cmp	r6, r4
 8006c7e:	d109      	bne.n	8006c94 <__libc_init_array+0x24>
 8006c80:	4d0b      	ldr	r5, [pc, #44]	@ (8006cb0 <__libc_init_array+0x40>)
 8006c82:	4c0c      	ldr	r4, [pc, #48]	@ (8006cb4 <__libc_init_array+0x44>)
 8006c84:	f003 ffd6 	bl	800ac34 <_init>
 8006c88:	1b64      	subs	r4, r4, r5
 8006c8a:	10a4      	asrs	r4, r4, #2
 8006c8c:	2600      	movs	r6, #0
 8006c8e:	42a6      	cmp	r6, r4
 8006c90:	d105      	bne.n	8006c9e <__libc_init_array+0x2e>
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c98:	4798      	blx	r3
 8006c9a:	3601      	adds	r6, #1
 8006c9c:	e7ee      	b.n	8006c7c <__libc_init_array+0xc>
 8006c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca2:	4798      	blx	r3
 8006ca4:	3601      	adds	r6, #1
 8006ca6:	e7f2      	b.n	8006c8e <__libc_init_array+0x1e>
 8006ca8:	0800b18c 	.word	0x0800b18c
 8006cac:	0800b18c 	.word	0x0800b18c
 8006cb0:	0800b18c 	.word	0x0800b18c
 8006cb4:	0800b190 	.word	0x0800b190

08006cb8 <__retarget_lock_init_recursive>:
 8006cb8:	4770      	bx	lr

08006cba <__retarget_lock_acquire_recursive>:
 8006cba:	4770      	bx	lr

08006cbc <__retarget_lock_release_recursive>:
 8006cbc:	4770      	bx	lr
	...

08006cc0 <nanf>:
 8006cc0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006cc8 <nanf+0x8>
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	7fc00000 	.word	0x7fc00000

08006ccc <quorem>:
 8006ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	6903      	ldr	r3, [r0, #16]
 8006cd2:	690c      	ldr	r4, [r1, #16]
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	4607      	mov	r7, r0
 8006cd8:	db7e      	blt.n	8006dd8 <quorem+0x10c>
 8006cda:	3c01      	subs	r4, #1
 8006cdc:	f101 0814 	add.w	r8, r1, #20
 8006ce0:	00a3      	lsls	r3, r4, #2
 8006ce2:	f100 0514 	add.w	r5, r0, #20
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cfe:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d02:	d32e      	bcc.n	8006d62 <quorem+0x96>
 8006d04:	f04f 0a00 	mov.w	sl, #0
 8006d08:	46c4      	mov	ip, r8
 8006d0a:	46ae      	mov	lr, r5
 8006d0c:	46d3      	mov	fp, sl
 8006d0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d12:	b298      	uxth	r0, r3
 8006d14:	fb06 a000 	mla	r0, r6, r0, sl
 8006d18:	0c02      	lsrs	r2, r0, #16
 8006d1a:	0c1b      	lsrs	r3, r3, #16
 8006d1c:	fb06 2303 	mla	r3, r6, r3, r2
 8006d20:	f8de 2000 	ldr.w	r2, [lr]
 8006d24:	b280      	uxth	r0, r0
 8006d26:	b292      	uxth	r2, r2
 8006d28:	1a12      	subs	r2, r2, r0
 8006d2a:	445a      	add	r2, fp
 8006d2c:	f8de 0000 	ldr.w	r0, [lr]
 8006d30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d3e:	b292      	uxth	r2, r2
 8006d40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d44:	45e1      	cmp	r9, ip
 8006d46:	f84e 2b04 	str.w	r2, [lr], #4
 8006d4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d4e:	d2de      	bcs.n	8006d0e <quorem+0x42>
 8006d50:	9b00      	ldr	r3, [sp, #0]
 8006d52:	58eb      	ldr	r3, [r5, r3]
 8006d54:	b92b      	cbnz	r3, 8006d62 <quorem+0x96>
 8006d56:	9b01      	ldr	r3, [sp, #4]
 8006d58:	3b04      	subs	r3, #4
 8006d5a:	429d      	cmp	r5, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	d32f      	bcc.n	8006dc0 <quorem+0xf4>
 8006d60:	613c      	str	r4, [r7, #16]
 8006d62:	4638      	mov	r0, r7
 8006d64:	f001 f9c4 	bl	80080f0 <__mcmp>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	db25      	blt.n	8006db8 <quorem+0xec>
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	2000      	movs	r0, #0
 8006d70:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d74:	f8d1 c000 	ldr.w	ip, [r1]
 8006d78:	fa1f fe82 	uxth.w	lr, r2
 8006d7c:	fa1f f38c 	uxth.w	r3, ip
 8006d80:	eba3 030e 	sub.w	r3, r3, lr
 8006d84:	4403      	add	r3, r0
 8006d86:	0c12      	lsrs	r2, r2, #16
 8006d88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d96:	45c1      	cmp	r9, r8
 8006d98:	f841 3b04 	str.w	r3, [r1], #4
 8006d9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006da0:	d2e6      	bcs.n	8006d70 <quorem+0xa4>
 8006da2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006daa:	b922      	cbnz	r2, 8006db6 <quorem+0xea>
 8006dac:	3b04      	subs	r3, #4
 8006dae:	429d      	cmp	r5, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	d30b      	bcc.n	8006dcc <quorem+0x100>
 8006db4:	613c      	str	r4, [r7, #16]
 8006db6:	3601      	adds	r6, #1
 8006db8:	4630      	mov	r0, r6
 8006dba:	b003      	add	sp, #12
 8006dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	3b04      	subs	r3, #4
 8006dc4:	2a00      	cmp	r2, #0
 8006dc6:	d1cb      	bne.n	8006d60 <quorem+0x94>
 8006dc8:	3c01      	subs	r4, #1
 8006dca:	e7c6      	b.n	8006d5a <quorem+0x8e>
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	3b04      	subs	r3, #4
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	d1ef      	bne.n	8006db4 <quorem+0xe8>
 8006dd4:	3c01      	subs	r4, #1
 8006dd6:	e7ea      	b.n	8006dae <quorem+0xe2>
 8006dd8:	2000      	movs	r0, #0
 8006dda:	e7ee      	b.n	8006dba <quorem+0xee>
 8006ddc:	0000      	movs	r0, r0
	...

08006de0 <_dtoa_r>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	69c7      	ldr	r7, [r0, #28]
 8006de6:	b099      	sub	sp, #100	@ 0x64
 8006de8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006dec:	ec55 4b10 	vmov	r4, r5, d0
 8006df0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006df2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006df4:	4683      	mov	fp, r0
 8006df6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006df8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dfa:	b97f      	cbnz	r7, 8006e1c <_dtoa_r+0x3c>
 8006dfc:	2010      	movs	r0, #16
 8006dfe:	f000 fdfd 	bl	80079fc <malloc>
 8006e02:	4602      	mov	r2, r0
 8006e04:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e08:	b920      	cbnz	r0, 8006e14 <_dtoa_r+0x34>
 8006e0a:	4ba7      	ldr	r3, [pc, #668]	@ (80070a8 <_dtoa_r+0x2c8>)
 8006e0c:	21ef      	movs	r1, #239	@ 0xef
 8006e0e:	48a7      	ldr	r0, [pc, #668]	@ (80070ac <_dtoa_r+0x2cc>)
 8006e10:	f003 fa6e 	bl	800a2f0 <__assert_func>
 8006e14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e18:	6007      	str	r7, [r0, #0]
 8006e1a:	60c7      	str	r7, [r0, #12]
 8006e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e20:	6819      	ldr	r1, [r3, #0]
 8006e22:	b159      	cbz	r1, 8006e3c <_dtoa_r+0x5c>
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	604a      	str	r2, [r1, #4]
 8006e28:	2301      	movs	r3, #1
 8006e2a:	4093      	lsls	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]
 8006e2e:	4658      	mov	r0, fp
 8006e30:	f000 feda 	bl	8007be8 <_Bfree>
 8006e34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	1e2b      	subs	r3, r5, #0
 8006e3e:	bfb9      	ittee	lt
 8006e40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e44:	9303      	strlt	r3, [sp, #12]
 8006e46:	2300      	movge	r3, #0
 8006e48:	6033      	strge	r3, [r6, #0]
 8006e4a:	9f03      	ldr	r7, [sp, #12]
 8006e4c:	4b98      	ldr	r3, [pc, #608]	@ (80070b0 <_dtoa_r+0x2d0>)
 8006e4e:	bfbc      	itt	lt
 8006e50:	2201      	movlt	r2, #1
 8006e52:	6032      	strlt	r2, [r6, #0]
 8006e54:	43bb      	bics	r3, r7
 8006e56:	d112      	bne.n	8006e7e <_dtoa_r+0x9e>
 8006e58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e64:	4323      	orrs	r3, r4
 8006e66:	f000 854d 	beq.w	8007904 <_dtoa_r+0xb24>
 8006e6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80070c4 <_dtoa_r+0x2e4>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 854f 	beq.w	8007914 <_dtoa_r+0xb34>
 8006e76:	f10a 0303 	add.w	r3, sl, #3
 8006e7a:	f000 bd49 	b.w	8007910 <_dtoa_r+0xb30>
 8006e7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e82:	2200      	movs	r2, #0
 8006e84:	ec51 0b17 	vmov	r0, r1, d7
 8006e88:	2300      	movs	r3, #0
 8006e8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006e8e:	f7f9 fe2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e92:	4680      	mov	r8, r0
 8006e94:	b158      	cbz	r0, 8006eae <_dtoa_r+0xce>
 8006e96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e98:	2301      	movs	r3, #1
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e9e:	b113      	cbz	r3, 8006ea6 <_dtoa_r+0xc6>
 8006ea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ea2:	4b84      	ldr	r3, [pc, #528]	@ (80070b4 <_dtoa_r+0x2d4>)
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80070c8 <_dtoa_r+0x2e8>
 8006eaa:	f000 bd33 	b.w	8007914 <_dtoa_r+0xb34>
 8006eae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006eb2:	aa16      	add	r2, sp, #88	@ 0x58
 8006eb4:	a917      	add	r1, sp, #92	@ 0x5c
 8006eb6:	4658      	mov	r0, fp
 8006eb8:	f001 fa3a 	bl	8008330 <__d2b>
 8006ebc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ec0:	4681      	mov	r9, r0
 8006ec2:	2e00      	cmp	r6, #0
 8006ec4:	d077      	beq.n	8006fb6 <_dtoa_r+0x1d6>
 8006ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ec8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ed4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ed8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006edc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4b74      	ldr	r3, [pc, #464]	@ (80070b8 <_dtoa_r+0x2d8>)
 8006ee6:	f7f9 f9df 	bl	80002a8 <__aeabi_dsub>
 8006eea:	a369      	add	r3, pc, #420	@ (adr r3, 8007090 <_dtoa_r+0x2b0>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 fb92 	bl	8000618 <__aeabi_dmul>
 8006ef4:	a368      	add	r3, pc, #416	@ (adr r3, 8007098 <_dtoa_r+0x2b8>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 f9d7 	bl	80002ac <__adddf3>
 8006efe:	4604      	mov	r4, r0
 8006f00:	4630      	mov	r0, r6
 8006f02:	460d      	mov	r5, r1
 8006f04:	f7f9 fb1e 	bl	8000544 <__aeabi_i2d>
 8006f08:	a365      	add	r3, pc, #404	@ (adr r3, 80070a0 <_dtoa_r+0x2c0>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f7f9 fb83 	bl	8000618 <__aeabi_dmul>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 f9c7 	bl	80002ac <__adddf3>
 8006f1e:	4604      	mov	r4, r0
 8006f20:	460d      	mov	r5, r1
 8006f22:	f7f9 fe29 	bl	8000b78 <__aeabi_d2iz>
 8006f26:	2200      	movs	r2, #0
 8006f28:	4607      	mov	r7, r0
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	4629      	mov	r1, r5
 8006f30:	f7f9 fde4 	bl	8000afc <__aeabi_dcmplt>
 8006f34:	b140      	cbz	r0, 8006f48 <_dtoa_r+0x168>
 8006f36:	4638      	mov	r0, r7
 8006f38:	f7f9 fb04 	bl	8000544 <__aeabi_i2d>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	462b      	mov	r3, r5
 8006f40:	f7f9 fdd2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f44:	b900      	cbnz	r0, 8006f48 <_dtoa_r+0x168>
 8006f46:	3f01      	subs	r7, #1
 8006f48:	2f16      	cmp	r7, #22
 8006f4a:	d851      	bhi.n	8006ff0 <_dtoa_r+0x210>
 8006f4c:	4b5b      	ldr	r3, [pc, #364]	@ (80070bc <_dtoa_r+0x2dc>)
 8006f4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f5a:	f7f9 fdcf 	bl	8000afc <__aeabi_dcmplt>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d048      	beq.n	8006ff4 <_dtoa_r+0x214>
 8006f62:	3f01      	subs	r7, #1
 8006f64:	2300      	movs	r3, #0
 8006f66:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f6a:	1b9b      	subs	r3, r3, r6
 8006f6c:	1e5a      	subs	r2, r3, #1
 8006f6e:	bf44      	itt	mi
 8006f70:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f74:	2300      	movmi	r3, #0
 8006f76:	9208      	str	r2, [sp, #32]
 8006f78:	bf54      	ite	pl
 8006f7a:	f04f 0800 	movpl.w	r8, #0
 8006f7e:	9308      	strmi	r3, [sp, #32]
 8006f80:	2f00      	cmp	r7, #0
 8006f82:	db39      	blt.n	8006ff8 <_dtoa_r+0x218>
 8006f84:	9b08      	ldr	r3, [sp, #32]
 8006f86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006f88:	443b      	add	r3, r7
 8006f8a:	9308      	str	r3, [sp, #32]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f92:	2b09      	cmp	r3, #9
 8006f94:	d864      	bhi.n	8007060 <_dtoa_r+0x280>
 8006f96:	2b05      	cmp	r3, #5
 8006f98:	bfc4      	itt	gt
 8006f9a:	3b04      	subgt	r3, #4
 8006f9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa0:	f1a3 0302 	sub.w	r3, r3, #2
 8006fa4:	bfcc      	ite	gt
 8006fa6:	2400      	movgt	r4, #0
 8006fa8:	2401      	movle	r4, #1
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d863      	bhi.n	8007076 <_dtoa_r+0x296>
 8006fae:	e8df f003 	tbb	[pc, r3]
 8006fb2:	372a      	.short	0x372a
 8006fb4:	5535      	.short	0x5535
 8006fb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006fba:	441e      	add	r6, r3
 8006fbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	bfc1      	itttt	gt
 8006fc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006fc8:	409f      	lslgt	r7, r3
 8006fca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006fce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006fd2:	bfd6      	itet	le
 8006fd4:	f1c3 0320 	rsble	r3, r3, #32
 8006fd8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006fdc:	fa04 f003 	lslle.w	r0, r4, r3
 8006fe0:	f7f9 faa0 	bl	8000524 <__aeabi_ui2d>
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006fea:	3e01      	subs	r6, #1
 8006fec:	9214      	str	r2, [sp, #80]	@ 0x50
 8006fee:	e777      	b.n	8006ee0 <_dtoa_r+0x100>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e7b8      	b.n	8006f66 <_dtoa_r+0x186>
 8006ff4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006ff6:	e7b7      	b.n	8006f68 <_dtoa_r+0x188>
 8006ff8:	427b      	negs	r3, r7
 8006ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	eba8 0807 	sub.w	r8, r8, r7
 8007002:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007004:	e7c4      	b.n	8006f90 <_dtoa_r+0x1b0>
 8007006:	2300      	movs	r3, #0
 8007008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800700a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800700c:	2b00      	cmp	r3, #0
 800700e:	dc35      	bgt.n	800707c <_dtoa_r+0x29c>
 8007010:	2301      	movs	r3, #1
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	9307      	str	r3, [sp, #28]
 8007016:	461a      	mov	r2, r3
 8007018:	920e      	str	r2, [sp, #56]	@ 0x38
 800701a:	e00b      	b.n	8007034 <_dtoa_r+0x254>
 800701c:	2301      	movs	r3, #1
 800701e:	e7f3      	b.n	8007008 <_dtoa_r+0x228>
 8007020:	2300      	movs	r3, #0
 8007022:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	3301      	adds	r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	9307      	str	r3, [sp, #28]
 8007030:	bfb8      	it	lt
 8007032:	2301      	movlt	r3, #1
 8007034:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007038:	2100      	movs	r1, #0
 800703a:	2204      	movs	r2, #4
 800703c:	f102 0514 	add.w	r5, r2, #20
 8007040:	429d      	cmp	r5, r3
 8007042:	d91f      	bls.n	8007084 <_dtoa_r+0x2a4>
 8007044:	6041      	str	r1, [r0, #4]
 8007046:	4658      	mov	r0, fp
 8007048:	f000 fd8e 	bl	8007b68 <_Balloc>
 800704c:	4682      	mov	sl, r0
 800704e:	2800      	cmp	r0, #0
 8007050:	d13c      	bne.n	80070cc <_dtoa_r+0x2ec>
 8007052:	4b1b      	ldr	r3, [pc, #108]	@ (80070c0 <_dtoa_r+0x2e0>)
 8007054:	4602      	mov	r2, r0
 8007056:	f240 11af 	movw	r1, #431	@ 0x1af
 800705a:	e6d8      	b.n	8006e0e <_dtoa_r+0x2e>
 800705c:	2301      	movs	r3, #1
 800705e:	e7e0      	b.n	8007022 <_dtoa_r+0x242>
 8007060:	2401      	movs	r4, #1
 8007062:	2300      	movs	r3, #0
 8007064:	9309      	str	r3, [sp, #36]	@ 0x24
 8007066:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	2200      	movs	r2, #0
 8007072:	2312      	movs	r3, #18
 8007074:	e7d0      	b.n	8007018 <_dtoa_r+0x238>
 8007076:	2301      	movs	r3, #1
 8007078:	930b      	str	r3, [sp, #44]	@ 0x2c
 800707a:	e7f5      	b.n	8007068 <_dtoa_r+0x288>
 800707c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	9307      	str	r3, [sp, #28]
 8007082:	e7d7      	b.n	8007034 <_dtoa_r+0x254>
 8007084:	3101      	adds	r1, #1
 8007086:	0052      	lsls	r2, r2, #1
 8007088:	e7d8      	b.n	800703c <_dtoa_r+0x25c>
 800708a:	bf00      	nop
 800708c:	f3af 8000 	nop.w
 8007090:	636f4361 	.word	0x636f4361
 8007094:	3fd287a7 	.word	0x3fd287a7
 8007098:	8b60c8b3 	.word	0x8b60c8b3
 800709c:	3fc68a28 	.word	0x3fc68a28
 80070a0:	509f79fb 	.word	0x509f79fb
 80070a4:	3fd34413 	.word	0x3fd34413
 80070a8:	0800ad80 	.word	0x0800ad80
 80070ac:	0800ad97 	.word	0x0800ad97
 80070b0:	7ff00000 	.word	0x7ff00000
 80070b4:	0800b0d9 	.word	0x0800b0d9
 80070b8:	3ff80000 	.word	0x3ff80000
 80070bc:	0800ae90 	.word	0x0800ae90
 80070c0:	0800adef 	.word	0x0800adef
 80070c4:	0800ad7c 	.word	0x0800ad7c
 80070c8:	0800b0d8 	.word	0x0800b0d8
 80070cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070d0:	6018      	str	r0, [r3, #0]
 80070d2:	9b07      	ldr	r3, [sp, #28]
 80070d4:	2b0e      	cmp	r3, #14
 80070d6:	f200 80a4 	bhi.w	8007222 <_dtoa_r+0x442>
 80070da:	2c00      	cmp	r4, #0
 80070dc:	f000 80a1 	beq.w	8007222 <_dtoa_r+0x442>
 80070e0:	2f00      	cmp	r7, #0
 80070e2:	dd33      	ble.n	800714c <_dtoa_r+0x36c>
 80070e4:	4bad      	ldr	r3, [pc, #692]	@ (800739c <_dtoa_r+0x5bc>)
 80070e6:	f007 020f 	and.w	r2, r7, #15
 80070ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ee:	ed93 7b00 	vldr	d7, [r3]
 80070f2:	05f8      	lsls	r0, r7, #23
 80070f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80070f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80070fc:	d516      	bpl.n	800712c <_dtoa_r+0x34c>
 80070fe:	4ba8      	ldr	r3, [pc, #672]	@ (80073a0 <_dtoa_r+0x5c0>)
 8007100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007108:	f7f9 fbb0 	bl	800086c <__aeabi_ddiv>
 800710c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007110:	f004 040f 	and.w	r4, r4, #15
 8007114:	2603      	movs	r6, #3
 8007116:	4da2      	ldr	r5, [pc, #648]	@ (80073a0 <_dtoa_r+0x5c0>)
 8007118:	b954      	cbnz	r4, 8007130 <_dtoa_r+0x350>
 800711a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800711e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007122:	f7f9 fba3 	bl	800086c <__aeabi_ddiv>
 8007126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800712a:	e028      	b.n	800717e <_dtoa_r+0x39e>
 800712c:	2602      	movs	r6, #2
 800712e:	e7f2      	b.n	8007116 <_dtoa_r+0x336>
 8007130:	07e1      	lsls	r1, r4, #31
 8007132:	d508      	bpl.n	8007146 <_dtoa_r+0x366>
 8007134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007138:	e9d5 2300 	ldrd	r2, r3, [r5]
 800713c:	f7f9 fa6c 	bl	8000618 <__aeabi_dmul>
 8007140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007144:	3601      	adds	r6, #1
 8007146:	1064      	asrs	r4, r4, #1
 8007148:	3508      	adds	r5, #8
 800714a:	e7e5      	b.n	8007118 <_dtoa_r+0x338>
 800714c:	f000 80d2 	beq.w	80072f4 <_dtoa_r+0x514>
 8007150:	427c      	negs	r4, r7
 8007152:	4b92      	ldr	r3, [pc, #584]	@ (800739c <_dtoa_r+0x5bc>)
 8007154:	4d92      	ldr	r5, [pc, #584]	@ (80073a0 <_dtoa_r+0x5c0>)
 8007156:	f004 020f 	and.w	r2, r4, #15
 800715a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007166:	f7f9 fa57 	bl	8000618 <__aeabi_dmul>
 800716a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800716e:	1124      	asrs	r4, r4, #4
 8007170:	2300      	movs	r3, #0
 8007172:	2602      	movs	r6, #2
 8007174:	2c00      	cmp	r4, #0
 8007176:	f040 80b2 	bne.w	80072de <_dtoa_r+0x4fe>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1d3      	bne.n	8007126 <_dtoa_r+0x346>
 800717e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007180:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80b7 	beq.w	80072f8 <_dtoa_r+0x518>
 800718a:	4b86      	ldr	r3, [pc, #536]	@ (80073a4 <_dtoa_r+0x5c4>)
 800718c:	2200      	movs	r2, #0
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 fcb3 	bl	8000afc <__aeabi_dcmplt>
 8007196:	2800      	cmp	r0, #0
 8007198:	f000 80ae 	beq.w	80072f8 <_dtoa_r+0x518>
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 80aa 	beq.w	80072f8 <_dtoa_r+0x518>
 80071a4:	9b00      	ldr	r3, [sp, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	dd37      	ble.n	800721a <_dtoa_r+0x43a>
 80071aa:	1e7b      	subs	r3, r7, #1
 80071ac:	9304      	str	r3, [sp, #16]
 80071ae:	4620      	mov	r0, r4
 80071b0:	4b7d      	ldr	r3, [pc, #500]	@ (80073a8 <_dtoa_r+0x5c8>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	4629      	mov	r1, r5
 80071b6:	f7f9 fa2f 	bl	8000618 <__aeabi_dmul>
 80071ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071be:	9c00      	ldr	r4, [sp, #0]
 80071c0:	3601      	adds	r6, #1
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7f9 f9be 	bl	8000544 <__aeabi_i2d>
 80071c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071cc:	f7f9 fa24 	bl	8000618 <__aeabi_dmul>
 80071d0:	4b76      	ldr	r3, [pc, #472]	@ (80073ac <_dtoa_r+0x5cc>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	f7f9 f86a 	bl	80002ac <__adddf3>
 80071d8:	4605      	mov	r5, r0
 80071da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80071de:	2c00      	cmp	r4, #0
 80071e0:	f040 808d 	bne.w	80072fe <_dtoa_r+0x51e>
 80071e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e8:	4b71      	ldr	r3, [pc, #452]	@ (80073b0 <_dtoa_r+0x5d0>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	f7f9 f85c 	bl	80002a8 <__aeabi_dsub>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071f8:	462a      	mov	r2, r5
 80071fa:	4633      	mov	r3, r6
 80071fc:	f7f9 fc9c 	bl	8000b38 <__aeabi_dcmpgt>
 8007200:	2800      	cmp	r0, #0
 8007202:	f040 828b 	bne.w	800771c <_dtoa_r+0x93c>
 8007206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800720a:	462a      	mov	r2, r5
 800720c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007210:	f7f9 fc74 	bl	8000afc <__aeabi_dcmplt>
 8007214:	2800      	cmp	r0, #0
 8007216:	f040 8128 	bne.w	800746a <_dtoa_r+0x68a>
 800721a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800721e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007224:	2b00      	cmp	r3, #0
 8007226:	f2c0 815a 	blt.w	80074de <_dtoa_r+0x6fe>
 800722a:	2f0e      	cmp	r7, #14
 800722c:	f300 8157 	bgt.w	80074de <_dtoa_r+0x6fe>
 8007230:	4b5a      	ldr	r3, [pc, #360]	@ (800739c <_dtoa_r+0x5bc>)
 8007232:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007236:	ed93 7b00 	vldr	d7, [r3]
 800723a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800723c:	2b00      	cmp	r3, #0
 800723e:	ed8d 7b00 	vstr	d7, [sp]
 8007242:	da03      	bge.n	800724c <_dtoa_r+0x46c>
 8007244:	9b07      	ldr	r3, [sp, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f340 8101 	ble.w	800744e <_dtoa_r+0x66e>
 800724c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007250:	4656      	mov	r6, sl
 8007252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 fb07 	bl	800086c <__aeabi_ddiv>
 800725e:	f7f9 fc8b 	bl	8000b78 <__aeabi_d2iz>
 8007262:	4680      	mov	r8, r0
 8007264:	f7f9 f96e 	bl	8000544 <__aeabi_i2d>
 8007268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800726c:	f7f9 f9d4 	bl	8000618 <__aeabi_dmul>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4620      	mov	r0, r4
 8007276:	4629      	mov	r1, r5
 8007278:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800727c:	f7f9 f814 	bl	80002a8 <__aeabi_dsub>
 8007280:	f806 4b01 	strb.w	r4, [r6], #1
 8007284:	9d07      	ldr	r5, [sp, #28]
 8007286:	eba6 040a 	sub.w	r4, r6, sl
 800728a:	42a5      	cmp	r5, r4
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	f040 8117 	bne.w	80074c2 <_dtoa_r+0x6e2>
 8007294:	f7f9 f80a 	bl	80002ac <__adddf3>
 8007298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800729c:	4604      	mov	r4, r0
 800729e:	460d      	mov	r5, r1
 80072a0:	f7f9 fc4a 	bl	8000b38 <__aeabi_dcmpgt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f040 80f9 	bne.w	800749c <_dtoa_r+0x6bc>
 80072aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ae:	4620      	mov	r0, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	f7f9 fc19 	bl	8000ae8 <__aeabi_dcmpeq>
 80072b6:	b118      	cbz	r0, 80072c0 <_dtoa_r+0x4e0>
 80072b8:	f018 0f01 	tst.w	r8, #1
 80072bc:	f040 80ee 	bne.w	800749c <_dtoa_r+0x6bc>
 80072c0:	4649      	mov	r1, r9
 80072c2:	4658      	mov	r0, fp
 80072c4:	f000 fc90 	bl	8007be8 <_Bfree>
 80072c8:	2300      	movs	r3, #0
 80072ca:	7033      	strb	r3, [r6, #0]
 80072cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072ce:	3701      	adds	r7, #1
 80072d0:	601f      	str	r7, [r3, #0]
 80072d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 831d 	beq.w	8007914 <_dtoa_r+0xb34>
 80072da:	601e      	str	r6, [r3, #0]
 80072dc:	e31a      	b.n	8007914 <_dtoa_r+0xb34>
 80072de:	07e2      	lsls	r2, r4, #31
 80072e0:	d505      	bpl.n	80072ee <_dtoa_r+0x50e>
 80072e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072e6:	f7f9 f997 	bl	8000618 <__aeabi_dmul>
 80072ea:	3601      	adds	r6, #1
 80072ec:	2301      	movs	r3, #1
 80072ee:	1064      	asrs	r4, r4, #1
 80072f0:	3508      	adds	r5, #8
 80072f2:	e73f      	b.n	8007174 <_dtoa_r+0x394>
 80072f4:	2602      	movs	r6, #2
 80072f6:	e742      	b.n	800717e <_dtoa_r+0x39e>
 80072f8:	9c07      	ldr	r4, [sp, #28]
 80072fa:	9704      	str	r7, [sp, #16]
 80072fc:	e761      	b.n	80071c2 <_dtoa_r+0x3e2>
 80072fe:	4b27      	ldr	r3, [pc, #156]	@ (800739c <_dtoa_r+0x5bc>)
 8007300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007302:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007306:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800730a:	4454      	add	r4, sl
 800730c:	2900      	cmp	r1, #0
 800730e:	d053      	beq.n	80073b8 <_dtoa_r+0x5d8>
 8007310:	4928      	ldr	r1, [pc, #160]	@ (80073b4 <_dtoa_r+0x5d4>)
 8007312:	2000      	movs	r0, #0
 8007314:	f7f9 faaa 	bl	800086c <__aeabi_ddiv>
 8007318:	4633      	mov	r3, r6
 800731a:	462a      	mov	r2, r5
 800731c:	f7f8 ffc4 	bl	80002a8 <__aeabi_dsub>
 8007320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007324:	4656      	mov	r6, sl
 8007326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800732a:	f7f9 fc25 	bl	8000b78 <__aeabi_d2iz>
 800732e:	4605      	mov	r5, r0
 8007330:	f7f9 f908 	bl	8000544 <__aeabi_i2d>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800733c:	f7f8 ffb4 	bl	80002a8 <__aeabi_dsub>
 8007340:	3530      	adds	r5, #48	@ 0x30
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800734a:	f806 5b01 	strb.w	r5, [r6], #1
 800734e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007352:	f7f9 fbd3 	bl	8000afc <__aeabi_dcmplt>
 8007356:	2800      	cmp	r0, #0
 8007358:	d171      	bne.n	800743e <_dtoa_r+0x65e>
 800735a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800735e:	4911      	ldr	r1, [pc, #68]	@ (80073a4 <_dtoa_r+0x5c4>)
 8007360:	2000      	movs	r0, #0
 8007362:	f7f8 ffa1 	bl	80002a8 <__aeabi_dsub>
 8007366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800736a:	f7f9 fbc7 	bl	8000afc <__aeabi_dcmplt>
 800736e:	2800      	cmp	r0, #0
 8007370:	f040 8095 	bne.w	800749e <_dtoa_r+0x6be>
 8007374:	42a6      	cmp	r6, r4
 8007376:	f43f af50 	beq.w	800721a <_dtoa_r+0x43a>
 800737a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800737e:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <_dtoa_r+0x5c8>)
 8007380:	2200      	movs	r2, #0
 8007382:	f7f9 f949 	bl	8000618 <__aeabi_dmul>
 8007386:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <_dtoa_r+0x5c8>)
 8007388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800738c:	2200      	movs	r2, #0
 800738e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007392:	f7f9 f941 	bl	8000618 <__aeabi_dmul>
 8007396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800739a:	e7c4      	b.n	8007326 <_dtoa_r+0x546>
 800739c:	0800ae90 	.word	0x0800ae90
 80073a0:	0800ae68 	.word	0x0800ae68
 80073a4:	3ff00000 	.word	0x3ff00000
 80073a8:	40240000 	.word	0x40240000
 80073ac:	401c0000 	.word	0x401c0000
 80073b0:	40140000 	.word	0x40140000
 80073b4:	3fe00000 	.word	0x3fe00000
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7f9 f92c 	bl	8000618 <__aeabi_dmul>
 80073c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80073c6:	4656      	mov	r6, sl
 80073c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073cc:	f7f9 fbd4 	bl	8000b78 <__aeabi_d2iz>
 80073d0:	4605      	mov	r5, r0
 80073d2:	f7f9 f8b7 	bl	8000544 <__aeabi_i2d>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073de:	f7f8 ff63 	bl	80002a8 <__aeabi_dsub>
 80073e2:	3530      	adds	r5, #48	@ 0x30
 80073e4:	f806 5b01 	strb.w	r5, [r6], #1
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	42a6      	cmp	r6, r4
 80073ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073f2:	f04f 0200 	mov.w	r2, #0
 80073f6:	d124      	bne.n	8007442 <_dtoa_r+0x662>
 80073f8:	4bac      	ldr	r3, [pc, #688]	@ (80076ac <_dtoa_r+0x8cc>)
 80073fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073fe:	f7f8 ff55 	bl	80002ac <__adddf3>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800740a:	f7f9 fb95 	bl	8000b38 <__aeabi_dcmpgt>
 800740e:	2800      	cmp	r0, #0
 8007410:	d145      	bne.n	800749e <_dtoa_r+0x6be>
 8007412:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007416:	49a5      	ldr	r1, [pc, #660]	@ (80076ac <_dtoa_r+0x8cc>)
 8007418:	2000      	movs	r0, #0
 800741a:	f7f8 ff45 	bl	80002a8 <__aeabi_dsub>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007426:	f7f9 fb69 	bl	8000afc <__aeabi_dcmplt>
 800742a:	2800      	cmp	r0, #0
 800742c:	f43f aef5 	beq.w	800721a <_dtoa_r+0x43a>
 8007430:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007432:	1e73      	subs	r3, r6, #1
 8007434:	9315      	str	r3, [sp, #84]	@ 0x54
 8007436:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800743a:	2b30      	cmp	r3, #48	@ 0x30
 800743c:	d0f8      	beq.n	8007430 <_dtoa_r+0x650>
 800743e:	9f04      	ldr	r7, [sp, #16]
 8007440:	e73e      	b.n	80072c0 <_dtoa_r+0x4e0>
 8007442:	4b9b      	ldr	r3, [pc, #620]	@ (80076b0 <_dtoa_r+0x8d0>)
 8007444:	f7f9 f8e8 	bl	8000618 <__aeabi_dmul>
 8007448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800744c:	e7bc      	b.n	80073c8 <_dtoa_r+0x5e8>
 800744e:	d10c      	bne.n	800746a <_dtoa_r+0x68a>
 8007450:	4b98      	ldr	r3, [pc, #608]	@ (80076b4 <_dtoa_r+0x8d4>)
 8007452:	2200      	movs	r2, #0
 8007454:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007458:	f7f9 f8de 	bl	8000618 <__aeabi_dmul>
 800745c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007460:	f7f9 fb60 	bl	8000b24 <__aeabi_dcmpge>
 8007464:	2800      	cmp	r0, #0
 8007466:	f000 8157 	beq.w	8007718 <_dtoa_r+0x938>
 800746a:	2400      	movs	r4, #0
 800746c:	4625      	mov	r5, r4
 800746e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007470:	43db      	mvns	r3, r3
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	4656      	mov	r6, sl
 8007476:	2700      	movs	r7, #0
 8007478:	4621      	mov	r1, r4
 800747a:	4658      	mov	r0, fp
 800747c:	f000 fbb4 	bl	8007be8 <_Bfree>
 8007480:	2d00      	cmp	r5, #0
 8007482:	d0dc      	beq.n	800743e <_dtoa_r+0x65e>
 8007484:	b12f      	cbz	r7, 8007492 <_dtoa_r+0x6b2>
 8007486:	42af      	cmp	r7, r5
 8007488:	d003      	beq.n	8007492 <_dtoa_r+0x6b2>
 800748a:	4639      	mov	r1, r7
 800748c:	4658      	mov	r0, fp
 800748e:	f000 fbab 	bl	8007be8 <_Bfree>
 8007492:	4629      	mov	r1, r5
 8007494:	4658      	mov	r0, fp
 8007496:	f000 fba7 	bl	8007be8 <_Bfree>
 800749a:	e7d0      	b.n	800743e <_dtoa_r+0x65e>
 800749c:	9704      	str	r7, [sp, #16]
 800749e:	4633      	mov	r3, r6
 80074a0:	461e      	mov	r6, r3
 80074a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074a6:	2a39      	cmp	r2, #57	@ 0x39
 80074a8:	d107      	bne.n	80074ba <_dtoa_r+0x6da>
 80074aa:	459a      	cmp	sl, r3
 80074ac:	d1f8      	bne.n	80074a0 <_dtoa_r+0x6c0>
 80074ae:	9a04      	ldr	r2, [sp, #16]
 80074b0:	3201      	adds	r2, #1
 80074b2:	9204      	str	r2, [sp, #16]
 80074b4:	2230      	movs	r2, #48	@ 0x30
 80074b6:	f88a 2000 	strb.w	r2, [sl]
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	3201      	adds	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	e7bd      	b.n	800743e <_dtoa_r+0x65e>
 80074c2:	4b7b      	ldr	r3, [pc, #492]	@ (80076b0 <_dtoa_r+0x8d0>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	f7f9 f8a7 	bl	8000618 <__aeabi_dmul>
 80074ca:	2200      	movs	r2, #0
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	460d      	mov	r5, r1
 80074d2:	f7f9 fb09 	bl	8000ae8 <__aeabi_dcmpeq>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f43f aebb 	beq.w	8007252 <_dtoa_r+0x472>
 80074dc:	e6f0      	b.n	80072c0 <_dtoa_r+0x4e0>
 80074de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80074e0:	2a00      	cmp	r2, #0
 80074e2:	f000 80db 	beq.w	800769c <_dtoa_r+0x8bc>
 80074e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074e8:	2a01      	cmp	r2, #1
 80074ea:	f300 80bf 	bgt.w	800766c <_dtoa_r+0x88c>
 80074ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	f000 80b7 	beq.w	8007664 <_dtoa_r+0x884>
 80074f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80074fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074fc:	4646      	mov	r6, r8
 80074fe:	9a08      	ldr	r2, [sp, #32]
 8007500:	2101      	movs	r1, #1
 8007502:	441a      	add	r2, r3
 8007504:	4658      	mov	r0, fp
 8007506:	4498      	add	r8, r3
 8007508:	9208      	str	r2, [sp, #32]
 800750a:	f000 fc6b 	bl	8007de4 <__i2b>
 800750e:	4605      	mov	r5, r0
 8007510:	b15e      	cbz	r6, 800752a <_dtoa_r+0x74a>
 8007512:	9b08      	ldr	r3, [sp, #32]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dd08      	ble.n	800752a <_dtoa_r+0x74a>
 8007518:	42b3      	cmp	r3, r6
 800751a:	9a08      	ldr	r2, [sp, #32]
 800751c:	bfa8      	it	ge
 800751e:	4633      	movge	r3, r6
 8007520:	eba8 0803 	sub.w	r8, r8, r3
 8007524:	1af6      	subs	r6, r6, r3
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800752c:	b1f3      	cbz	r3, 800756c <_dtoa_r+0x78c>
 800752e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80b7 	beq.w	80076a4 <_dtoa_r+0x8c4>
 8007536:	b18c      	cbz	r4, 800755c <_dtoa_r+0x77c>
 8007538:	4629      	mov	r1, r5
 800753a:	4622      	mov	r2, r4
 800753c:	4658      	mov	r0, fp
 800753e:	f000 fd11 	bl	8007f64 <__pow5mult>
 8007542:	464a      	mov	r2, r9
 8007544:	4601      	mov	r1, r0
 8007546:	4605      	mov	r5, r0
 8007548:	4658      	mov	r0, fp
 800754a:	f000 fc61 	bl	8007e10 <__multiply>
 800754e:	4649      	mov	r1, r9
 8007550:	9004      	str	r0, [sp, #16]
 8007552:	4658      	mov	r0, fp
 8007554:	f000 fb48 	bl	8007be8 <_Bfree>
 8007558:	9b04      	ldr	r3, [sp, #16]
 800755a:	4699      	mov	r9, r3
 800755c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755e:	1b1a      	subs	r2, r3, r4
 8007560:	d004      	beq.n	800756c <_dtoa_r+0x78c>
 8007562:	4649      	mov	r1, r9
 8007564:	4658      	mov	r0, fp
 8007566:	f000 fcfd 	bl	8007f64 <__pow5mult>
 800756a:	4681      	mov	r9, r0
 800756c:	2101      	movs	r1, #1
 800756e:	4658      	mov	r0, fp
 8007570:	f000 fc38 	bl	8007de4 <__i2b>
 8007574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007576:	4604      	mov	r4, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 81cf 	beq.w	800791c <_dtoa_r+0xb3c>
 800757e:	461a      	mov	r2, r3
 8007580:	4601      	mov	r1, r0
 8007582:	4658      	mov	r0, fp
 8007584:	f000 fcee 	bl	8007f64 <__pow5mult>
 8007588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800758a:	2b01      	cmp	r3, #1
 800758c:	4604      	mov	r4, r0
 800758e:	f300 8095 	bgt.w	80076bc <_dtoa_r+0x8dc>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f040 8087 	bne.w	80076a8 <_dtoa_r+0x8c8>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f040 8089 	bne.w	80076b8 <_dtoa_r+0x8d8>
 80075a6:	9b03      	ldr	r3, [sp, #12]
 80075a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075ac:	0d1b      	lsrs	r3, r3, #20
 80075ae:	051b      	lsls	r3, r3, #20
 80075b0:	b12b      	cbz	r3, 80075be <_dtoa_r+0x7de>
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	3301      	adds	r3, #1
 80075b6:	9308      	str	r3, [sp, #32]
 80075b8:	f108 0801 	add.w	r8, r8, #1
 80075bc:	2301      	movs	r3, #1
 80075be:	930a      	str	r3, [sp, #40]	@ 0x28
 80075c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 81b0 	beq.w	8007928 <_dtoa_r+0xb48>
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075ce:	6918      	ldr	r0, [r3, #16]
 80075d0:	f000 fbbc 	bl	8007d4c <__hi0bits>
 80075d4:	f1c0 0020 	rsb	r0, r0, #32
 80075d8:	9b08      	ldr	r3, [sp, #32]
 80075da:	4418      	add	r0, r3
 80075dc:	f010 001f 	ands.w	r0, r0, #31
 80075e0:	d077      	beq.n	80076d2 <_dtoa_r+0x8f2>
 80075e2:	f1c0 0320 	rsb	r3, r0, #32
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	dd6b      	ble.n	80076c2 <_dtoa_r+0x8e2>
 80075ea:	9b08      	ldr	r3, [sp, #32]
 80075ec:	f1c0 001c 	rsb	r0, r0, #28
 80075f0:	4403      	add	r3, r0
 80075f2:	4480      	add	r8, r0
 80075f4:	4406      	add	r6, r0
 80075f6:	9308      	str	r3, [sp, #32]
 80075f8:	f1b8 0f00 	cmp.w	r8, #0
 80075fc:	dd05      	ble.n	800760a <_dtoa_r+0x82a>
 80075fe:	4649      	mov	r1, r9
 8007600:	4642      	mov	r2, r8
 8007602:	4658      	mov	r0, fp
 8007604:	f000 fd08 	bl	8008018 <__lshift>
 8007608:	4681      	mov	r9, r0
 800760a:	9b08      	ldr	r3, [sp, #32]
 800760c:	2b00      	cmp	r3, #0
 800760e:	dd05      	ble.n	800761c <_dtoa_r+0x83c>
 8007610:	4621      	mov	r1, r4
 8007612:	461a      	mov	r2, r3
 8007614:	4658      	mov	r0, fp
 8007616:	f000 fcff 	bl	8008018 <__lshift>
 800761a:	4604      	mov	r4, r0
 800761c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800761e:	2b00      	cmp	r3, #0
 8007620:	d059      	beq.n	80076d6 <_dtoa_r+0x8f6>
 8007622:	4621      	mov	r1, r4
 8007624:	4648      	mov	r0, r9
 8007626:	f000 fd63 	bl	80080f0 <__mcmp>
 800762a:	2800      	cmp	r0, #0
 800762c:	da53      	bge.n	80076d6 <_dtoa_r+0x8f6>
 800762e:	1e7b      	subs	r3, r7, #1
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	4649      	mov	r1, r9
 8007634:	2300      	movs	r3, #0
 8007636:	220a      	movs	r2, #10
 8007638:	4658      	mov	r0, fp
 800763a:	f000 faf7 	bl	8007c2c <__multadd>
 800763e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007640:	4681      	mov	r9, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8172 	beq.w	800792c <_dtoa_r+0xb4c>
 8007648:	2300      	movs	r3, #0
 800764a:	4629      	mov	r1, r5
 800764c:	220a      	movs	r2, #10
 800764e:	4658      	mov	r0, fp
 8007650:	f000 faec 	bl	8007c2c <__multadd>
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	4605      	mov	r5, r0
 800765a:	dc67      	bgt.n	800772c <_dtoa_r+0x94c>
 800765c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800765e:	2b02      	cmp	r3, #2
 8007660:	dc41      	bgt.n	80076e6 <_dtoa_r+0x906>
 8007662:	e063      	b.n	800772c <_dtoa_r+0x94c>
 8007664:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007666:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800766a:	e746      	b.n	80074fa <_dtoa_r+0x71a>
 800766c:	9b07      	ldr	r3, [sp, #28]
 800766e:	1e5c      	subs	r4, r3, #1
 8007670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007672:	42a3      	cmp	r3, r4
 8007674:	bfbf      	itttt	lt
 8007676:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007678:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800767a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800767c:	1ae3      	sublt	r3, r4, r3
 800767e:	bfb4      	ite	lt
 8007680:	18d2      	addlt	r2, r2, r3
 8007682:	1b1c      	subge	r4, r3, r4
 8007684:	9b07      	ldr	r3, [sp, #28]
 8007686:	bfbc      	itt	lt
 8007688:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800768a:	2400      	movlt	r4, #0
 800768c:	2b00      	cmp	r3, #0
 800768e:	bfb5      	itete	lt
 8007690:	eba8 0603 	sublt.w	r6, r8, r3
 8007694:	9b07      	ldrge	r3, [sp, #28]
 8007696:	2300      	movlt	r3, #0
 8007698:	4646      	movge	r6, r8
 800769a:	e730      	b.n	80074fe <_dtoa_r+0x71e>
 800769c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800769e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80076a0:	4646      	mov	r6, r8
 80076a2:	e735      	b.n	8007510 <_dtoa_r+0x730>
 80076a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076a6:	e75c      	b.n	8007562 <_dtoa_r+0x782>
 80076a8:	2300      	movs	r3, #0
 80076aa:	e788      	b.n	80075be <_dtoa_r+0x7de>
 80076ac:	3fe00000 	.word	0x3fe00000
 80076b0:	40240000 	.word	0x40240000
 80076b4:	40140000 	.word	0x40140000
 80076b8:	9b02      	ldr	r3, [sp, #8]
 80076ba:	e780      	b.n	80075be <_dtoa_r+0x7de>
 80076bc:	2300      	movs	r3, #0
 80076be:	930a      	str	r3, [sp, #40]	@ 0x28
 80076c0:	e782      	b.n	80075c8 <_dtoa_r+0x7e8>
 80076c2:	d099      	beq.n	80075f8 <_dtoa_r+0x818>
 80076c4:	9a08      	ldr	r2, [sp, #32]
 80076c6:	331c      	adds	r3, #28
 80076c8:	441a      	add	r2, r3
 80076ca:	4498      	add	r8, r3
 80076cc:	441e      	add	r6, r3
 80076ce:	9208      	str	r2, [sp, #32]
 80076d0:	e792      	b.n	80075f8 <_dtoa_r+0x818>
 80076d2:	4603      	mov	r3, r0
 80076d4:	e7f6      	b.n	80076c4 <_dtoa_r+0x8e4>
 80076d6:	9b07      	ldr	r3, [sp, #28]
 80076d8:	9704      	str	r7, [sp, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dc20      	bgt.n	8007720 <_dtoa_r+0x940>
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	dd1e      	ble.n	8007724 <_dtoa_r+0x944>
 80076e6:	9b00      	ldr	r3, [sp, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f47f aec0 	bne.w	800746e <_dtoa_r+0x68e>
 80076ee:	4621      	mov	r1, r4
 80076f0:	2205      	movs	r2, #5
 80076f2:	4658      	mov	r0, fp
 80076f4:	f000 fa9a 	bl	8007c2c <__multadd>
 80076f8:	4601      	mov	r1, r0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4648      	mov	r0, r9
 80076fe:	f000 fcf7 	bl	80080f0 <__mcmp>
 8007702:	2800      	cmp	r0, #0
 8007704:	f77f aeb3 	ble.w	800746e <_dtoa_r+0x68e>
 8007708:	4656      	mov	r6, sl
 800770a:	2331      	movs	r3, #49	@ 0x31
 800770c:	f806 3b01 	strb.w	r3, [r6], #1
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	3301      	adds	r3, #1
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	e6ae      	b.n	8007476 <_dtoa_r+0x696>
 8007718:	9c07      	ldr	r4, [sp, #28]
 800771a:	9704      	str	r7, [sp, #16]
 800771c:	4625      	mov	r5, r4
 800771e:	e7f3      	b.n	8007708 <_dtoa_r+0x928>
 8007720:	9b07      	ldr	r3, [sp, #28]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 8104 	beq.w	8007934 <_dtoa_r+0xb54>
 800772c:	2e00      	cmp	r6, #0
 800772e:	dd05      	ble.n	800773c <_dtoa_r+0x95c>
 8007730:	4629      	mov	r1, r5
 8007732:	4632      	mov	r2, r6
 8007734:	4658      	mov	r0, fp
 8007736:	f000 fc6f 	bl	8008018 <__lshift>
 800773a:	4605      	mov	r5, r0
 800773c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800773e:	2b00      	cmp	r3, #0
 8007740:	d05a      	beq.n	80077f8 <_dtoa_r+0xa18>
 8007742:	6869      	ldr	r1, [r5, #4]
 8007744:	4658      	mov	r0, fp
 8007746:	f000 fa0f 	bl	8007b68 <_Balloc>
 800774a:	4606      	mov	r6, r0
 800774c:	b928      	cbnz	r0, 800775a <_dtoa_r+0x97a>
 800774e:	4b84      	ldr	r3, [pc, #528]	@ (8007960 <_dtoa_r+0xb80>)
 8007750:	4602      	mov	r2, r0
 8007752:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007756:	f7ff bb5a 	b.w	8006e0e <_dtoa_r+0x2e>
 800775a:	692a      	ldr	r2, [r5, #16]
 800775c:	3202      	adds	r2, #2
 800775e:	0092      	lsls	r2, r2, #2
 8007760:	f105 010c 	add.w	r1, r5, #12
 8007764:	300c      	adds	r0, #12
 8007766:	f002 fdad 	bl	800a2c4 <memcpy>
 800776a:	2201      	movs	r2, #1
 800776c:	4631      	mov	r1, r6
 800776e:	4658      	mov	r0, fp
 8007770:	f000 fc52 	bl	8008018 <__lshift>
 8007774:	f10a 0301 	add.w	r3, sl, #1
 8007778:	9307      	str	r3, [sp, #28]
 800777a:	9b00      	ldr	r3, [sp, #0]
 800777c:	4453      	add	r3, sl
 800777e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007780:	9b02      	ldr	r3, [sp, #8]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	462f      	mov	r7, r5
 8007788:	930a      	str	r3, [sp, #40]	@ 0x28
 800778a:	4605      	mov	r5, r0
 800778c:	9b07      	ldr	r3, [sp, #28]
 800778e:	4621      	mov	r1, r4
 8007790:	3b01      	subs	r3, #1
 8007792:	4648      	mov	r0, r9
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	f7ff fa99 	bl	8006ccc <quorem>
 800779a:	4639      	mov	r1, r7
 800779c:	9002      	str	r0, [sp, #8]
 800779e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077a2:	4648      	mov	r0, r9
 80077a4:	f000 fca4 	bl	80080f0 <__mcmp>
 80077a8:	462a      	mov	r2, r5
 80077aa:	9008      	str	r0, [sp, #32]
 80077ac:	4621      	mov	r1, r4
 80077ae:	4658      	mov	r0, fp
 80077b0:	f000 fcba 	bl	8008128 <__mdiff>
 80077b4:	68c2      	ldr	r2, [r0, #12]
 80077b6:	4606      	mov	r6, r0
 80077b8:	bb02      	cbnz	r2, 80077fc <_dtoa_r+0xa1c>
 80077ba:	4601      	mov	r1, r0
 80077bc:	4648      	mov	r0, r9
 80077be:	f000 fc97 	bl	80080f0 <__mcmp>
 80077c2:	4602      	mov	r2, r0
 80077c4:	4631      	mov	r1, r6
 80077c6:	4658      	mov	r0, fp
 80077c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80077ca:	f000 fa0d 	bl	8007be8 <_Bfree>
 80077ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077d2:	9e07      	ldr	r6, [sp, #28]
 80077d4:	ea43 0102 	orr.w	r1, r3, r2
 80077d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077da:	4319      	orrs	r1, r3
 80077dc:	d110      	bne.n	8007800 <_dtoa_r+0xa20>
 80077de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077e2:	d029      	beq.n	8007838 <_dtoa_r+0xa58>
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	dd02      	ble.n	80077f0 <_dtoa_r+0xa10>
 80077ea:	9b02      	ldr	r3, [sp, #8]
 80077ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80077f0:	9b00      	ldr	r3, [sp, #0]
 80077f2:	f883 8000 	strb.w	r8, [r3]
 80077f6:	e63f      	b.n	8007478 <_dtoa_r+0x698>
 80077f8:	4628      	mov	r0, r5
 80077fa:	e7bb      	b.n	8007774 <_dtoa_r+0x994>
 80077fc:	2201      	movs	r2, #1
 80077fe:	e7e1      	b.n	80077c4 <_dtoa_r+0x9e4>
 8007800:	9b08      	ldr	r3, [sp, #32]
 8007802:	2b00      	cmp	r3, #0
 8007804:	db04      	blt.n	8007810 <_dtoa_r+0xa30>
 8007806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007808:	430b      	orrs	r3, r1
 800780a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800780c:	430b      	orrs	r3, r1
 800780e:	d120      	bne.n	8007852 <_dtoa_r+0xa72>
 8007810:	2a00      	cmp	r2, #0
 8007812:	dded      	ble.n	80077f0 <_dtoa_r+0xa10>
 8007814:	4649      	mov	r1, r9
 8007816:	2201      	movs	r2, #1
 8007818:	4658      	mov	r0, fp
 800781a:	f000 fbfd 	bl	8008018 <__lshift>
 800781e:	4621      	mov	r1, r4
 8007820:	4681      	mov	r9, r0
 8007822:	f000 fc65 	bl	80080f0 <__mcmp>
 8007826:	2800      	cmp	r0, #0
 8007828:	dc03      	bgt.n	8007832 <_dtoa_r+0xa52>
 800782a:	d1e1      	bne.n	80077f0 <_dtoa_r+0xa10>
 800782c:	f018 0f01 	tst.w	r8, #1
 8007830:	d0de      	beq.n	80077f0 <_dtoa_r+0xa10>
 8007832:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007836:	d1d8      	bne.n	80077ea <_dtoa_r+0xa0a>
 8007838:	9a00      	ldr	r2, [sp, #0]
 800783a:	2339      	movs	r3, #57	@ 0x39
 800783c:	7013      	strb	r3, [r2, #0]
 800783e:	4633      	mov	r3, r6
 8007840:	461e      	mov	r6, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007848:	2a39      	cmp	r2, #57	@ 0x39
 800784a:	d052      	beq.n	80078f2 <_dtoa_r+0xb12>
 800784c:	3201      	adds	r2, #1
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	e612      	b.n	8007478 <_dtoa_r+0x698>
 8007852:	2a00      	cmp	r2, #0
 8007854:	dd07      	ble.n	8007866 <_dtoa_r+0xa86>
 8007856:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800785a:	d0ed      	beq.n	8007838 <_dtoa_r+0xa58>
 800785c:	9a00      	ldr	r2, [sp, #0]
 800785e:	f108 0301 	add.w	r3, r8, #1
 8007862:	7013      	strb	r3, [r2, #0]
 8007864:	e608      	b.n	8007478 <_dtoa_r+0x698>
 8007866:	9b07      	ldr	r3, [sp, #28]
 8007868:	9a07      	ldr	r2, [sp, #28]
 800786a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800786e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007870:	4293      	cmp	r3, r2
 8007872:	d028      	beq.n	80078c6 <_dtoa_r+0xae6>
 8007874:	4649      	mov	r1, r9
 8007876:	2300      	movs	r3, #0
 8007878:	220a      	movs	r2, #10
 800787a:	4658      	mov	r0, fp
 800787c:	f000 f9d6 	bl	8007c2c <__multadd>
 8007880:	42af      	cmp	r7, r5
 8007882:	4681      	mov	r9, r0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	f04f 020a 	mov.w	r2, #10
 800788c:	4639      	mov	r1, r7
 800788e:	4658      	mov	r0, fp
 8007890:	d107      	bne.n	80078a2 <_dtoa_r+0xac2>
 8007892:	f000 f9cb 	bl	8007c2c <__multadd>
 8007896:	4607      	mov	r7, r0
 8007898:	4605      	mov	r5, r0
 800789a:	9b07      	ldr	r3, [sp, #28]
 800789c:	3301      	adds	r3, #1
 800789e:	9307      	str	r3, [sp, #28]
 80078a0:	e774      	b.n	800778c <_dtoa_r+0x9ac>
 80078a2:	f000 f9c3 	bl	8007c2c <__multadd>
 80078a6:	4629      	mov	r1, r5
 80078a8:	4607      	mov	r7, r0
 80078aa:	2300      	movs	r3, #0
 80078ac:	220a      	movs	r2, #10
 80078ae:	4658      	mov	r0, fp
 80078b0:	f000 f9bc 	bl	8007c2c <__multadd>
 80078b4:	4605      	mov	r5, r0
 80078b6:	e7f0      	b.n	800789a <_dtoa_r+0xaba>
 80078b8:	9b00      	ldr	r3, [sp, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfcc      	ite	gt
 80078be:	461e      	movgt	r6, r3
 80078c0:	2601      	movle	r6, #1
 80078c2:	4456      	add	r6, sl
 80078c4:	2700      	movs	r7, #0
 80078c6:	4649      	mov	r1, r9
 80078c8:	2201      	movs	r2, #1
 80078ca:	4658      	mov	r0, fp
 80078cc:	f000 fba4 	bl	8008018 <__lshift>
 80078d0:	4621      	mov	r1, r4
 80078d2:	4681      	mov	r9, r0
 80078d4:	f000 fc0c 	bl	80080f0 <__mcmp>
 80078d8:	2800      	cmp	r0, #0
 80078da:	dcb0      	bgt.n	800783e <_dtoa_r+0xa5e>
 80078dc:	d102      	bne.n	80078e4 <_dtoa_r+0xb04>
 80078de:	f018 0f01 	tst.w	r8, #1
 80078e2:	d1ac      	bne.n	800783e <_dtoa_r+0xa5e>
 80078e4:	4633      	mov	r3, r6
 80078e6:	461e      	mov	r6, r3
 80078e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ec:	2a30      	cmp	r2, #48	@ 0x30
 80078ee:	d0fa      	beq.n	80078e6 <_dtoa_r+0xb06>
 80078f0:	e5c2      	b.n	8007478 <_dtoa_r+0x698>
 80078f2:	459a      	cmp	sl, r3
 80078f4:	d1a4      	bne.n	8007840 <_dtoa_r+0xa60>
 80078f6:	9b04      	ldr	r3, [sp, #16]
 80078f8:	3301      	adds	r3, #1
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	2331      	movs	r3, #49	@ 0x31
 80078fe:	f88a 3000 	strb.w	r3, [sl]
 8007902:	e5b9      	b.n	8007478 <_dtoa_r+0x698>
 8007904:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007906:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007964 <_dtoa_r+0xb84>
 800790a:	b11b      	cbz	r3, 8007914 <_dtoa_r+0xb34>
 800790c:	f10a 0308 	add.w	r3, sl, #8
 8007910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	4650      	mov	r0, sl
 8007916:	b019      	add	sp, #100	@ 0x64
 8007918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791e:	2b01      	cmp	r3, #1
 8007920:	f77f ae37 	ble.w	8007592 <_dtoa_r+0x7b2>
 8007924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007926:	930a      	str	r3, [sp, #40]	@ 0x28
 8007928:	2001      	movs	r0, #1
 800792a:	e655      	b.n	80075d8 <_dtoa_r+0x7f8>
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f77f aed6 	ble.w	80076e0 <_dtoa_r+0x900>
 8007934:	4656      	mov	r6, sl
 8007936:	4621      	mov	r1, r4
 8007938:	4648      	mov	r0, r9
 800793a:	f7ff f9c7 	bl	8006ccc <quorem>
 800793e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007942:	f806 8b01 	strb.w	r8, [r6], #1
 8007946:	9b00      	ldr	r3, [sp, #0]
 8007948:	eba6 020a 	sub.w	r2, r6, sl
 800794c:	4293      	cmp	r3, r2
 800794e:	ddb3      	ble.n	80078b8 <_dtoa_r+0xad8>
 8007950:	4649      	mov	r1, r9
 8007952:	2300      	movs	r3, #0
 8007954:	220a      	movs	r2, #10
 8007956:	4658      	mov	r0, fp
 8007958:	f000 f968 	bl	8007c2c <__multadd>
 800795c:	4681      	mov	r9, r0
 800795e:	e7ea      	b.n	8007936 <_dtoa_r+0xb56>
 8007960:	0800adef 	.word	0x0800adef
 8007964:	0800ad73 	.word	0x0800ad73

08007968 <_free_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4605      	mov	r5, r0
 800796c:	2900      	cmp	r1, #0
 800796e:	d041      	beq.n	80079f4 <_free_r+0x8c>
 8007970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007974:	1f0c      	subs	r4, r1, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	bfb8      	it	lt
 800797a:	18e4      	addlt	r4, r4, r3
 800797c:	f000 f8e8 	bl	8007b50 <__malloc_lock>
 8007980:	4a1d      	ldr	r2, [pc, #116]	@ (80079f8 <_free_r+0x90>)
 8007982:	6813      	ldr	r3, [r2, #0]
 8007984:	b933      	cbnz	r3, 8007994 <_free_r+0x2c>
 8007986:	6063      	str	r3, [r4, #4]
 8007988:	6014      	str	r4, [r2, #0]
 800798a:	4628      	mov	r0, r5
 800798c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007990:	f000 b8e4 	b.w	8007b5c <__malloc_unlock>
 8007994:	42a3      	cmp	r3, r4
 8007996:	d908      	bls.n	80079aa <_free_r+0x42>
 8007998:	6820      	ldr	r0, [r4, #0]
 800799a:	1821      	adds	r1, r4, r0
 800799c:	428b      	cmp	r3, r1
 800799e:	bf01      	itttt	eq
 80079a0:	6819      	ldreq	r1, [r3, #0]
 80079a2:	685b      	ldreq	r3, [r3, #4]
 80079a4:	1809      	addeq	r1, r1, r0
 80079a6:	6021      	streq	r1, [r4, #0]
 80079a8:	e7ed      	b.n	8007986 <_free_r+0x1e>
 80079aa:	461a      	mov	r2, r3
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	b10b      	cbz	r3, 80079b4 <_free_r+0x4c>
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	d9fa      	bls.n	80079aa <_free_r+0x42>
 80079b4:	6811      	ldr	r1, [r2, #0]
 80079b6:	1850      	adds	r0, r2, r1
 80079b8:	42a0      	cmp	r0, r4
 80079ba:	d10b      	bne.n	80079d4 <_free_r+0x6c>
 80079bc:	6820      	ldr	r0, [r4, #0]
 80079be:	4401      	add	r1, r0
 80079c0:	1850      	adds	r0, r2, r1
 80079c2:	4283      	cmp	r3, r0
 80079c4:	6011      	str	r1, [r2, #0]
 80079c6:	d1e0      	bne.n	800798a <_free_r+0x22>
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	6053      	str	r3, [r2, #4]
 80079ce:	4408      	add	r0, r1
 80079d0:	6010      	str	r0, [r2, #0]
 80079d2:	e7da      	b.n	800798a <_free_r+0x22>
 80079d4:	d902      	bls.n	80079dc <_free_r+0x74>
 80079d6:	230c      	movs	r3, #12
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	e7d6      	b.n	800798a <_free_r+0x22>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	1821      	adds	r1, r4, r0
 80079e0:	428b      	cmp	r3, r1
 80079e2:	bf04      	itt	eq
 80079e4:	6819      	ldreq	r1, [r3, #0]
 80079e6:	685b      	ldreq	r3, [r3, #4]
 80079e8:	6063      	str	r3, [r4, #4]
 80079ea:	bf04      	itt	eq
 80079ec:	1809      	addeq	r1, r1, r0
 80079ee:	6021      	streq	r1, [r4, #0]
 80079f0:	6054      	str	r4, [r2, #4]
 80079f2:	e7ca      	b.n	800798a <_free_r+0x22>
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
 80079f6:	bf00      	nop
 80079f8:	200009cc 	.word	0x200009cc

080079fc <malloc>:
 80079fc:	4b02      	ldr	r3, [pc, #8]	@ (8007a08 <malloc+0xc>)
 80079fe:	4601      	mov	r1, r0
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	f000 b825 	b.w	8007a50 <_malloc_r>
 8007a06:	bf00      	nop
 8007a08:	20000018 	.word	0x20000018

08007a0c <sbrk_aligned>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a4c <sbrk_aligned+0x40>)
 8007a10:	460c      	mov	r4, r1
 8007a12:	6831      	ldr	r1, [r6, #0]
 8007a14:	4605      	mov	r5, r0
 8007a16:	b911      	cbnz	r1, 8007a1e <sbrk_aligned+0x12>
 8007a18:	f002 fc44 	bl	800a2a4 <_sbrk_r>
 8007a1c:	6030      	str	r0, [r6, #0]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f002 fc3f 	bl	800a2a4 <_sbrk_r>
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	d103      	bne.n	8007a32 <sbrk_aligned+0x26>
 8007a2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a2e:	4620      	mov	r0, r4
 8007a30:	bd70      	pop	{r4, r5, r6, pc}
 8007a32:	1cc4      	adds	r4, r0, #3
 8007a34:	f024 0403 	bic.w	r4, r4, #3
 8007a38:	42a0      	cmp	r0, r4
 8007a3a:	d0f8      	beq.n	8007a2e <sbrk_aligned+0x22>
 8007a3c:	1a21      	subs	r1, r4, r0
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f002 fc30 	bl	800a2a4 <_sbrk_r>
 8007a44:	3001      	adds	r0, #1
 8007a46:	d1f2      	bne.n	8007a2e <sbrk_aligned+0x22>
 8007a48:	e7ef      	b.n	8007a2a <sbrk_aligned+0x1e>
 8007a4a:	bf00      	nop
 8007a4c:	200009c8 	.word	0x200009c8

08007a50 <_malloc_r>:
 8007a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a54:	1ccd      	adds	r5, r1, #3
 8007a56:	f025 0503 	bic.w	r5, r5, #3
 8007a5a:	3508      	adds	r5, #8
 8007a5c:	2d0c      	cmp	r5, #12
 8007a5e:	bf38      	it	cc
 8007a60:	250c      	movcc	r5, #12
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	4606      	mov	r6, r0
 8007a66:	db01      	blt.n	8007a6c <_malloc_r+0x1c>
 8007a68:	42a9      	cmp	r1, r5
 8007a6a:	d904      	bls.n	8007a76 <_malloc_r+0x26>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	6033      	str	r3, [r6, #0]
 8007a70:	2000      	movs	r0, #0
 8007a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b4c <_malloc_r+0xfc>
 8007a7a:	f000 f869 	bl	8007b50 <__malloc_lock>
 8007a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a82:	461c      	mov	r4, r3
 8007a84:	bb44      	cbnz	r4, 8007ad8 <_malloc_r+0x88>
 8007a86:	4629      	mov	r1, r5
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7ff ffbf 	bl	8007a0c <sbrk_aligned>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	4604      	mov	r4, r0
 8007a92:	d158      	bne.n	8007b46 <_malloc_r+0xf6>
 8007a94:	f8d8 4000 	ldr.w	r4, [r8]
 8007a98:	4627      	mov	r7, r4
 8007a9a:	2f00      	cmp	r7, #0
 8007a9c:	d143      	bne.n	8007b26 <_malloc_r+0xd6>
 8007a9e:	2c00      	cmp	r4, #0
 8007aa0:	d04b      	beq.n	8007b3a <_malloc_r+0xea>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	eb04 0903 	add.w	r9, r4, r3
 8007aac:	f002 fbfa 	bl	800a2a4 <_sbrk_r>
 8007ab0:	4581      	cmp	r9, r0
 8007ab2:	d142      	bne.n	8007b3a <_malloc_r+0xea>
 8007ab4:	6821      	ldr	r1, [r4, #0]
 8007ab6:	1a6d      	subs	r5, r5, r1
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4630      	mov	r0, r6
 8007abc:	f7ff ffa6 	bl	8007a0c <sbrk_aligned>
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d03a      	beq.n	8007b3a <_malloc_r+0xea>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	442b      	add	r3, r5
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	f8d8 3000 	ldr.w	r3, [r8]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	bb62      	cbnz	r2, 8007b2c <_malloc_r+0xdc>
 8007ad2:	f8c8 7000 	str.w	r7, [r8]
 8007ad6:	e00f      	b.n	8007af8 <_malloc_r+0xa8>
 8007ad8:	6822      	ldr	r2, [r4, #0]
 8007ada:	1b52      	subs	r2, r2, r5
 8007adc:	d420      	bmi.n	8007b20 <_malloc_r+0xd0>
 8007ade:	2a0b      	cmp	r2, #11
 8007ae0:	d917      	bls.n	8007b12 <_malloc_r+0xc2>
 8007ae2:	1961      	adds	r1, r4, r5
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	6025      	str	r5, [r4, #0]
 8007ae8:	bf18      	it	ne
 8007aea:	6059      	strne	r1, [r3, #4]
 8007aec:	6863      	ldr	r3, [r4, #4]
 8007aee:	bf08      	it	eq
 8007af0:	f8c8 1000 	streq.w	r1, [r8]
 8007af4:	5162      	str	r2, [r4, r5]
 8007af6:	604b      	str	r3, [r1, #4]
 8007af8:	4630      	mov	r0, r6
 8007afa:	f000 f82f 	bl	8007b5c <__malloc_unlock>
 8007afe:	f104 000b 	add.w	r0, r4, #11
 8007b02:	1d23      	adds	r3, r4, #4
 8007b04:	f020 0007 	bic.w	r0, r0, #7
 8007b08:	1ac2      	subs	r2, r0, r3
 8007b0a:	bf1c      	itt	ne
 8007b0c:	1a1b      	subne	r3, r3, r0
 8007b0e:	50a3      	strne	r3, [r4, r2]
 8007b10:	e7af      	b.n	8007a72 <_malloc_r+0x22>
 8007b12:	6862      	ldr	r2, [r4, #4]
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	bf0c      	ite	eq
 8007b18:	f8c8 2000 	streq.w	r2, [r8]
 8007b1c:	605a      	strne	r2, [r3, #4]
 8007b1e:	e7eb      	b.n	8007af8 <_malloc_r+0xa8>
 8007b20:	4623      	mov	r3, r4
 8007b22:	6864      	ldr	r4, [r4, #4]
 8007b24:	e7ae      	b.n	8007a84 <_malloc_r+0x34>
 8007b26:	463c      	mov	r4, r7
 8007b28:	687f      	ldr	r7, [r7, #4]
 8007b2a:	e7b6      	b.n	8007a9a <_malloc_r+0x4a>
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	d1fb      	bne.n	8007b2c <_malloc_r+0xdc>
 8007b34:	2300      	movs	r3, #0
 8007b36:	6053      	str	r3, [r2, #4]
 8007b38:	e7de      	b.n	8007af8 <_malloc_r+0xa8>
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	6033      	str	r3, [r6, #0]
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f000 f80c 	bl	8007b5c <__malloc_unlock>
 8007b44:	e794      	b.n	8007a70 <_malloc_r+0x20>
 8007b46:	6005      	str	r5, [r0, #0]
 8007b48:	e7d6      	b.n	8007af8 <_malloc_r+0xa8>
 8007b4a:	bf00      	nop
 8007b4c:	200009cc 	.word	0x200009cc

08007b50 <__malloc_lock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	@ (8007b58 <__malloc_lock+0x8>)
 8007b52:	f7ff b8b2 	b.w	8006cba <__retarget_lock_acquire_recursive>
 8007b56:	bf00      	nop
 8007b58:	200009c4 	.word	0x200009c4

08007b5c <__malloc_unlock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	@ (8007b64 <__malloc_unlock+0x8>)
 8007b5e:	f7ff b8ad 	b.w	8006cbc <__retarget_lock_release_recursive>
 8007b62:	bf00      	nop
 8007b64:	200009c4 	.word	0x200009c4

08007b68 <_Balloc>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	69c6      	ldr	r6, [r0, #28]
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	b976      	cbnz	r6, 8007b90 <_Balloc+0x28>
 8007b72:	2010      	movs	r0, #16
 8007b74:	f7ff ff42 	bl	80079fc <malloc>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	61e0      	str	r0, [r4, #28]
 8007b7c:	b920      	cbnz	r0, 8007b88 <_Balloc+0x20>
 8007b7e:	4b18      	ldr	r3, [pc, #96]	@ (8007be0 <_Balloc+0x78>)
 8007b80:	4818      	ldr	r0, [pc, #96]	@ (8007be4 <_Balloc+0x7c>)
 8007b82:	216b      	movs	r1, #107	@ 0x6b
 8007b84:	f002 fbb4 	bl	800a2f0 <__assert_func>
 8007b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b8c:	6006      	str	r6, [r0, #0]
 8007b8e:	60c6      	str	r6, [r0, #12]
 8007b90:	69e6      	ldr	r6, [r4, #28]
 8007b92:	68f3      	ldr	r3, [r6, #12]
 8007b94:	b183      	cbz	r3, 8007bb8 <_Balloc+0x50>
 8007b96:	69e3      	ldr	r3, [r4, #28]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b9e:	b9b8      	cbnz	r0, 8007bd0 <_Balloc+0x68>
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ba6:	1d72      	adds	r2, r6, #5
 8007ba8:	0092      	lsls	r2, r2, #2
 8007baa:	4620      	mov	r0, r4
 8007bac:	f002 fbbe 	bl	800a32c <_calloc_r>
 8007bb0:	b160      	cbz	r0, 8007bcc <_Balloc+0x64>
 8007bb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bb6:	e00e      	b.n	8007bd6 <_Balloc+0x6e>
 8007bb8:	2221      	movs	r2, #33	@ 0x21
 8007bba:	2104      	movs	r1, #4
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f002 fbb5 	bl	800a32c <_calloc_r>
 8007bc2:	69e3      	ldr	r3, [r4, #28]
 8007bc4:	60f0      	str	r0, [r6, #12]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e4      	bne.n	8007b96 <_Balloc+0x2e>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	6802      	ldr	r2, [r0, #0]
 8007bd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bdc:	e7f7      	b.n	8007bce <_Balloc+0x66>
 8007bde:	bf00      	nop
 8007be0:	0800ad80 	.word	0x0800ad80
 8007be4:	0800ae00 	.word	0x0800ae00

08007be8 <_Bfree>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	69c6      	ldr	r6, [r0, #28]
 8007bec:	4605      	mov	r5, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	b976      	cbnz	r6, 8007c10 <_Bfree+0x28>
 8007bf2:	2010      	movs	r0, #16
 8007bf4:	f7ff ff02 	bl	80079fc <malloc>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	61e8      	str	r0, [r5, #28]
 8007bfc:	b920      	cbnz	r0, 8007c08 <_Bfree+0x20>
 8007bfe:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <_Bfree+0x3c>)
 8007c00:	4809      	ldr	r0, [pc, #36]	@ (8007c28 <_Bfree+0x40>)
 8007c02:	218f      	movs	r1, #143	@ 0x8f
 8007c04:	f002 fb74 	bl	800a2f0 <__assert_func>
 8007c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c0c:	6006      	str	r6, [r0, #0]
 8007c0e:	60c6      	str	r6, [r0, #12]
 8007c10:	b13c      	cbz	r4, 8007c22 <_Bfree+0x3a>
 8007c12:	69eb      	ldr	r3, [r5, #28]
 8007c14:	6862      	ldr	r2, [r4, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c1c:	6021      	str	r1, [r4, #0]
 8007c1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	0800ad80 	.word	0x0800ad80
 8007c28:	0800ae00 	.word	0x0800ae00

08007c2c <__multadd>:
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	690d      	ldr	r5, [r1, #16]
 8007c32:	4607      	mov	r7, r0
 8007c34:	460c      	mov	r4, r1
 8007c36:	461e      	mov	r6, r3
 8007c38:	f101 0c14 	add.w	ip, r1, #20
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c42:	b299      	uxth	r1, r3
 8007c44:	fb02 6101 	mla	r1, r2, r1, r6
 8007c48:	0c1e      	lsrs	r6, r3, #16
 8007c4a:	0c0b      	lsrs	r3, r1, #16
 8007c4c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c50:	b289      	uxth	r1, r1
 8007c52:	3001      	adds	r0, #1
 8007c54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c58:	4285      	cmp	r5, r0
 8007c5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c62:	dcec      	bgt.n	8007c3e <__multadd+0x12>
 8007c64:	b30e      	cbz	r6, 8007caa <__multadd+0x7e>
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	dc19      	bgt.n	8007ca0 <__multadd+0x74>
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	4638      	mov	r0, r7
 8007c70:	3101      	adds	r1, #1
 8007c72:	f7ff ff79 	bl	8007b68 <_Balloc>
 8007c76:	4680      	mov	r8, r0
 8007c78:	b928      	cbnz	r0, 8007c86 <__multadd+0x5a>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb0 <__multadd+0x84>)
 8007c7e:	480d      	ldr	r0, [pc, #52]	@ (8007cb4 <__multadd+0x88>)
 8007c80:	21ba      	movs	r1, #186	@ 0xba
 8007c82:	f002 fb35 	bl	800a2f0 <__assert_func>
 8007c86:	6922      	ldr	r2, [r4, #16]
 8007c88:	3202      	adds	r2, #2
 8007c8a:	f104 010c 	add.w	r1, r4, #12
 8007c8e:	0092      	lsls	r2, r2, #2
 8007c90:	300c      	adds	r0, #12
 8007c92:	f002 fb17 	bl	800a2c4 <memcpy>
 8007c96:	4621      	mov	r1, r4
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff ffa5 	bl	8007be8 <_Bfree>
 8007c9e:	4644      	mov	r4, r8
 8007ca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	615e      	str	r6, [r3, #20]
 8007ca8:	6125      	str	r5, [r4, #16]
 8007caa:	4620      	mov	r0, r4
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb0:	0800adef 	.word	0x0800adef
 8007cb4:	0800ae00 	.word	0x0800ae00

08007cb8 <__s2b>:
 8007cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	4615      	mov	r5, r2
 8007cc0:	461f      	mov	r7, r3
 8007cc2:	2209      	movs	r2, #9
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ccc:	2100      	movs	r1, #0
 8007cce:	2201      	movs	r2, #1
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	db09      	blt.n	8007ce8 <__s2b+0x30>
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f7ff ff47 	bl	8007b68 <_Balloc>
 8007cda:	b940      	cbnz	r0, 8007cee <__s2b+0x36>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	4b19      	ldr	r3, [pc, #100]	@ (8007d44 <__s2b+0x8c>)
 8007ce0:	4819      	ldr	r0, [pc, #100]	@ (8007d48 <__s2b+0x90>)
 8007ce2:	21d3      	movs	r1, #211	@ 0xd3
 8007ce4:	f002 fb04 	bl	800a2f0 <__assert_func>
 8007ce8:	0052      	lsls	r2, r2, #1
 8007cea:	3101      	adds	r1, #1
 8007cec:	e7f0      	b.n	8007cd0 <__s2b+0x18>
 8007cee:	9b08      	ldr	r3, [sp, #32]
 8007cf0:	6143      	str	r3, [r0, #20]
 8007cf2:	2d09      	cmp	r5, #9
 8007cf4:	f04f 0301 	mov.w	r3, #1
 8007cf8:	6103      	str	r3, [r0, #16]
 8007cfa:	dd16      	ble.n	8007d2a <__s2b+0x72>
 8007cfc:	f104 0909 	add.w	r9, r4, #9
 8007d00:	46c8      	mov	r8, r9
 8007d02:	442c      	add	r4, r5
 8007d04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d08:	4601      	mov	r1, r0
 8007d0a:	3b30      	subs	r3, #48	@ 0x30
 8007d0c:	220a      	movs	r2, #10
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7ff ff8c 	bl	8007c2c <__multadd>
 8007d14:	45a0      	cmp	r8, r4
 8007d16:	d1f5      	bne.n	8007d04 <__s2b+0x4c>
 8007d18:	f1a5 0408 	sub.w	r4, r5, #8
 8007d1c:	444c      	add	r4, r9
 8007d1e:	1b2d      	subs	r5, r5, r4
 8007d20:	1963      	adds	r3, r4, r5
 8007d22:	42bb      	cmp	r3, r7
 8007d24:	db04      	blt.n	8007d30 <__s2b+0x78>
 8007d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2a:	340a      	adds	r4, #10
 8007d2c:	2509      	movs	r5, #9
 8007d2e:	e7f6      	b.n	8007d1e <__s2b+0x66>
 8007d30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d34:	4601      	mov	r1, r0
 8007d36:	3b30      	subs	r3, #48	@ 0x30
 8007d38:	220a      	movs	r2, #10
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7ff ff76 	bl	8007c2c <__multadd>
 8007d40:	e7ee      	b.n	8007d20 <__s2b+0x68>
 8007d42:	bf00      	nop
 8007d44:	0800adef 	.word	0x0800adef
 8007d48:	0800ae00 	.word	0x0800ae00

08007d4c <__hi0bits>:
 8007d4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d50:	4603      	mov	r3, r0
 8007d52:	bf36      	itet	cc
 8007d54:	0403      	lslcc	r3, r0, #16
 8007d56:	2000      	movcs	r0, #0
 8007d58:	2010      	movcc	r0, #16
 8007d5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d5e:	bf3c      	itt	cc
 8007d60:	021b      	lslcc	r3, r3, #8
 8007d62:	3008      	addcc	r0, #8
 8007d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d68:	bf3c      	itt	cc
 8007d6a:	011b      	lslcc	r3, r3, #4
 8007d6c:	3004      	addcc	r0, #4
 8007d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d72:	bf3c      	itt	cc
 8007d74:	009b      	lslcc	r3, r3, #2
 8007d76:	3002      	addcc	r0, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	db05      	blt.n	8007d88 <__hi0bits+0x3c>
 8007d7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d80:	f100 0001 	add.w	r0, r0, #1
 8007d84:	bf08      	it	eq
 8007d86:	2020      	moveq	r0, #32
 8007d88:	4770      	bx	lr

08007d8a <__lo0bits>:
 8007d8a:	6803      	ldr	r3, [r0, #0]
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	f013 0007 	ands.w	r0, r3, #7
 8007d92:	d00b      	beq.n	8007dac <__lo0bits+0x22>
 8007d94:	07d9      	lsls	r1, r3, #31
 8007d96:	d421      	bmi.n	8007ddc <__lo0bits+0x52>
 8007d98:	0798      	lsls	r0, r3, #30
 8007d9a:	bf49      	itett	mi
 8007d9c:	085b      	lsrmi	r3, r3, #1
 8007d9e:	089b      	lsrpl	r3, r3, #2
 8007da0:	2001      	movmi	r0, #1
 8007da2:	6013      	strmi	r3, [r2, #0]
 8007da4:	bf5c      	itt	pl
 8007da6:	6013      	strpl	r3, [r2, #0]
 8007da8:	2002      	movpl	r0, #2
 8007daa:	4770      	bx	lr
 8007dac:	b299      	uxth	r1, r3
 8007dae:	b909      	cbnz	r1, 8007db4 <__lo0bits+0x2a>
 8007db0:	0c1b      	lsrs	r3, r3, #16
 8007db2:	2010      	movs	r0, #16
 8007db4:	b2d9      	uxtb	r1, r3
 8007db6:	b909      	cbnz	r1, 8007dbc <__lo0bits+0x32>
 8007db8:	3008      	adds	r0, #8
 8007dba:	0a1b      	lsrs	r3, r3, #8
 8007dbc:	0719      	lsls	r1, r3, #28
 8007dbe:	bf04      	itt	eq
 8007dc0:	091b      	lsreq	r3, r3, #4
 8007dc2:	3004      	addeq	r0, #4
 8007dc4:	0799      	lsls	r1, r3, #30
 8007dc6:	bf04      	itt	eq
 8007dc8:	089b      	lsreq	r3, r3, #2
 8007dca:	3002      	addeq	r0, #2
 8007dcc:	07d9      	lsls	r1, r3, #31
 8007dce:	d403      	bmi.n	8007dd8 <__lo0bits+0x4e>
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	f100 0001 	add.w	r0, r0, #1
 8007dd6:	d003      	beq.n	8007de0 <__lo0bits+0x56>
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	4770      	bx	lr
 8007ddc:	2000      	movs	r0, #0
 8007dde:	4770      	bx	lr
 8007de0:	2020      	movs	r0, #32
 8007de2:	4770      	bx	lr

08007de4 <__i2b>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	460c      	mov	r4, r1
 8007de8:	2101      	movs	r1, #1
 8007dea:	f7ff febd 	bl	8007b68 <_Balloc>
 8007dee:	4602      	mov	r2, r0
 8007df0:	b928      	cbnz	r0, 8007dfe <__i2b+0x1a>
 8007df2:	4b05      	ldr	r3, [pc, #20]	@ (8007e08 <__i2b+0x24>)
 8007df4:	4805      	ldr	r0, [pc, #20]	@ (8007e0c <__i2b+0x28>)
 8007df6:	f240 1145 	movw	r1, #325	@ 0x145
 8007dfa:	f002 fa79 	bl	800a2f0 <__assert_func>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	6144      	str	r4, [r0, #20]
 8007e02:	6103      	str	r3, [r0, #16]
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	bf00      	nop
 8007e08:	0800adef 	.word	0x0800adef
 8007e0c:	0800ae00 	.word	0x0800ae00

08007e10 <__multiply>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	4614      	mov	r4, r2
 8007e16:	690a      	ldr	r2, [r1, #16]
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	bfa8      	it	ge
 8007e1e:	4623      	movge	r3, r4
 8007e20:	460f      	mov	r7, r1
 8007e22:	bfa4      	itt	ge
 8007e24:	460c      	movge	r4, r1
 8007e26:	461f      	movge	r7, r3
 8007e28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e30:	68a3      	ldr	r3, [r4, #8]
 8007e32:	6861      	ldr	r1, [r4, #4]
 8007e34:	eb0a 0609 	add.w	r6, sl, r9
 8007e38:	42b3      	cmp	r3, r6
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	bfb8      	it	lt
 8007e3e:	3101      	addlt	r1, #1
 8007e40:	f7ff fe92 	bl	8007b68 <_Balloc>
 8007e44:	b930      	cbnz	r0, 8007e54 <__multiply+0x44>
 8007e46:	4602      	mov	r2, r0
 8007e48:	4b44      	ldr	r3, [pc, #272]	@ (8007f5c <__multiply+0x14c>)
 8007e4a:	4845      	ldr	r0, [pc, #276]	@ (8007f60 <__multiply+0x150>)
 8007e4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e50:	f002 fa4e 	bl	800a2f0 <__assert_func>
 8007e54:	f100 0514 	add.w	r5, r0, #20
 8007e58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4543      	cmp	r3, r8
 8007e62:	d321      	bcc.n	8007ea8 <__multiply+0x98>
 8007e64:	f107 0114 	add.w	r1, r7, #20
 8007e68:	f104 0214 	add.w	r2, r4, #20
 8007e6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e74:	9302      	str	r3, [sp, #8]
 8007e76:	1b13      	subs	r3, r2, r4
 8007e78:	3b15      	subs	r3, #21
 8007e7a:	f023 0303 	bic.w	r3, r3, #3
 8007e7e:	3304      	adds	r3, #4
 8007e80:	f104 0715 	add.w	r7, r4, #21
 8007e84:	42ba      	cmp	r2, r7
 8007e86:	bf38      	it	cc
 8007e88:	2304      	movcc	r3, #4
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	9b02      	ldr	r3, [sp, #8]
 8007e8e:	9103      	str	r1, [sp, #12]
 8007e90:	428b      	cmp	r3, r1
 8007e92:	d80c      	bhi.n	8007eae <__multiply+0x9e>
 8007e94:	2e00      	cmp	r6, #0
 8007e96:	dd03      	ble.n	8007ea0 <__multiply+0x90>
 8007e98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d05b      	beq.n	8007f58 <__multiply+0x148>
 8007ea0:	6106      	str	r6, [r0, #16]
 8007ea2:	b005      	add	sp, #20
 8007ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea8:	f843 2b04 	str.w	r2, [r3], #4
 8007eac:	e7d8      	b.n	8007e60 <__multiply+0x50>
 8007eae:	f8b1 a000 	ldrh.w	sl, [r1]
 8007eb2:	f1ba 0f00 	cmp.w	sl, #0
 8007eb6:	d024      	beq.n	8007f02 <__multiply+0xf2>
 8007eb8:	f104 0e14 	add.w	lr, r4, #20
 8007ebc:	46a9      	mov	r9, r5
 8007ebe:	f04f 0c00 	mov.w	ip, #0
 8007ec2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ec6:	f8d9 3000 	ldr.w	r3, [r9]
 8007eca:	fa1f fb87 	uxth.w	fp, r7
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ed4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ed8:	f8d9 7000 	ldr.w	r7, [r9]
 8007edc:	4463      	add	r3, ip
 8007ede:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ee2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007ee6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ef0:	4572      	cmp	r2, lr
 8007ef2:	f849 3b04 	str.w	r3, [r9], #4
 8007ef6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007efa:	d8e2      	bhi.n	8007ec2 <__multiply+0xb2>
 8007efc:	9b01      	ldr	r3, [sp, #4]
 8007efe:	f845 c003 	str.w	ip, [r5, r3]
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f08:	3104      	adds	r1, #4
 8007f0a:	f1b9 0f00 	cmp.w	r9, #0
 8007f0e:	d021      	beq.n	8007f54 <__multiply+0x144>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	f104 0c14 	add.w	ip, r4, #20
 8007f16:	46ae      	mov	lr, r5
 8007f18:	f04f 0a00 	mov.w	sl, #0
 8007f1c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f24:	fb09 770b 	mla	r7, r9, fp, r7
 8007f28:	4457      	add	r7, sl
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f30:	f84e 3b04 	str.w	r3, [lr], #4
 8007f34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f3c:	f8be 3000 	ldrh.w	r3, [lr]
 8007f40:	fb09 330a 	mla	r3, r9, sl, r3
 8007f44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f48:	4562      	cmp	r2, ip
 8007f4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f4e:	d8e5      	bhi.n	8007f1c <__multiply+0x10c>
 8007f50:	9f01      	ldr	r7, [sp, #4]
 8007f52:	51eb      	str	r3, [r5, r7]
 8007f54:	3504      	adds	r5, #4
 8007f56:	e799      	b.n	8007e8c <__multiply+0x7c>
 8007f58:	3e01      	subs	r6, #1
 8007f5a:	e79b      	b.n	8007e94 <__multiply+0x84>
 8007f5c:	0800adef 	.word	0x0800adef
 8007f60:	0800ae00 	.word	0x0800ae00

08007f64 <__pow5mult>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	4615      	mov	r5, r2
 8007f6a:	f012 0203 	ands.w	r2, r2, #3
 8007f6e:	4607      	mov	r7, r0
 8007f70:	460e      	mov	r6, r1
 8007f72:	d007      	beq.n	8007f84 <__pow5mult+0x20>
 8007f74:	4c25      	ldr	r4, [pc, #148]	@ (800800c <__pow5mult+0xa8>)
 8007f76:	3a01      	subs	r2, #1
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f7e:	f7ff fe55 	bl	8007c2c <__multadd>
 8007f82:	4606      	mov	r6, r0
 8007f84:	10ad      	asrs	r5, r5, #2
 8007f86:	d03d      	beq.n	8008004 <__pow5mult+0xa0>
 8007f88:	69fc      	ldr	r4, [r7, #28]
 8007f8a:	b97c      	cbnz	r4, 8007fac <__pow5mult+0x48>
 8007f8c:	2010      	movs	r0, #16
 8007f8e:	f7ff fd35 	bl	80079fc <malloc>
 8007f92:	4602      	mov	r2, r0
 8007f94:	61f8      	str	r0, [r7, #28]
 8007f96:	b928      	cbnz	r0, 8007fa4 <__pow5mult+0x40>
 8007f98:	4b1d      	ldr	r3, [pc, #116]	@ (8008010 <__pow5mult+0xac>)
 8007f9a:	481e      	ldr	r0, [pc, #120]	@ (8008014 <__pow5mult+0xb0>)
 8007f9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007fa0:	f002 f9a6 	bl	800a2f0 <__assert_func>
 8007fa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fa8:	6004      	str	r4, [r0, #0]
 8007faa:	60c4      	str	r4, [r0, #12]
 8007fac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007fb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fb4:	b94c      	cbnz	r4, 8007fca <__pow5mult+0x66>
 8007fb6:	f240 2171 	movw	r1, #625	@ 0x271
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ff12 	bl	8007de4 <__i2b>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	6003      	str	r3, [r0, #0]
 8007fca:	f04f 0900 	mov.w	r9, #0
 8007fce:	07eb      	lsls	r3, r5, #31
 8007fd0:	d50a      	bpl.n	8007fe8 <__pow5mult+0x84>
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	f7ff ff1a 	bl	8007e10 <__multiply>
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4680      	mov	r8, r0
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f7ff fe01 	bl	8007be8 <_Bfree>
 8007fe6:	4646      	mov	r6, r8
 8007fe8:	106d      	asrs	r5, r5, #1
 8007fea:	d00b      	beq.n	8008004 <__pow5mult+0xa0>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	b938      	cbnz	r0, 8008000 <__pow5mult+0x9c>
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff ff0b 	bl	8007e10 <__multiply>
 8007ffa:	6020      	str	r0, [r4, #0]
 8007ffc:	f8c0 9000 	str.w	r9, [r0]
 8008000:	4604      	mov	r4, r0
 8008002:	e7e4      	b.n	8007fce <__pow5mult+0x6a>
 8008004:	4630      	mov	r0, r6
 8008006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800800a:	bf00      	nop
 800800c:	0800ae5c 	.word	0x0800ae5c
 8008010:	0800ad80 	.word	0x0800ad80
 8008014:	0800ae00 	.word	0x0800ae00

08008018 <__lshift>:
 8008018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	460c      	mov	r4, r1
 800801e:	6849      	ldr	r1, [r1, #4]
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	4607      	mov	r7, r0
 800802a:	4691      	mov	r9, r2
 800802c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008030:	f108 0601 	add.w	r6, r8, #1
 8008034:	42b3      	cmp	r3, r6
 8008036:	db0b      	blt.n	8008050 <__lshift+0x38>
 8008038:	4638      	mov	r0, r7
 800803a:	f7ff fd95 	bl	8007b68 <_Balloc>
 800803e:	4605      	mov	r5, r0
 8008040:	b948      	cbnz	r0, 8008056 <__lshift+0x3e>
 8008042:	4602      	mov	r2, r0
 8008044:	4b28      	ldr	r3, [pc, #160]	@ (80080e8 <__lshift+0xd0>)
 8008046:	4829      	ldr	r0, [pc, #164]	@ (80080ec <__lshift+0xd4>)
 8008048:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800804c:	f002 f950 	bl	800a2f0 <__assert_func>
 8008050:	3101      	adds	r1, #1
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	e7ee      	b.n	8008034 <__lshift+0x1c>
 8008056:	2300      	movs	r3, #0
 8008058:	f100 0114 	add.w	r1, r0, #20
 800805c:	f100 0210 	add.w	r2, r0, #16
 8008060:	4618      	mov	r0, r3
 8008062:	4553      	cmp	r3, sl
 8008064:	db33      	blt.n	80080ce <__lshift+0xb6>
 8008066:	6920      	ldr	r0, [r4, #16]
 8008068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800806c:	f104 0314 	add.w	r3, r4, #20
 8008070:	f019 091f 	ands.w	r9, r9, #31
 8008074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008078:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800807c:	d02b      	beq.n	80080d6 <__lshift+0xbe>
 800807e:	f1c9 0e20 	rsb	lr, r9, #32
 8008082:	468a      	mov	sl, r1
 8008084:	2200      	movs	r2, #0
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	fa00 f009 	lsl.w	r0, r0, r9
 800808c:	4310      	orrs	r0, r2
 800808e:	f84a 0b04 	str.w	r0, [sl], #4
 8008092:	f853 2b04 	ldr.w	r2, [r3], #4
 8008096:	459c      	cmp	ip, r3
 8008098:	fa22 f20e 	lsr.w	r2, r2, lr
 800809c:	d8f3      	bhi.n	8008086 <__lshift+0x6e>
 800809e:	ebac 0304 	sub.w	r3, ip, r4
 80080a2:	3b15      	subs	r3, #21
 80080a4:	f023 0303 	bic.w	r3, r3, #3
 80080a8:	3304      	adds	r3, #4
 80080aa:	f104 0015 	add.w	r0, r4, #21
 80080ae:	4584      	cmp	ip, r0
 80080b0:	bf38      	it	cc
 80080b2:	2304      	movcc	r3, #4
 80080b4:	50ca      	str	r2, [r1, r3]
 80080b6:	b10a      	cbz	r2, 80080bc <__lshift+0xa4>
 80080b8:	f108 0602 	add.w	r6, r8, #2
 80080bc:	3e01      	subs	r6, #1
 80080be:	4638      	mov	r0, r7
 80080c0:	612e      	str	r6, [r5, #16]
 80080c2:	4621      	mov	r1, r4
 80080c4:	f7ff fd90 	bl	8007be8 <_Bfree>
 80080c8:	4628      	mov	r0, r5
 80080ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80080d2:	3301      	adds	r3, #1
 80080d4:	e7c5      	b.n	8008062 <__lshift+0x4a>
 80080d6:	3904      	subs	r1, #4
 80080d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80080e0:	459c      	cmp	ip, r3
 80080e2:	d8f9      	bhi.n	80080d8 <__lshift+0xc0>
 80080e4:	e7ea      	b.n	80080bc <__lshift+0xa4>
 80080e6:	bf00      	nop
 80080e8:	0800adef 	.word	0x0800adef
 80080ec:	0800ae00 	.word	0x0800ae00

080080f0 <__mcmp>:
 80080f0:	690a      	ldr	r2, [r1, #16]
 80080f2:	4603      	mov	r3, r0
 80080f4:	6900      	ldr	r0, [r0, #16]
 80080f6:	1a80      	subs	r0, r0, r2
 80080f8:	b530      	push	{r4, r5, lr}
 80080fa:	d10e      	bne.n	800811a <__mcmp+0x2a>
 80080fc:	3314      	adds	r3, #20
 80080fe:	3114      	adds	r1, #20
 8008100:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008104:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008108:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800810c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008110:	4295      	cmp	r5, r2
 8008112:	d003      	beq.n	800811c <__mcmp+0x2c>
 8008114:	d205      	bcs.n	8008122 <__mcmp+0x32>
 8008116:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800811a:	bd30      	pop	{r4, r5, pc}
 800811c:	42a3      	cmp	r3, r4
 800811e:	d3f3      	bcc.n	8008108 <__mcmp+0x18>
 8008120:	e7fb      	b.n	800811a <__mcmp+0x2a>
 8008122:	2001      	movs	r0, #1
 8008124:	e7f9      	b.n	800811a <__mcmp+0x2a>
	...

08008128 <__mdiff>:
 8008128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	4689      	mov	r9, r1
 800812e:	4606      	mov	r6, r0
 8008130:	4611      	mov	r1, r2
 8008132:	4648      	mov	r0, r9
 8008134:	4614      	mov	r4, r2
 8008136:	f7ff ffdb 	bl	80080f0 <__mcmp>
 800813a:	1e05      	subs	r5, r0, #0
 800813c:	d112      	bne.n	8008164 <__mdiff+0x3c>
 800813e:	4629      	mov	r1, r5
 8008140:	4630      	mov	r0, r6
 8008142:	f7ff fd11 	bl	8007b68 <_Balloc>
 8008146:	4602      	mov	r2, r0
 8008148:	b928      	cbnz	r0, 8008156 <__mdiff+0x2e>
 800814a:	4b3f      	ldr	r3, [pc, #252]	@ (8008248 <__mdiff+0x120>)
 800814c:	f240 2137 	movw	r1, #567	@ 0x237
 8008150:	483e      	ldr	r0, [pc, #248]	@ (800824c <__mdiff+0x124>)
 8008152:	f002 f8cd 	bl	800a2f0 <__assert_func>
 8008156:	2301      	movs	r3, #1
 8008158:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800815c:	4610      	mov	r0, r2
 800815e:	b003      	add	sp, #12
 8008160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008164:	bfbc      	itt	lt
 8008166:	464b      	movlt	r3, r9
 8008168:	46a1      	movlt	r9, r4
 800816a:	4630      	mov	r0, r6
 800816c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008170:	bfba      	itte	lt
 8008172:	461c      	movlt	r4, r3
 8008174:	2501      	movlt	r5, #1
 8008176:	2500      	movge	r5, #0
 8008178:	f7ff fcf6 	bl	8007b68 <_Balloc>
 800817c:	4602      	mov	r2, r0
 800817e:	b918      	cbnz	r0, 8008188 <__mdiff+0x60>
 8008180:	4b31      	ldr	r3, [pc, #196]	@ (8008248 <__mdiff+0x120>)
 8008182:	f240 2145 	movw	r1, #581	@ 0x245
 8008186:	e7e3      	b.n	8008150 <__mdiff+0x28>
 8008188:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800818c:	6926      	ldr	r6, [r4, #16]
 800818e:	60c5      	str	r5, [r0, #12]
 8008190:	f109 0310 	add.w	r3, r9, #16
 8008194:	f109 0514 	add.w	r5, r9, #20
 8008198:	f104 0e14 	add.w	lr, r4, #20
 800819c:	f100 0b14 	add.w	fp, r0, #20
 80081a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	46d9      	mov	r9, fp
 80081ac:	f04f 0c00 	mov.w	ip, #0
 80081b0:	9b01      	ldr	r3, [sp, #4]
 80081b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80081b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	fa1f f38a 	uxth.w	r3, sl
 80081c0:	4619      	mov	r1, r3
 80081c2:	b283      	uxth	r3, r0
 80081c4:	1acb      	subs	r3, r1, r3
 80081c6:	0c00      	lsrs	r0, r0, #16
 80081c8:	4463      	add	r3, ip
 80081ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80081d8:	4576      	cmp	r6, lr
 80081da:	f849 3b04 	str.w	r3, [r9], #4
 80081de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081e2:	d8e5      	bhi.n	80081b0 <__mdiff+0x88>
 80081e4:	1b33      	subs	r3, r6, r4
 80081e6:	3b15      	subs	r3, #21
 80081e8:	f023 0303 	bic.w	r3, r3, #3
 80081ec:	3415      	adds	r4, #21
 80081ee:	3304      	adds	r3, #4
 80081f0:	42a6      	cmp	r6, r4
 80081f2:	bf38      	it	cc
 80081f4:	2304      	movcc	r3, #4
 80081f6:	441d      	add	r5, r3
 80081f8:	445b      	add	r3, fp
 80081fa:	461e      	mov	r6, r3
 80081fc:	462c      	mov	r4, r5
 80081fe:	4544      	cmp	r4, r8
 8008200:	d30e      	bcc.n	8008220 <__mdiff+0xf8>
 8008202:	f108 0103 	add.w	r1, r8, #3
 8008206:	1b49      	subs	r1, r1, r5
 8008208:	f021 0103 	bic.w	r1, r1, #3
 800820c:	3d03      	subs	r5, #3
 800820e:	45a8      	cmp	r8, r5
 8008210:	bf38      	it	cc
 8008212:	2100      	movcc	r1, #0
 8008214:	440b      	add	r3, r1
 8008216:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800821a:	b191      	cbz	r1, 8008242 <__mdiff+0x11a>
 800821c:	6117      	str	r7, [r2, #16]
 800821e:	e79d      	b.n	800815c <__mdiff+0x34>
 8008220:	f854 1b04 	ldr.w	r1, [r4], #4
 8008224:	46e6      	mov	lr, ip
 8008226:	0c08      	lsrs	r0, r1, #16
 8008228:	fa1c fc81 	uxtah	ip, ip, r1
 800822c:	4471      	add	r1, lr
 800822e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008232:	b289      	uxth	r1, r1
 8008234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008238:	f846 1b04 	str.w	r1, [r6], #4
 800823c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008240:	e7dd      	b.n	80081fe <__mdiff+0xd6>
 8008242:	3f01      	subs	r7, #1
 8008244:	e7e7      	b.n	8008216 <__mdiff+0xee>
 8008246:	bf00      	nop
 8008248:	0800adef 	.word	0x0800adef
 800824c:	0800ae00 	.word	0x0800ae00

08008250 <__ulp>:
 8008250:	b082      	sub	sp, #8
 8008252:	ed8d 0b00 	vstr	d0, [sp]
 8008256:	9a01      	ldr	r2, [sp, #4]
 8008258:	4b0f      	ldr	r3, [pc, #60]	@ (8008298 <__ulp+0x48>)
 800825a:	4013      	ands	r3, r2
 800825c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008260:	2b00      	cmp	r3, #0
 8008262:	dc08      	bgt.n	8008276 <__ulp+0x26>
 8008264:	425b      	negs	r3, r3
 8008266:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800826a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800826e:	da04      	bge.n	800827a <__ulp+0x2a>
 8008270:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008274:	4113      	asrs	r3, r2
 8008276:	2200      	movs	r2, #0
 8008278:	e008      	b.n	800828c <__ulp+0x3c>
 800827a:	f1a2 0314 	sub.w	r3, r2, #20
 800827e:	2b1e      	cmp	r3, #30
 8008280:	bfda      	itte	le
 8008282:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008286:	40da      	lsrle	r2, r3
 8008288:	2201      	movgt	r2, #1
 800828a:	2300      	movs	r3, #0
 800828c:	4619      	mov	r1, r3
 800828e:	4610      	mov	r0, r2
 8008290:	ec41 0b10 	vmov	d0, r0, r1
 8008294:	b002      	add	sp, #8
 8008296:	4770      	bx	lr
 8008298:	7ff00000 	.word	0x7ff00000

0800829c <__b2d>:
 800829c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a0:	6906      	ldr	r6, [r0, #16]
 80082a2:	f100 0814 	add.w	r8, r0, #20
 80082a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80082aa:	1f37      	subs	r7, r6, #4
 80082ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80082b0:	4610      	mov	r0, r2
 80082b2:	f7ff fd4b 	bl	8007d4c <__hi0bits>
 80082b6:	f1c0 0320 	rsb	r3, r0, #32
 80082ba:	280a      	cmp	r0, #10
 80082bc:	600b      	str	r3, [r1, #0]
 80082be:	491b      	ldr	r1, [pc, #108]	@ (800832c <__b2d+0x90>)
 80082c0:	dc15      	bgt.n	80082ee <__b2d+0x52>
 80082c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80082c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80082ca:	45b8      	cmp	r8, r7
 80082cc:	ea43 0501 	orr.w	r5, r3, r1
 80082d0:	bf34      	ite	cc
 80082d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80082d6:	2300      	movcs	r3, #0
 80082d8:	3015      	adds	r0, #21
 80082da:	fa02 f000 	lsl.w	r0, r2, r0
 80082de:	fa23 f30c 	lsr.w	r3, r3, ip
 80082e2:	4303      	orrs	r3, r0
 80082e4:	461c      	mov	r4, r3
 80082e6:	ec45 4b10 	vmov	d0, r4, r5
 80082ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ee:	45b8      	cmp	r8, r7
 80082f0:	bf3a      	itte	cc
 80082f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80082f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80082fa:	2300      	movcs	r3, #0
 80082fc:	380b      	subs	r0, #11
 80082fe:	d012      	beq.n	8008326 <__b2d+0x8a>
 8008300:	f1c0 0120 	rsb	r1, r0, #32
 8008304:	fa23 f401 	lsr.w	r4, r3, r1
 8008308:	4082      	lsls	r2, r0
 800830a:	4322      	orrs	r2, r4
 800830c:	4547      	cmp	r7, r8
 800830e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008312:	bf8c      	ite	hi
 8008314:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008318:	2200      	movls	r2, #0
 800831a:	4083      	lsls	r3, r0
 800831c:	40ca      	lsrs	r2, r1
 800831e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008322:	4313      	orrs	r3, r2
 8008324:	e7de      	b.n	80082e4 <__b2d+0x48>
 8008326:	ea42 0501 	orr.w	r5, r2, r1
 800832a:	e7db      	b.n	80082e4 <__b2d+0x48>
 800832c:	3ff00000 	.word	0x3ff00000

08008330 <__d2b>:
 8008330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008334:	460f      	mov	r7, r1
 8008336:	2101      	movs	r1, #1
 8008338:	ec59 8b10 	vmov	r8, r9, d0
 800833c:	4616      	mov	r6, r2
 800833e:	f7ff fc13 	bl	8007b68 <_Balloc>
 8008342:	4604      	mov	r4, r0
 8008344:	b930      	cbnz	r0, 8008354 <__d2b+0x24>
 8008346:	4602      	mov	r2, r0
 8008348:	4b23      	ldr	r3, [pc, #140]	@ (80083d8 <__d2b+0xa8>)
 800834a:	4824      	ldr	r0, [pc, #144]	@ (80083dc <__d2b+0xac>)
 800834c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008350:	f001 ffce 	bl	800a2f0 <__assert_func>
 8008354:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800835c:	b10d      	cbz	r5, 8008362 <__d2b+0x32>
 800835e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	f1b8 0300 	subs.w	r3, r8, #0
 8008368:	d023      	beq.n	80083b2 <__d2b+0x82>
 800836a:	4668      	mov	r0, sp
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	f7ff fd0c 	bl	8007d8a <__lo0bits>
 8008372:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008376:	b1d0      	cbz	r0, 80083ae <__d2b+0x7e>
 8008378:	f1c0 0320 	rsb	r3, r0, #32
 800837c:	fa02 f303 	lsl.w	r3, r2, r3
 8008380:	430b      	orrs	r3, r1
 8008382:	40c2      	lsrs	r2, r0
 8008384:	6163      	str	r3, [r4, #20]
 8008386:	9201      	str	r2, [sp, #4]
 8008388:	9b01      	ldr	r3, [sp, #4]
 800838a:	61a3      	str	r3, [r4, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	bf0c      	ite	eq
 8008390:	2201      	moveq	r2, #1
 8008392:	2202      	movne	r2, #2
 8008394:	6122      	str	r2, [r4, #16]
 8008396:	b1a5      	cbz	r5, 80083c2 <__d2b+0x92>
 8008398:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800839c:	4405      	add	r5, r0
 800839e:	603d      	str	r5, [r7, #0]
 80083a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083a4:	6030      	str	r0, [r6, #0]
 80083a6:	4620      	mov	r0, r4
 80083a8:	b003      	add	sp, #12
 80083aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083ae:	6161      	str	r1, [r4, #20]
 80083b0:	e7ea      	b.n	8008388 <__d2b+0x58>
 80083b2:	a801      	add	r0, sp, #4
 80083b4:	f7ff fce9 	bl	8007d8a <__lo0bits>
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	6163      	str	r3, [r4, #20]
 80083bc:	3020      	adds	r0, #32
 80083be:	2201      	movs	r2, #1
 80083c0:	e7e8      	b.n	8008394 <__d2b+0x64>
 80083c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80083ca:	6038      	str	r0, [r7, #0]
 80083cc:	6918      	ldr	r0, [r3, #16]
 80083ce:	f7ff fcbd 	bl	8007d4c <__hi0bits>
 80083d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083d6:	e7e5      	b.n	80083a4 <__d2b+0x74>
 80083d8:	0800adef 	.word	0x0800adef
 80083dc:	0800ae00 	.word	0x0800ae00

080083e0 <__ratio>:
 80083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	b085      	sub	sp, #20
 80083e6:	e9cd 1000 	strd	r1, r0, [sp]
 80083ea:	a902      	add	r1, sp, #8
 80083ec:	f7ff ff56 	bl	800829c <__b2d>
 80083f0:	9800      	ldr	r0, [sp, #0]
 80083f2:	a903      	add	r1, sp, #12
 80083f4:	ec55 4b10 	vmov	r4, r5, d0
 80083f8:	f7ff ff50 	bl	800829c <__b2d>
 80083fc:	9b01      	ldr	r3, [sp, #4]
 80083fe:	6919      	ldr	r1, [r3, #16]
 8008400:	9b00      	ldr	r3, [sp, #0]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	1ac9      	subs	r1, r1, r3
 8008406:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	ec5b ab10 	vmov	sl, fp, d0
 8008410:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008414:	2b00      	cmp	r3, #0
 8008416:	bfce      	itee	gt
 8008418:	462a      	movgt	r2, r5
 800841a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800841e:	465a      	movle	r2, fp
 8008420:	462f      	mov	r7, r5
 8008422:	46d9      	mov	r9, fp
 8008424:	bfcc      	ite	gt
 8008426:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800842a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800842e:	464b      	mov	r3, r9
 8008430:	4652      	mov	r2, sl
 8008432:	4620      	mov	r0, r4
 8008434:	4639      	mov	r1, r7
 8008436:	f7f8 fa19 	bl	800086c <__aeabi_ddiv>
 800843a:	ec41 0b10 	vmov	d0, r0, r1
 800843e:	b005      	add	sp, #20
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008444 <__copybits>:
 8008444:	3901      	subs	r1, #1
 8008446:	b570      	push	{r4, r5, r6, lr}
 8008448:	1149      	asrs	r1, r1, #5
 800844a:	6914      	ldr	r4, [r2, #16]
 800844c:	3101      	adds	r1, #1
 800844e:	f102 0314 	add.w	r3, r2, #20
 8008452:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008456:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800845a:	1f05      	subs	r5, r0, #4
 800845c:	42a3      	cmp	r3, r4
 800845e:	d30c      	bcc.n	800847a <__copybits+0x36>
 8008460:	1aa3      	subs	r3, r4, r2
 8008462:	3b11      	subs	r3, #17
 8008464:	f023 0303 	bic.w	r3, r3, #3
 8008468:	3211      	adds	r2, #17
 800846a:	42a2      	cmp	r2, r4
 800846c:	bf88      	it	hi
 800846e:	2300      	movhi	r3, #0
 8008470:	4418      	add	r0, r3
 8008472:	2300      	movs	r3, #0
 8008474:	4288      	cmp	r0, r1
 8008476:	d305      	bcc.n	8008484 <__copybits+0x40>
 8008478:	bd70      	pop	{r4, r5, r6, pc}
 800847a:	f853 6b04 	ldr.w	r6, [r3], #4
 800847e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008482:	e7eb      	b.n	800845c <__copybits+0x18>
 8008484:	f840 3b04 	str.w	r3, [r0], #4
 8008488:	e7f4      	b.n	8008474 <__copybits+0x30>

0800848a <__any_on>:
 800848a:	f100 0214 	add.w	r2, r0, #20
 800848e:	6900      	ldr	r0, [r0, #16]
 8008490:	114b      	asrs	r3, r1, #5
 8008492:	4298      	cmp	r0, r3
 8008494:	b510      	push	{r4, lr}
 8008496:	db11      	blt.n	80084bc <__any_on+0x32>
 8008498:	dd0a      	ble.n	80084b0 <__any_on+0x26>
 800849a:	f011 011f 	ands.w	r1, r1, #31
 800849e:	d007      	beq.n	80084b0 <__any_on+0x26>
 80084a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084a4:	fa24 f001 	lsr.w	r0, r4, r1
 80084a8:	fa00 f101 	lsl.w	r1, r0, r1
 80084ac:	428c      	cmp	r4, r1
 80084ae:	d10b      	bne.n	80084c8 <__any_on+0x3e>
 80084b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d803      	bhi.n	80084c0 <__any_on+0x36>
 80084b8:	2000      	movs	r0, #0
 80084ba:	bd10      	pop	{r4, pc}
 80084bc:	4603      	mov	r3, r0
 80084be:	e7f7      	b.n	80084b0 <__any_on+0x26>
 80084c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084c4:	2900      	cmp	r1, #0
 80084c6:	d0f5      	beq.n	80084b4 <__any_on+0x2a>
 80084c8:	2001      	movs	r0, #1
 80084ca:	e7f6      	b.n	80084ba <__any_on+0x30>

080084cc <sulp>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	4604      	mov	r4, r0
 80084d0:	460d      	mov	r5, r1
 80084d2:	ec45 4b10 	vmov	d0, r4, r5
 80084d6:	4616      	mov	r6, r2
 80084d8:	f7ff feba 	bl	8008250 <__ulp>
 80084dc:	ec51 0b10 	vmov	r0, r1, d0
 80084e0:	b17e      	cbz	r6, 8008502 <sulp+0x36>
 80084e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80084e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd09      	ble.n	8008502 <sulp+0x36>
 80084ee:	051b      	lsls	r3, r3, #20
 80084f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80084f4:	2400      	movs	r4, #0
 80084f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80084fa:	4622      	mov	r2, r4
 80084fc:	462b      	mov	r3, r5
 80084fe:	f7f8 f88b 	bl	8000618 <__aeabi_dmul>
 8008502:	ec41 0b10 	vmov	d0, r0, r1
 8008506:	bd70      	pop	{r4, r5, r6, pc}

08008508 <_strtod_l>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	b09f      	sub	sp, #124	@ 0x7c
 800850e:	460c      	mov	r4, r1
 8008510:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008512:	2200      	movs	r2, #0
 8008514:	921a      	str	r2, [sp, #104]	@ 0x68
 8008516:	9005      	str	r0, [sp, #20]
 8008518:	f04f 0a00 	mov.w	sl, #0
 800851c:	f04f 0b00 	mov.w	fp, #0
 8008520:	460a      	mov	r2, r1
 8008522:	9219      	str	r2, [sp, #100]	@ 0x64
 8008524:	7811      	ldrb	r1, [r2, #0]
 8008526:	292b      	cmp	r1, #43	@ 0x2b
 8008528:	d04a      	beq.n	80085c0 <_strtod_l+0xb8>
 800852a:	d838      	bhi.n	800859e <_strtod_l+0x96>
 800852c:	290d      	cmp	r1, #13
 800852e:	d832      	bhi.n	8008596 <_strtod_l+0x8e>
 8008530:	2908      	cmp	r1, #8
 8008532:	d832      	bhi.n	800859a <_strtod_l+0x92>
 8008534:	2900      	cmp	r1, #0
 8008536:	d03b      	beq.n	80085b0 <_strtod_l+0xa8>
 8008538:	2200      	movs	r2, #0
 800853a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800853c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800853e:	782a      	ldrb	r2, [r5, #0]
 8008540:	2a30      	cmp	r2, #48	@ 0x30
 8008542:	f040 80b3 	bne.w	80086ac <_strtod_l+0x1a4>
 8008546:	786a      	ldrb	r2, [r5, #1]
 8008548:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800854c:	2a58      	cmp	r2, #88	@ 0x58
 800854e:	d16e      	bne.n	800862e <_strtod_l+0x126>
 8008550:	9302      	str	r3, [sp, #8]
 8008552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	ab1a      	add	r3, sp, #104	@ 0x68
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	4a8e      	ldr	r2, [pc, #568]	@ (8008794 <_strtod_l+0x28c>)
 800855c:	9805      	ldr	r0, [sp, #20]
 800855e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008560:	a919      	add	r1, sp, #100	@ 0x64
 8008562:	f001 ff5f 	bl	800a424 <__gethex>
 8008566:	f010 060f 	ands.w	r6, r0, #15
 800856a:	4604      	mov	r4, r0
 800856c:	d005      	beq.n	800857a <_strtod_l+0x72>
 800856e:	2e06      	cmp	r6, #6
 8008570:	d128      	bne.n	80085c4 <_strtod_l+0xbc>
 8008572:	3501      	adds	r5, #1
 8008574:	2300      	movs	r3, #0
 8008576:	9519      	str	r5, [sp, #100]	@ 0x64
 8008578:	930b      	str	r3, [sp, #44]	@ 0x2c
 800857a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800857c:	2b00      	cmp	r3, #0
 800857e:	f040 858e 	bne.w	800909e <_strtod_l+0xb96>
 8008582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008584:	b1cb      	cbz	r3, 80085ba <_strtod_l+0xb2>
 8008586:	4652      	mov	r2, sl
 8008588:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800858c:	ec43 2b10 	vmov	d0, r2, r3
 8008590:	b01f      	add	sp, #124	@ 0x7c
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	2920      	cmp	r1, #32
 8008598:	d1ce      	bne.n	8008538 <_strtod_l+0x30>
 800859a:	3201      	adds	r2, #1
 800859c:	e7c1      	b.n	8008522 <_strtod_l+0x1a>
 800859e:	292d      	cmp	r1, #45	@ 0x2d
 80085a0:	d1ca      	bne.n	8008538 <_strtod_l+0x30>
 80085a2:	2101      	movs	r1, #1
 80085a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80085a6:	1c51      	adds	r1, r2, #1
 80085a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80085aa:	7852      	ldrb	r2, [r2, #1]
 80085ac:	2a00      	cmp	r2, #0
 80085ae:	d1c5      	bne.n	800853c <_strtod_l+0x34>
 80085b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f040 8570 	bne.w	800909a <_strtod_l+0xb92>
 80085ba:	4652      	mov	r2, sl
 80085bc:	465b      	mov	r3, fp
 80085be:	e7e5      	b.n	800858c <_strtod_l+0x84>
 80085c0:	2100      	movs	r1, #0
 80085c2:	e7ef      	b.n	80085a4 <_strtod_l+0x9c>
 80085c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085c6:	b13a      	cbz	r2, 80085d8 <_strtod_l+0xd0>
 80085c8:	2135      	movs	r1, #53	@ 0x35
 80085ca:	a81c      	add	r0, sp, #112	@ 0x70
 80085cc:	f7ff ff3a 	bl	8008444 <__copybits>
 80085d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085d2:	9805      	ldr	r0, [sp, #20]
 80085d4:	f7ff fb08 	bl	8007be8 <_Bfree>
 80085d8:	3e01      	subs	r6, #1
 80085da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80085dc:	2e04      	cmp	r6, #4
 80085de:	d806      	bhi.n	80085ee <_strtod_l+0xe6>
 80085e0:	e8df f006 	tbb	[pc, r6]
 80085e4:	201d0314 	.word	0x201d0314
 80085e8:	14          	.byte	0x14
 80085e9:	00          	.byte	0x00
 80085ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80085ee:	05e1      	lsls	r1, r4, #23
 80085f0:	bf48      	it	mi
 80085f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80085f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085fa:	0d1b      	lsrs	r3, r3, #20
 80085fc:	051b      	lsls	r3, r3, #20
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1bb      	bne.n	800857a <_strtod_l+0x72>
 8008602:	f7fe fb2f 	bl	8006c64 <__errno>
 8008606:	2322      	movs	r3, #34	@ 0x22
 8008608:	6003      	str	r3, [r0, #0]
 800860a:	e7b6      	b.n	800857a <_strtod_l+0x72>
 800860c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008610:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008614:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008618:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800861c:	e7e7      	b.n	80085ee <_strtod_l+0xe6>
 800861e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800879c <_strtod_l+0x294>
 8008622:	e7e4      	b.n	80085ee <_strtod_l+0xe6>
 8008624:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008628:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800862c:	e7df      	b.n	80085ee <_strtod_l+0xe6>
 800862e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	9219      	str	r2, [sp, #100]	@ 0x64
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b30      	cmp	r3, #48	@ 0x30
 8008638:	d0f9      	beq.n	800862e <_strtod_l+0x126>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d09d      	beq.n	800857a <_strtod_l+0x72>
 800863e:	2301      	movs	r3, #1
 8008640:	9309      	str	r3, [sp, #36]	@ 0x24
 8008642:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008644:	930c      	str	r3, [sp, #48]	@ 0x30
 8008646:	2300      	movs	r3, #0
 8008648:	9308      	str	r3, [sp, #32]
 800864a:	930a      	str	r3, [sp, #40]	@ 0x28
 800864c:	461f      	mov	r7, r3
 800864e:	220a      	movs	r2, #10
 8008650:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008652:	7805      	ldrb	r5, [r0, #0]
 8008654:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008658:	b2d9      	uxtb	r1, r3
 800865a:	2909      	cmp	r1, #9
 800865c:	d928      	bls.n	80086b0 <_strtod_l+0x1a8>
 800865e:	494e      	ldr	r1, [pc, #312]	@ (8008798 <_strtod_l+0x290>)
 8008660:	2201      	movs	r2, #1
 8008662:	f001 fdeb 	bl	800a23c <strncmp>
 8008666:	2800      	cmp	r0, #0
 8008668:	d032      	beq.n	80086d0 <_strtod_l+0x1c8>
 800866a:	2000      	movs	r0, #0
 800866c:	462a      	mov	r2, r5
 800866e:	4681      	mov	r9, r0
 8008670:	463d      	mov	r5, r7
 8008672:	4603      	mov	r3, r0
 8008674:	2a65      	cmp	r2, #101	@ 0x65
 8008676:	d001      	beq.n	800867c <_strtod_l+0x174>
 8008678:	2a45      	cmp	r2, #69	@ 0x45
 800867a:	d114      	bne.n	80086a6 <_strtod_l+0x19e>
 800867c:	b91d      	cbnz	r5, 8008686 <_strtod_l+0x17e>
 800867e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008680:	4302      	orrs	r2, r0
 8008682:	d095      	beq.n	80085b0 <_strtod_l+0xa8>
 8008684:	2500      	movs	r5, #0
 8008686:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008688:	1c62      	adds	r2, r4, #1
 800868a:	9219      	str	r2, [sp, #100]	@ 0x64
 800868c:	7862      	ldrb	r2, [r4, #1]
 800868e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008690:	d077      	beq.n	8008782 <_strtod_l+0x27a>
 8008692:	2a2d      	cmp	r2, #45	@ 0x2d
 8008694:	d07b      	beq.n	800878e <_strtod_l+0x286>
 8008696:	f04f 0c00 	mov.w	ip, #0
 800869a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800869e:	2909      	cmp	r1, #9
 80086a0:	f240 8082 	bls.w	80087a8 <_strtod_l+0x2a0>
 80086a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80086a6:	f04f 0800 	mov.w	r8, #0
 80086aa:	e0a2      	b.n	80087f2 <_strtod_l+0x2ea>
 80086ac:	2300      	movs	r3, #0
 80086ae:	e7c7      	b.n	8008640 <_strtod_l+0x138>
 80086b0:	2f08      	cmp	r7, #8
 80086b2:	bfd5      	itete	le
 80086b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80086b6:	9908      	ldrgt	r1, [sp, #32]
 80086b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80086bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80086c0:	f100 0001 	add.w	r0, r0, #1
 80086c4:	bfd4      	ite	le
 80086c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80086c8:	9308      	strgt	r3, [sp, #32]
 80086ca:	3701      	adds	r7, #1
 80086cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80086ce:	e7bf      	b.n	8008650 <_strtod_l+0x148>
 80086d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80086d6:	785a      	ldrb	r2, [r3, #1]
 80086d8:	b37f      	cbz	r7, 800873a <_strtod_l+0x232>
 80086da:	4681      	mov	r9, r0
 80086dc:	463d      	mov	r5, r7
 80086de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80086e2:	2b09      	cmp	r3, #9
 80086e4:	d912      	bls.n	800870c <_strtod_l+0x204>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e7c4      	b.n	8008674 <_strtod_l+0x16c>
 80086ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086ec:	1c5a      	adds	r2, r3, #1
 80086ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80086f0:	785a      	ldrb	r2, [r3, #1]
 80086f2:	3001      	adds	r0, #1
 80086f4:	2a30      	cmp	r2, #48	@ 0x30
 80086f6:	d0f8      	beq.n	80086ea <_strtod_l+0x1e2>
 80086f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	f200 84d3 	bhi.w	80090a8 <_strtod_l+0xba0>
 8008702:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008704:	930c      	str	r3, [sp, #48]	@ 0x30
 8008706:	4681      	mov	r9, r0
 8008708:	2000      	movs	r0, #0
 800870a:	4605      	mov	r5, r0
 800870c:	3a30      	subs	r2, #48	@ 0x30
 800870e:	f100 0301 	add.w	r3, r0, #1
 8008712:	d02a      	beq.n	800876a <_strtod_l+0x262>
 8008714:	4499      	add	r9, r3
 8008716:	eb00 0c05 	add.w	ip, r0, r5
 800871a:	462b      	mov	r3, r5
 800871c:	210a      	movs	r1, #10
 800871e:	4563      	cmp	r3, ip
 8008720:	d10d      	bne.n	800873e <_strtod_l+0x236>
 8008722:	1c69      	adds	r1, r5, #1
 8008724:	4401      	add	r1, r0
 8008726:	4428      	add	r0, r5
 8008728:	2808      	cmp	r0, #8
 800872a:	dc16      	bgt.n	800875a <_strtod_l+0x252>
 800872c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800872e:	230a      	movs	r3, #10
 8008730:	fb03 2300 	mla	r3, r3, r0, r2
 8008734:	930a      	str	r3, [sp, #40]	@ 0x28
 8008736:	2300      	movs	r3, #0
 8008738:	e018      	b.n	800876c <_strtod_l+0x264>
 800873a:	4638      	mov	r0, r7
 800873c:	e7da      	b.n	80086f4 <_strtod_l+0x1ec>
 800873e:	2b08      	cmp	r3, #8
 8008740:	f103 0301 	add.w	r3, r3, #1
 8008744:	dc03      	bgt.n	800874e <_strtod_l+0x246>
 8008746:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008748:	434e      	muls	r6, r1
 800874a:	960a      	str	r6, [sp, #40]	@ 0x28
 800874c:	e7e7      	b.n	800871e <_strtod_l+0x216>
 800874e:	2b10      	cmp	r3, #16
 8008750:	bfde      	ittt	le
 8008752:	9e08      	ldrle	r6, [sp, #32]
 8008754:	434e      	mulle	r6, r1
 8008756:	9608      	strle	r6, [sp, #32]
 8008758:	e7e1      	b.n	800871e <_strtod_l+0x216>
 800875a:	280f      	cmp	r0, #15
 800875c:	dceb      	bgt.n	8008736 <_strtod_l+0x22e>
 800875e:	9808      	ldr	r0, [sp, #32]
 8008760:	230a      	movs	r3, #10
 8008762:	fb03 2300 	mla	r3, r3, r0, r2
 8008766:	9308      	str	r3, [sp, #32]
 8008768:	e7e5      	b.n	8008736 <_strtod_l+0x22e>
 800876a:	4629      	mov	r1, r5
 800876c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800876e:	1c50      	adds	r0, r2, #1
 8008770:	9019      	str	r0, [sp, #100]	@ 0x64
 8008772:	7852      	ldrb	r2, [r2, #1]
 8008774:	4618      	mov	r0, r3
 8008776:	460d      	mov	r5, r1
 8008778:	e7b1      	b.n	80086de <_strtod_l+0x1d6>
 800877a:	f04f 0900 	mov.w	r9, #0
 800877e:	2301      	movs	r3, #1
 8008780:	e77d      	b.n	800867e <_strtod_l+0x176>
 8008782:	f04f 0c00 	mov.w	ip, #0
 8008786:	1ca2      	adds	r2, r4, #2
 8008788:	9219      	str	r2, [sp, #100]	@ 0x64
 800878a:	78a2      	ldrb	r2, [r4, #2]
 800878c:	e785      	b.n	800869a <_strtod_l+0x192>
 800878e:	f04f 0c01 	mov.w	ip, #1
 8008792:	e7f8      	b.n	8008786 <_strtod_l+0x27e>
 8008794:	0800af70 	.word	0x0800af70
 8008798:	0800af58 	.word	0x0800af58
 800879c:	7ff00000 	.word	0x7ff00000
 80087a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087a2:	1c51      	adds	r1, r2, #1
 80087a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80087a6:	7852      	ldrb	r2, [r2, #1]
 80087a8:	2a30      	cmp	r2, #48	@ 0x30
 80087aa:	d0f9      	beq.n	80087a0 <_strtod_l+0x298>
 80087ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80087b0:	2908      	cmp	r1, #8
 80087b2:	f63f af78 	bhi.w	80086a6 <_strtod_l+0x19e>
 80087b6:	3a30      	subs	r2, #48	@ 0x30
 80087b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80087ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80087be:	f04f 080a 	mov.w	r8, #10
 80087c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087c4:	1c56      	adds	r6, r2, #1
 80087c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80087c8:	7852      	ldrb	r2, [r2, #1]
 80087ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80087ce:	f1be 0f09 	cmp.w	lr, #9
 80087d2:	d939      	bls.n	8008848 <_strtod_l+0x340>
 80087d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80087d6:	1a76      	subs	r6, r6, r1
 80087d8:	2e08      	cmp	r6, #8
 80087da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80087de:	dc03      	bgt.n	80087e8 <_strtod_l+0x2e0>
 80087e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80087e2:	4588      	cmp	r8, r1
 80087e4:	bfa8      	it	ge
 80087e6:	4688      	movge	r8, r1
 80087e8:	f1bc 0f00 	cmp.w	ip, #0
 80087ec:	d001      	beq.n	80087f2 <_strtod_l+0x2ea>
 80087ee:	f1c8 0800 	rsb	r8, r8, #0
 80087f2:	2d00      	cmp	r5, #0
 80087f4:	d14e      	bne.n	8008894 <_strtod_l+0x38c>
 80087f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087f8:	4308      	orrs	r0, r1
 80087fa:	f47f aebe 	bne.w	800857a <_strtod_l+0x72>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f47f aed6 	bne.w	80085b0 <_strtod_l+0xa8>
 8008804:	2a69      	cmp	r2, #105	@ 0x69
 8008806:	d028      	beq.n	800885a <_strtod_l+0x352>
 8008808:	dc25      	bgt.n	8008856 <_strtod_l+0x34e>
 800880a:	2a49      	cmp	r2, #73	@ 0x49
 800880c:	d025      	beq.n	800885a <_strtod_l+0x352>
 800880e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008810:	f47f aece 	bne.w	80085b0 <_strtod_l+0xa8>
 8008814:	499b      	ldr	r1, [pc, #620]	@ (8008a84 <_strtod_l+0x57c>)
 8008816:	a819      	add	r0, sp, #100	@ 0x64
 8008818:	f002 f826 	bl	800a868 <__match>
 800881c:	2800      	cmp	r0, #0
 800881e:	f43f aec7 	beq.w	80085b0 <_strtod_l+0xa8>
 8008822:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b28      	cmp	r3, #40	@ 0x28
 8008828:	d12e      	bne.n	8008888 <_strtod_l+0x380>
 800882a:	4997      	ldr	r1, [pc, #604]	@ (8008a88 <_strtod_l+0x580>)
 800882c:	aa1c      	add	r2, sp, #112	@ 0x70
 800882e:	a819      	add	r0, sp, #100	@ 0x64
 8008830:	f002 f82e 	bl	800a890 <__hexnan>
 8008834:	2805      	cmp	r0, #5
 8008836:	d127      	bne.n	8008888 <_strtod_l+0x380>
 8008838:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800883a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800883e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008842:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008846:	e698      	b.n	800857a <_strtod_l+0x72>
 8008848:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800884a:	fb08 2101 	mla	r1, r8, r1, r2
 800884e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008852:	920e      	str	r2, [sp, #56]	@ 0x38
 8008854:	e7b5      	b.n	80087c2 <_strtod_l+0x2ba>
 8008856:	2a6e      	cmp	r2, #110	@ 0x6e
 8008858:	e7da      	b.n	8008810 <_strtod_l+0x308>
 800885a:	498c      	ldr	r1, [pc, #560]	@ (8008a8c <_strtod_l+0x584>)
 800885c:	a819      	add	r0, sp, #100	@ 0x64
 800885e:	f002 f803 	bl	800a868 <__match>
 8008862:	2800      	cmp	r0, #0
 8008864:	f43f aea4 	beq.w	80085b0 <_strtod_l+0xa8>
 8008868:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800886a:	4989      	ldr	r1, [pc, #548]	@ (8008a90 <_strtod_l+0x588>)
 800886c:	3b01      	subs	r3, #1
 800886e:	a819      	add	r0, sp, #100	@ 0x64
 8008870:	9319      	str	r3, [sp, #100]	@ 0x64
 8008872:	f001 fff9 	bl	800a868 <__match>
 8008876:	b910      	cbnz	r0, 800887e <_strtod_l+0x376>
 8008878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800887a:	3301      	adds	r3, #1
 800887c:	9319      	str	r3, [sp, #100]	@ 0x64
 800887e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008aa0 <_strtod_l+0x598>
 8008882:	f04f 0a00 	mov.w	sl, #0
 8008886:	e678      	b.n	800857a <_strtod_l+0x72>
 8008888:	4882      	ldr	r0, [pc, #520]	@ (8008a94 <_strtod_l+0x58c>)
 800888a:	f001 fd29 	bl	800a2e0 <nan>
 800888e:	ec5b ab10 	vmov	sl, fp, d0
 8008892:	e672      	b.n	800857a <_strtod_l+0x72>
 8008894:	eba8 0309 	sub.w	r3, r8, r9
 8008898:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800889a:	9309      	str	r3, [sp, #36]	@ 0x24
 800889c:	2f00      	cmp	r7, #0
 800889e:	bf08      	it	eq
 80088a0:	462f      	moveq	r7, r5
 80088a2:	2d10      	cmp	r5, #16
 80088a4:	462c      	mov	r4, r5
 80088a6:	bfa8      	it	ge
 80088a8:	2410      	movge	r4, #16
 80088aa:	f7f7 fe3b 	bl	8000524 <__aeabi_ui2d>
 80088ae:	2d09      	cmp	r5, #9
 80088b0:	4682      	mov	sl, r0
 80088b2:	468b      	mov	fp, r1
 80088b4:	dc13      	bgt.n	80088de <_strtod_l+0x3d6>
 80088b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f43f ae5e 	beq.w	800857a <_strtod_l+0x72>
 80088be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c0:	dd78      	ble.n	80089b4 <_strtod_l+0x4ac>
 80088c2:	2b16      	cmp	r3, #22
 80088c4:	dc5f      	bgt.n	8008986 <_strtod_l+0x47e>
 80088c6:	4974      	ldr	r1, [pc, #464]	@ (8008a98 <_strtod_l+0x590>)
 80088c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088d0:	4652      	mov	r2, sl
 80088d2:	465b      	mov	r3, fp
 80088d4:	f7f7 fea0 	bl	8000618 <__aeabi_dmul>
 80088d8:	4682      	mov	sl, r0
 80088da:	468b      	mov	fp, r1
 80088dc:	e64d      	b.n	800857a <_strtod_l+0x72>
 80088de:	4b6e      	ldr	r3, [pc, #440]	@ (8008a98 <_strtod_l+0x590>)
 80088e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80088e8:	f7f7 fe96 	bl	8000618 <__aeabi_dmul>
 80088ec:	4682      	mov	sl, r0
 80088ee:	9808      	ldr	r0, [sp, #32]
 80088f0:	468b      	mov	fp, r1
 80088f2:	f7f7 fe17 	bl	8000524 <__aeabi_ui2d>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4650      	mov	r0, sl
 80088fc:	4659      	mov	r1, fp
 80088fe:	f7f7 fcd5 	bl	80002ac <__adddf3>
 8008902:	2d0f      	cmp	r5, #15
 8008904:	4682      	mov	sl, r0
 8008906:	468b      	mov	fp, r1
 8008908:	ddd5      	ble.n	80088b6 <_strtod_l+0x3ae>
 800890a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800890c:	1b2c      	subs	r4, r5, r4
 800890e:	441c      	add	r4, r3
 8008910:	2c00      	cmp	r4, #0
 8008912:	f340 8096 	ble.w	8008a42 <_strtod_l+0x53a>
 8008916:	f014 030f 	ands.w	r3, r4, #15
 800891a:	d00a      	beq.n	8008932 <_strtod_l+0x42a>
 800891c:	495e      	ldr	r1, [pc, #376]	@ (8008a98 <_strtod_l+0x590>)
 800891e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008922:	4652      	mov	r2, sl
 8008924:	465b      	mov	r3, fp
 8008926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800892a:	f7f7 fe75 	bl	8000618 <__aeabi_dmul>
 800892e:	4682      	mov	sl, r0
 8008930:	468b      	mov	fp, r1
 8008932:	f034 040f 	bics.w	r4, r4, #15
 8008936:	d073      	beq.n	8008a20 <_strtod_l+0x518>
 8008938:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800893c:	dd48      	ble.n	80089d0 <_strtod_l+0x4c8>
 800893e:	2400      	movs	r4, #0
 8008940:	46a0      	mov	r8, r4
 8008942:	940a      	str	r4, [sp, #40]	@ 0x28
 8008944:	46a1      	mov	r9, r4
 8008946:	9a05      	ldr	r2, [sp, #20]
 8008948:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008aa0 <_strtod_l+0x598>
 800894c:	2322      	movs	r3, #34	@ 0x22
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	f04f 0a00 	mov.w	sl, #0
 8008954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008956:	2b00      	cmp	r3, #0
 8008958:	f43f ae0f 	beq.w	800857a <_strtod_l+0x72>
 800895c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800895e:	9805      	ldr	r0, [sp, #20]
 8008960:	f7ff f942 	bl	8007be8 <_Bfree>
 8008964:	9805      	ldr	r0, [sp, #20]
 8008966:	4649      	mov	r1, r9
 8008968:	f7ff f93e 	bl	8007be8 <_Bfree>
 800896c:	9805      	ldr	r0, [sp, #20]
 800896e:	4641      	mov	r1, r8
 8008970:	f7ff f93a 	bl	8007be8 <_Bfree>
 8008974:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008976:	9805      	ldr	r0, [sp, #20]
 8008978:	f7ff f936 	bl	8007be8 <_Bfree>
 800897c:	9805      	ldr	r0, [sp, #20]
 800897e:	4621      	mov	r1, r4
 8008980:	f7ff f932 	bl	8007be8 <_Bfree>
 8008984:	e5f9      	b.n	800857a <_strtod_l+0x72>
 8008986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008988:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800898c:	4293      	cmp	r3, r2
 800898e:	dbbc      	blt.n	800890a <_strtod_l+0x402>
 8008990:	4c41      	ldr	r4, [pc, #260]	@ (8008a98 <_strtod_l+0x590>)
 8008992:	f1c5 050f 	rsb	r5, r5, #15
 8008996:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800899a:	4652      	mov	r2, sl
 800899c:	465b      	mov	r3, fp
 800899e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a2:	f7f7 fe39 	bl	8000618 <__aeabi_dmul>
 80089a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a8:	1b5d      	subs	r5, r3, r5
 80089aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80089ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80089b2:	e78f      	b.n	80088d4 <_strtod_l+0x3cc>
 80089b4:	3316      	adds	r3, #22
 80089b6:	dba8      	blt.n	800890a <_strtod_l+0x402>
 80089b8:	4b37      	ldr	r3, [pc, #220]	@ (8008a98 <_strtod_l+0x590>)
 80089ba:	eba9 0808 	sub.w	r8, r9, r8
 80089be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80089c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80089c6:	4650      	mov	r0, sl
 80089c8:	4659      	mov	r1, fp
 80089ca:	f7f7 ff4f 	bl	800086c <__aeabi_ddiv>
 80089ce:	e783      	b.n	80088d8 <_strtod_l+0x3d0>
 80089d0:	4b32      	ldr	r3, [pc, #200]	@ (8008a9c <_strtod_l+0x594>)
 80089d2:	9308      	str	r3, [sp, #32]
 80089d4:	2300      	movs	r3, #0
 80089d6:	1124      	asrs	r4, r4, #4
 80089d8:	4650      	mov	r0, sl
 80089da:	4659      	mov	r1, fp
 80089dc:	461e      	mov	r6, r3
 80089de:	2c01      	cmp	r4, #1
 80089e0:	dc21      	bgt.n	8008a26 <_strtod_l+0x51e>
 80089e2:	b10b      	cbz	r3, 80089e8 <_strtod_l+0x4e0>
 80089e4:	4682      	mov	sl, r0
 80089e6:	468b      	mov	fp, r1
 80089e8:	492c      	ldr	r1, [pc, #176]	@ (8008a9c <_strtod_l+0x594>)
 80089ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80089ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80089f2:	4652      	mov	r2, sl
 80089f4:	465b      	mov	r3, fp
 80089f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089fa:	f7f7 fe0d 	bl	8000618 <__aeabi_dmul>
 80089fe:	4b28      	ldr	r3, [pc, #160]	@ (8008aa0 <_strtod_l+0x598>)
 8008a00:	460a      	mov	r2, r1
 8008a02:	400b      	ands	r3, r1
 8008a04:	4927      	ldr	r1, [pc, #156]	@ (8008aa4 <_strtod_l+0x59c>)
 8008a06:	428b      	cmp	r3, r1
 8008a08:	4682      	mov	sl, r0
 8008a0a:	d898      	bhi.n	800893e <_strtod_l+0x436>
 8008a0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008a10:	428b      	cmp	r3, r1
 8008a12:	bf86      	itte	hi
 8008a14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008aa8 <_strtod_l+0x5a0>
 8008a18:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008a1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008a20:	2300      	movs	r3, #0
 8008a22:	9308      	str	r3, [sp, #32]
 8008a24:	e07a      	b.n	8008b1c <_strtod_l+0x614>
 8008a26:	07e2      	lsls	r2, r4, #31
 8008a28:	d505      	bpl.n	8008a36 <_strtod_l+0x52e>
 8008a2a:	9b08      	ldr	r3, [sp, #32]
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f7f7 fdf2 	bl	8000618 <__aeabi_dmul>
 8008a34:	2301      	movs	r3, #1
 8008a36:	9a08      	ldr	r2, [sp, #32]
 8008a38:	3208      	adds	r2, #8
 8008a3a:	3601      	adds	r6, #1
 8008a3c:	1064      	asrs	r4, r4, #1
 8008a3e:	9208      	str	r2, [sp, #32]
 8008a40:	e7cd      	b.n	80089de <_strtod_l+0x4d6>
 8008a42:	d0ed      	beq.n	8008a20 <_strtod_l+0x518>
 8008a44:	4264      	negs	r4, r4
 8008a46:	f014 020f 	ands.w	r2, r4, #15
 8008a4a:	d00a      	beq.n	8008a62 <_strtod_l+0x55a>
 8008a4c:	4b12      	ldr	r3, [pc, #72]	@ (8008a98 <_strtod_l+0x590>)
 8008a4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a52:	4650      	mov	r0, sl
 8008a54:	4659      	mov	r1, fp
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 ff07 	bl	800086c <__aeabi_ddiv>
 8008a5e:	4682      	mov	sl, r0
 8008a60:	468b      	mov	fp, r1
 8008a62:	1124      	asrs	r4, r4, #4
 8008a64:	d0dc      	beq.n	8008a20 <_strtod_l+0x518>
 8008a66:	2c1f      	cmp	r4, #31
 8008a68:	dd20      	ble.n	8008aac <_strtod_l+0x5a4>
 8008a6a:	2400      	movs	r4, #0
 8008a6c:	46a0      	mov	r8, r4
 8008a6e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008a70:	46a1      	mov	r9, r4
 8008a72:	9a05      	ldr	r2, [sp, #20]
 8008a74:	2322      	movs	r3, #34	@ 0x22
 8008a76:	f04f 0a00 	mov.w	sl, #0
 8008a7a:	f04f 0b00 	mov.w	fp, #0
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	e768      	b.n	8008954 <_strtod_l+0x44c>
 8008a82:	bf00      	nop
 8008a84:	0800ad49 	.word	0x0800ad49
 8008a88:	0800af5c 	.word	0x0800af5c
 8008a8c:	0800ad41 	.word	0x0800ad41
 8008a90:	0800ad76 	.word	0x0800ad76
 8008a94:	0800b120 	.word	0x0800b120
 8008a98:	0800ae90 	.word	0x0800ae90
 8008a9c:	0800ae68 	.word	0x0800ae68
 8008aa0:	7ff00000 	.word	0x7ff00000
 8008aa4:	7ca00000 	.word	0x7ca00000
 8008aa8:	7fefffff 	.word	0x7fefffff
 8008aac:	f014 0310 	ands.w	r3, r4, #16
 8008ab0:	bf18      	it	ne
 8008ab2:	236a      	movne	r3, #106	@ 0x6a
 8008ab4:	4ea9      	ldr	r6, [pc, #676]	@ (8008d5c <_strtod_l+0x854>)
 8008ab6:	9308      	str	r3, [sp, #32]
 8008ab8:	4650      	mov	r0, sl
 8008aba:	4659      	mov	r1, fp
 8008abc:	2300      	movs	r3, #0
 8008abe:	07e2      	lsls	r2, r4, #31
 8008ac0:	d504      	bpl.n	8008acc <_strtod_l+0x5c4>
 8008ac2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ac6:	f7f7 fda7 	bl	8000618 <__aeabi_dmul>
 8008aca:	2301      	movs	r3, #1
 8008acc:	1064      	asrs	r4, r4, #1
 8008ace:	f106 0608 	add.w	r6, r6, #8
 8008ad2:	d1f4      	bne.n	8008abe <_strtod_l+0x5b6>
 8008ad4:	b10b      	cbz	r3, 8008ada <_strtod_l+0x5d2>
 8008ad6:	4682      	mov	sl, r0
 8008ad8:	468b      	mov	fp, r1
 8008ada:	9b08      	ldr	r3, [sp, #32]
 8008adc:	b1b3      	cbz	r3, 8008b0c <_strtod_l+0x604>
 8008ade:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008ae2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	4659      	mov	r1, fp
 8008aea:	dd0f      	ble.n	8008b0c <_strtod_l+0x604>
 8008aec:	2b1f      	cmp	r3, #31
 8008aee:	dd55      	ble.n	8008b9c <_strtod_l+0x694>
 8008af0:	2b34      	cmp	r3, #52	@ 0x34
 8008af2:	bfde      	ittt	le
 8008af4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008af8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008afc:	4093      	lslle	r3, r2
 8008afe:	f04f 0a00 	mov.w	sl, #0
 8008b02:	bfcc      	ite	gt
 8008b04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008b08:	ea03 0b01 	andle.w	fp, r3, r1
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2300      	movs	r3, #0
 8008b10:	4650      	mov	r0, sl
 8008b12:	4659      	mov	r1, fp
 8008b14:	f7f7 ffe8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d1a6      	bne.n	8008a6a <_strtod_l+0x562>
 8008b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008b22:	9805      	ldr	r0, [sp, #20]
 8008b24:	462b      	mov	r3, r5
 8008b26:	463a      	mov	r2, r7
 8008b28:	f7ff f8c6 	bl	8007cb8 <__s2b>
 8008b2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f43f af05 	beq.w	800893e <_strtod_l+0x436>
 8008b34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	eba9 0308 	sub.w	r3, r9, r8
 8008b3c:	bfa8      	it	ge
 8008b3e:	2300      	movge	r3, #0
 8008b40:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b42:	2400      	movs	r4, #0
 8008b44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008b48:	9316      	str	r3, [sp, #88]	@ 0x58
 8008b4a:	46a0      	mov	r8, r4
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b4e:	9805      	ldr	r0, [sp, #20]
 8008b50:	6859      	ldr	r1, [r3, #4]
 8008b52:	f7ff f809 	bl	8007b68 <_Balloc>
 8008b56:	4681      	mov	r9, r0
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	f43f aef4 	beq.w	8008946 <_strtod_l+0x43e>
 8008b5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b60:	691a      	ldr	r2, [r3, #16]
 8008b62:	3202      	adds	r2, #2
 8008b64:	f103 010c 	add.w	r1, r3, #12
 8008b68:	0092      	lsls	r2, r2, #2
 8008b6a:	300c      	adds	r0, #12
 8008b6c:	f001 fbaa 	bl	800a2c4 <memcpy>
 8008b70:	ec4b ab10 	vmov	d0, sl, fp
 8008b74:	9805      	ldr	r0, [sp, #20]
 8008b76:	aa1c      	add	r2, sp, #112	@ 0x70
 8008b78:	a91b      	add	r1, sp, #108	@ 0x6c
 8008b7a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008b7e:	f7ff fbd7 	bl	8008330 <__d2b>
 8008b82:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f43f aede 	beq.w	8008946 <_strtod_l+0x43e>
 8008b8a:	9805      	ldr	r0, [sp, #20]
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	f7ff f929 	bl	8007de4 <__i2b>
 8008b92:	4680      	mov	r8, r0
 8008b94:	b948      	cbnz	r0, 8008baa <_strtod_l+0x6a2>
 8008b96:	f04f 0800 	mov.w	r8, #0
 8008b9a:	e6d4      	b.n	8008946 <_strtod_l+0x43e>
 8008b9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	ea03 0a0a 	and.w	sl, r3, sl
 8008ba8:	e7b0      	b.n	8008b0c <_strtod_l+0x604>
 8008baa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008bac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008bae:	2d00      	cmp	r5, #0
 8008bb0:	bfab      	itete	ge
 8008bb2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008bb4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008bb6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008bb8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008bba:	bfac      	ite	ge
 8008bbc:	18ef      	addge	r7, r5, r3
 8008bbe:	1b5e      	sublt	r6, r3, r5
 8008bc0:	9b08      	ldr	r3, [sp, #32]
 8008bc2:	1aed      	subs	r5, r5, r3
 8008bc4:	4415      	add	r5, r2
 8008bc6:	4b66      	ldr	r3, [pc, #408]	@ (8008d60 <_strtod_l+0x858>)
 8008bc8:	3d01      	subs	r5, #1
 8008bca:	429d      	cmp	r5, r3
 8008bcc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008bd0:	da50      	bge.n	8008c74 <_strtod_l+0x76c>
 8008bd2:	1b5b      	subs	r3, r3, r5
 8008bd4:	2b1f      	cmp	r3, #31
 8008bd6:	eba2 0203 	sub.w	r2, r2, r3
 8008bda:	f04f 0101 	mov.w	r1, #1
 8008bde:	dc3d      	bgt.n	8008c5c <_strtod_l+0x754>
 8008be0:	fa01 f303 	lsl.w	r3, r1, r3
 8008be4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008be6:	2300      	movs	r3, #0
 8008be8:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bea:	18bd      	adds	r5, r7, r2
 8008bec:	9b08      	ldr	r3, [sp, #32]
 8008bee:	42af      	cmp	r7, r5
 8008bf0:	4416      	add	r6, r2
 8008bf2:	441e      	add	r6, r3
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	bfa8      	it	ge
 8008bf8:	462b      	movge	r3, r5
 8008bfa:	42b3      	cmp	r3, r6
 8008bfc:	bfa8      	it	ge
 8008bfe:	4633      	movge	r3, r6
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	bfc2      	ittt	gt
 8008c04:	1aed      	subgt	r5, r5, r3
 8008c06:	1af6      	subgt	r6, r6, r3
 8008c08:	1aff      	subgt	r7, r7, r3
 8008c0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	dd16      	ble.n	8008c3e <_strtod_l+0x736>
 8008c10:	4641      	mov	r1, r8
 8008c12:	9805      	ldr	r0, [sp, #20]
 8008c14:	461a      	mov	r2, r3
 8008c16:	f7ff f9a5 	bl	8007f64 <__pow5mult>
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0ba      	beq.n	8008b96 <_strtod_l+0x68e>
 8008c20:	4601      	mov	r1, r0
 8008c22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c24:	9805      	ldr	r0, [sp, #20]
 8008c26:	f7ff f8f3 	bl	8007e10 <__multiply>
 8008c2a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	f43f ae8a 	beq.w	8008946 <_strtod_l+0x43e>
 8008c32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c34:	9805      	ldr	r0, [sp, #20]
 8008c36:	f7fe ffd7 	bl	8007be8 <_Bfree>
 8008c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c3e:	2d00      	cmp	r5, #0
 8008c40:	dc1d      	bgt.n	8008c7e <_strtod_l+0x776>
 8008c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dd23      	ble.n	8008c90 <_strtod_l+0x788>
 8008c48:	4649      	mov	r1, r9
 8008c4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008c4c:	9805      	ldr	r0, [sp, #20]
 8008c4e:	f7ff f989 	bl	8007f64 <__pow5mult>
 8008c52:	4681      	mov	r9, r0
 8008c54:	b9e0      	cbnz	r0, 8008c90 <_strtod_l+0x788>
 8008c56:	f04f 0900 	mov.w	r9, #0
 8008c5a:	e674      	b.n	8008946 <_strtod_l+0x43e>
 8008c5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008c60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008c64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008c68:	35e2      	adds	r5, #226	@ 0xe2
 8008c6a:	fa01 f305 	lsl.w	r3, r1, r5
 8008c6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c70:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008c72:	e7ba      	b.n	8008bea <_strtod_l+0x6e2>
 8008c74:	2300      	movs	r3, #0
 8008c76:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c78:	2301      	movs	r3, #1
 8008c7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c7c:	e7b5      	b.n	8008bea <_strtod_l+0x6e2>
 8008c7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c80:	9805      	ldr	r0, [sp, #20]
 8008c82:	462a      	mov	r2, r5
 8008c84:	f7ff f9c8 	bl	8008018 <__lshift>
 8008c88:	901a      	str	r0, [sp, #104]	@ 0x68
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d1d9      	bne.n	8008c42 <_strtod_l+0x73a>
 8008c8e:	e65a      	b.n	8008946 <_strtod_l+0x43e>
 8008c90:	2e00      	cmp	r6, #0
 8008c92:	dd07      	ble.n	8008ca4 <_strtod_l+0x79c>
 8008c94:	4649      	mov	r1, r9
 8008c96:	9805      	ldr	r0, [sp, #20]
 8008c98:	4632      	mov	r2, r6
 8008c9a:	f7ff f9bd 	bl	8008018 <__lshift>
 8008c9e:	4681      	mov	r9, r0
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	d0d8      	beq.n	8008c56 <_strtod_l+0x74e>
 8008ca4:	2f00      	cmp	r7, #0
 8008ca6:	dd08      	ble.n	8008cba <_strtod_l+0x7b2>
 8008ca8:	4641      	mov	r1, r8
 8008caa:	9805      	ldr	r0, [sp, #20]
 8008cac:	463a      	mov	r2, r7
 8008cae:	f7ff f9b3 	bl	8008018 <__lshift>
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	f43f ae46 	beq.w	8008946 <_strtod_l+0x43e>
 8008cba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cbc:	9805      	ldr	r0, [sp, #20]
 8008cbe:	464a      	mov	r2, r9
 8008cc0:	f7ff fa32 	bl	8008128 <__mdiff>
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f43f ae3d 	beq.w	8008946 <_strtod_l+0x43e>
 8008ccc:	68c3      	ldr	r3, [r0, #12]
 8008cce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	60c3      	str	r3, [r0, #12]
 8008cd4:	4641      	mov	r1, r8
 8008cd6:	f7ff fa0b 	bl	80080f0 <__mcmp>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	da46      	bge.n	8008d6c <_strtod_l+0x864>
 8008cde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ce0:	ea53 030a 	orrs.w	r3, r3, sl
 8008ce4:	d16c      	bne.n	8008dc0 <_strtod_l+0x8b8>
 8008ce6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d168      	bne.n	8008dc0 <_strtod_l+0x8b8>
 8008cee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cf2:	0d1b      	lsrs	r3, r3, #20
 8008cf4:	051b      	lsls	r3, r3, #20
 8008cf6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008cfa:	d961      	bls.n	8008dc0 <_strtod_l+0x8b8>
 8008cfc:	6963      	ldr	r3, [r4, #20]
 8008cfe:	b913      	cbnz	r3, 8008d06 <_strtod_l+0x7fe>
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	dd5c      	ble.n	8008dc0 <_strtod_l+0x8b8>
 8008d06:	4621      	mov	r1, r4
 8008d08:	2201      	movs	r2, #1
 8008d0a:	9805      	ldr	r0, [sp, #20]
 8008d0c:	f7ff f984 	bl	8008018 <__lshift>
 8008d10:	4641      	mov	r1, r8
 8008d12:	4604      	mov	r4, r0
 8008d14:	f7ff f9ec 	bl	80080f0 <__mcmp>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dd51      	ble.n	8008dc0 <_strtod_l+0x8b8>
 8008d1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d20:	9a08      	ldr	r2, [sp, #32]
 8008d22:	0d1b      	lsrs	r3, r3, #20
 8008d24:	051b      	lsls	r3, r3, #20
 8008d26:	2a00      	cmp	r2, #0
 8008d28:	d06b      	beq.n	8008e02 <_strtod_l+0x8fa>
 8008d2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d2e:	d868      	bhi.n	8008e02 <_strtod_l+0x8fa>
 8008d30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008d34:	f67f ae9d 	bls.w	8008a72 <_strtod_l+0x56a>
 8008d38:	4b0a      	ldr	r3, [pc, #40]	@ (8008d64 <_strtod_l+0x85c>)
 8008d3a:	4650      	mov	r0, sl
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f7f7 fc6a 	bl	8000618 <__aeabi_dmul>
 8008d44:	4b08      	ldr	r3, [pc, #32]	@ (8008d68 <_strtod_l+0x860>)
 8008d46:	400b      	ands	r3, r1
 8008d48:	4682      	mov	sl, r0
 8008d4a:	468b      	mov	fp, r1
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f47f ae05 	bne.w	800895c <_strtod_l+0x454>
 8008d52:	9a05      	ldr	r2, [sp, #20]
 8008d54:	2322      	movs	r3, #34	@ 0x22
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	e600      	b.n	800895c <_strtod_l+0x454>
 8008d5a:	bf00      	nop
 8008d5c:	0800af88 	.word	0x0800af88
 8008d60:	fffffc02 	.word	0xfffffc02
 8008d64:	39500000 	.word	0x39500000
 8008d68:	7ff00000 	.word	0x7ff00000
 8008d6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008d70:	d165      	bne.n	8008e3e <_strtod_l+0x936>
 8008d72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008d74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d78:	b35a      	cbz	r2, 8008dd2 <_strtod_l+0x8ca>
 8008d7a:	4a9f      	ldr	r2, [pc, #636]	@ (8008ff8 <_strtod_l+0xaf0>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d12b      	bne.n	8008dd8 <_strtod_l+0x8d0>
 8008d80:	9b08      	ldr	r3, [sp, #32]
 8008d82:	4651      	mov	r1, sl
 8008d84:	b303      	cbz	r3, 8008dc8 <_strtod_l+0x8c0>
 8008d86:	4b9d      	ldr	r3, [pc, #628]	@ (8008ffc <_strtod_l+0xaf4>)
 8008d88:	465a      	mov	r2, fp
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d94:	d81b      	bhi.n	8008dce <_strtod_l+0x8c6>
 8008d96:	0d1b      	lsrs	r3, r3, #20
 8008d98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008da0:	4299      	cmp	r1, r3
 8008da2:	d119      	bne.n	8008dd8 <_strtod_l+0x8d0>
 8008da4:	4b96      	ldr	r3, [pc, #600]	@ (8009000 <_strtod_l+0xaf8>)
 8008da6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d102      	bne.n	8008db2 <_strtod_l+0x8aa>
 8008dac:	3101      	adds	r1, #1
 8008dae:	f43f adca 	beq.w	8008946 <_strtod_l+0x43e>
 8008db2:	4b92      	ldr	r3, [pc, #584]	@ (8008ffc <_strtod_l+0xaf4>)
 8008db4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008db6:	401a      	ands	r2, r3
 8008db8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008dbc:	f04f 0a00 	mov.w	sl, #0
 8008dc0:	9b08      	ldr	r3, [sp, #32]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1b8      	bne.n	8008d38 <_strtod_l+0x830>
 8008dc6:	e5c9      	b.n	800895c <_strtod_l+0x454>
 8008dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dcc:	e7e8      	b.n	8008da0 <_strtod_l+0x898>
 8008dce:	4613      	mov	r3, r2
 8008dd0:	e7e6      	b.n	8008da0 <_strtod_l+0x898>
 8008dd2:	ea53 030a 	orrs.w	r3, r3, sl
 8008dd6:	d0a1      	beq.n	8008d1c <_strtod_l+0x814>
 8008dd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008dda:	b1db      	cbz	r3, 8008e14 <_strtod_l+0x90c>
 8008ddc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dde:	4213      	tst	r3, r2
 8008de0:	d0ee      	beq.n	8008dc0 <_strtod_l+0x8b8>
 8008de2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008de4:	9a08      	ldr	r2, [sp, #32]
 8008de6:	4650      	mov	r0, sl
 8008de8:	4659      	mov	r1, fp
 8008dea:	b1bb      	cbz	r3, 8008e1c <_strtod_l+0x914>
 8008dec:	f7ff fb6e 	bl	80084cc <sulp>
 8008df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008df4:	ec53 2b10 	vmov	r2, r3, d0
 8008df8:	f7f7 fa58 	bl	80002ac <__adddf3>
 8008dfc:	4682      	mov	sl, r0
 8008dfe:	468b      	mov	fp, r1
 8008e00:	e7de      	b.n	8008dc0 <_strtod_l+0x8b8>
 8008e02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008e06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e0e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008e12:	e7d5      	b.n	8008dc0 <_strtod_l+0x8b8>
 8008e14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e16:	ea13 0f0a 	tst.w	r3, sl
 8008e1a:	e7e1      	b.n	8008de0 <_strtod_l+0x8d8>
 8008e1c:	f7ff fb56 	bl	80084cc <sulp>
 8008e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e24:	ec53 2b10 	vmov	r2, r3, d0
 8008e28:	f7f7 fa3e 	bl	80002a8 <__aeabi_dsub>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2300      	movs	r3, #0
 8008e30:	4682      	mov	sl, r0
 8008e32:	468b      	mov	fp, r1
 8008e34:	f7f7 fe58 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d0c1      	beq.n	8008dc0 <_strtod_l+0x8b8>
 8008e3c:	e619      	b.n	8008a72 <_strtod_l+0x56a>
 8008e3e:	4641      	mov	r1, r8
 8008e40:	4620      	mov	r0, r4
 8008e42:	f7ff facd 	bl	80083e0 <__ratio>
 8008e46:	ec57 6b10 	vmov	r6, r7, d0
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008e50:	4630      	mov	r0, r6
 8008e52:	4639      	mov	r1, r7
 8008e54:	f7f7 fe5c 	bl	8000b10 <__aeabi_dcmple>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d06f      	beq.n	8008f3c <_strtod_l+0xa34>
 8008e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d17a      	bne.n	8008f58 <_strtod_l+0xa50>
 8008e62:	f1ba 0f00 	cmp.w	sl, #0
 8008e66:	d158      	bne.n	8008f1a <_strtod_l+0xa12>
 8008e68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d15a      	bne.n	8008f28 <_strtod_l+0xa20>
 8008e72:	4b64      	ldr	r3, [pc, #400]	@ (8009004 <_strtod_l+0xafc>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	4630      	mov	r0, r6
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 fe3f 	bl	8000afc <__aeabi_dcmplt>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d159      	bne.n	8008f36 <_strtod_l+0xa2e>
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	4b60      	ldr	r3, [pc, #384]	@ (8009008 <_strtod_l+0xb00>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f7f7 fbc5 	bl	8000618 <__aeabi_dmul>
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460f      	mov	r7, r1
 8008e92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008e96:	9606      	str	r6, [sp, #24]
 8008e98:	9307      	str	r3, [sp, #28]
 8008e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e9e:	4d57      	ldr	r5, [pc, #348]	@ (8008ffc <_strtod_l+0xaf4>)
 8008ea0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ea6:	401d      	ands	r5, r3
 8008ea8:	4b58      	ldr	r3, [pc, #352]	@ (800900c <_strtod_l+0xb04>)
 8008eaa:	429d      	cmp	r5, r3
 8008eac:	f040 80b2 	bne.w	8009014 <_strtod_l+0xb0c>
 8008eb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008eb6:	ec4b ab10 	vmov	d0, sl, fp
 8008eba:	f7ff f9c9 	bl	8008250 <__ulp>
 8008ebe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ec2:	ec51 0b10 	vmov	r0, r1, d0
 8008ec6:	f7f7 fba7 	bl	8000618 <__aeabi_dmul>
 8008eca:	4652      	mov	r2, sl
 8008ecc:	465b      	mov	r3, fp
 8008ece:	f7f7 f9ed 	bl	80002ac <__adddf3>
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4949      	ldr	r1, [pc, #292]	@ (8008ffc <_strtod_l+0xaf4>)
 8008ed6:	4a4e      	ldr	r2, [pc, #312]	@ (8009010 <_strtod_l+0xb08>)
 8008ed8:	4019      	ands	r1, r3
 8008eda:	4291      	cmp	r1, r2
 8008edc:	4682      	mov	sl, r0
 8008ede:	d942      	bls.n	8008f66 <_strtod_l+0xa5e>
 8008ee0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ee2:	4b47      	ldr	r3, [pc, #284]	@ (8009000 <_strtod_l+0xaf8>)
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d103      	bne.n	8008ef0 <_strtod_l+0x9e8>
 8008ee8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008eea:	3301      	adds	r3, #1
 8008eec:	f43f ad2b 	beq.w	8008946 <_strtod_l+0x43e>
 8008ef0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009000 <_strtod_l+0xaf8>
 8008ef4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008ef8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008efa:	9805      	ldr	r0, [sp, #20]
 8008efc:	f7fe fe74 	bl	8007be8 <_Bfree>
 8008f00:	9805      	ldr	r0, [sp, #20]
 8008f02:	4649      	mov	r1, r9
 8008f04:	f7fe fe70 	bl	8007be8 <_Bfree>
 8008f08:	9805      	ldr	r0, [sp, #20]
 8008f0a:	4641      	mov	r1, r8
 8008f0c:	f7fe fe6c 	bl	8007be8 <_Bfree>
 8008f10:	9805      	ldr	r0, [sp, #20]
 8008f12:	4621      	mov	r1, r4
 8008f14:	f7fe fe68 	bl	8007be8 <_Bfree>
 8008f18:	e618      	b.n	8008b4c <_strtod_l+0x644>
 8008f1a:	f1ba 0f01 	cmp.w	sl, #1
 8008f1e:	d103      	bne.n	8008f28 <_strtod_l+0xa20>
 8008f20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f43f ada5 	beq.w	8008a72 <_strtod_l+0x56a>
 8008f28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008fd8 <_strtod_l+0xad0>
 8008f2c:	4f35      	ldr	r7, [pc, #212]	@ (8009004 <_strtod_l+0xafc>)
 8008f2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f32:	2600      	movs	r6, #0
 8008f34:	e7b1      	b.n	8008e9a <_strtod_l+0x992>
 8008f36:	4f34      	ldr	r7, [pc, #208]	@ (8009008 <_strtod_l+0xb00>)
 8008f38:	2600      	movs	r6, #0
 8008f3a:	e7aa      	b.n	8008e92 <_strtod_l+0x98a>
 8008f3c:	4b32      	ldr	r3, [pc, #200]	@ (8009008 <_strtod_l+0xb00>)
 8008f3e:	4630      	mov	r0, r6
 8008f40:	4639      	mov	r1, r7
 8008f42:	2200      	movs	r2, #0
 8008f44:	f7f7 fb68 	bl	8000618 <__aeabi_dmul>
 8008f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d09f      	beq.n	8008e92 <_strtod_l+0x98a>
 8008f52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008f56:	e7a0      	b.n	8008e9a <_strtod_l+0x992>
 8008f58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008fe0 <_strtod_l+0xad8>
 8008f5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f60:	ec57 6b17 	vmov	r6, r7, d7
 8008f64:	e799      	b.n	8008e9a <_strtod_l+0x992>
 8008f66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008f6a:	9b08      	ldr	r3, [sp, #32]
 8008f6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1c1      	bne.n	8008ef8 <_strtod_l+0x9f0>
 8008f74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f78:	0d1b      	lsrs	r3, r3, #20
 8008f7a:	051b      	lsls	r3, r3, #20
 8008f7c:	429d      	cmp	r5, r3
 8008f7e:	d1bb      	bne.n	8008ef8 <_strtod_l+0x9f0>
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 fea8 	bl	8000cd8 <__aeabi_d2lz>
 8008f88:	f7f7 fb18 	bl	80005bc <__aeabi_l2d>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4630      	mov	r0, r6
 8008f92:	4639      	mov	r1, r7
 8008f94:	f7f7 f988 	bl	80002a8 <__aeabi_dsub>
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008fa0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fa6:	ea46 060a 	orr.w	r6, r6, sl
 8008faa:	431e      	orrs	r6, r3
 8008fac:	d06f      	beq.n	800908e <_strtod_l+0xb86>
 8008fae:	a30e      	add	r3, pc, #56	@ (adr r3, 8008fe8 <_strtod_l+0xae0>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f7f7 fda2 	bl	8000afc <__aeabi_dcmplt>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	f47f accf 	bne.w	800895c <_strtod_l+0x454>
 8008fbe:	a30c      	add	r3, pc, #48	@ (adr r3, 8008ff0 <_strtod_l+0xae8>)
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008fc8:	f7f7 fdb6 	bl	8000b38 <__aeabi_dcmpgt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d093      	beq.n	8008ef8 <_strtod_l+0x9f0>
 8008fd0:	e4c4      	b.n	800895c <_strtod_l+0x454>
 8008fd2:	bf00      	nop
 8008fd4:	f3af 8000 	nop.w
 8008fd8:	00000000 	.word	0x00000000
 8008fdc:	bff00000 	.word	0xbff00000
 8008fe0:	00000000 	.word	0x00000000
 8008fe4:	3ff00000 	.word	0x3ff00000
 8008fe8:	94a03595 	.word	0x94a03595
 8008fec:	3fdfffff 	.word	0x3fdfffff
 8008ff0:	35afe535 	.word	0x35afe535
 8008ff4:	3fe00000 	.word	0x3fe00000
 8008ff8:	000fffff 	.word	0x000fffff
 8008ffc:	7ff00000 	.word	0x7ff00000
 8009000:	7fefffff 	.word	0x7fefffff
 8009004:	3ff00000 	.word	0x3ff00000
 8009008:	3fe00000 	.word	0x3fe00000
 800900c:	7fe00000 	.word	0x7fe00000
 8009010:	7c9fffff 	.word	0x7c9fffff
 8009014:	9b08      	ldr	r3, [sp, #32]
 8009016:	b323      	cbz	r3, 8009062 <_strtod_l+0xb5a>
 8009018:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800901c:	d821      	bhi.n	8009062 <_strtod_l+0xb5a>
 800901e:	a328      	add	r3, pc, #160	@ (adr r3, 80090c0 <_strtod_l+0xbb8>)
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 fd72 	bl	8000b10 <__aeabi_dcmple>
 800902c:	b1a0      	cbz	r0, 8009058 <_strtod_l+0xb50>
 800902e:	4639      	mov	r1, r7
 8009030:	4630      	mov	r0, r6
 8009032:	f7f7 fdc9 	bl	8000bc8 <__aeabi_d2uiz>
 8009036:	2801      	cmp	r0, #1
 8009038:	bf38      	it	cc
 800903a:	2001      	movcc	r0, #1
 800903c:	f7f7 fa72 	bl	8000524 <__aeabi_ui2d>
 8009040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009042:	4606      	mov	r6, r0
 8009044:	460f      	mov	r7, r1
 8009046:	b9fb      	cbnz	r3, 8009088 <_strtod_l+0xb80>
 8009048:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800904c:	9014      	str	r0, [sp, #80]	@ 0x50
 800904e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009050:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009054:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009058:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800905a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800905e:	1b5b      	subs	r3, r3, r5
 8009060:	9311      	str	r3, [sp, #68]	@ 0x44
 8009062:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009066:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800906a:	f7ff f8f1 	bl	8008250 <__ulp>
 800906e:	4650      	mov	r0, sl
 8009070:	ec53 2b10 	vmov	r2, r3, d0
 8009074:	4659      	mov	r1, fp
 8009076:	f7f7 facf 	bl	8000618 <__aeabi_dmul>
 800907a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800907e:	f7f7 f915 	bl	80002ac <__adddf3>
 8009082:	4682      	mov	sl, r0
 8009084:	468b      	mov	fp, r1
 8009086:	e770      	b.n	8008f6a <_strtod_l+0xa62>
 8009088:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800908c:	e7e0      	b.n	8009050 <_strtod_l+0xb48>
 800908e:	a30e      	add	r3, pc, #56	@ (adr r3, 80090c8 <_strtod_l+0xbc0>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 fd32 	bl	8000afc <__aeabi_dcmplt>
 8009098:	e798      	b.n	8008fcc <_strtod_l+0xac4>
 800909a:	2300      	movs	r3, #0
 800909c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800909e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80090a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	f7ff ba6d 	b.w	8008582 <_strtod_l+0x7a>
 80090a8:	2a65      	cmp	r2, #101	@ 0x65
 80090aa:	f43f ab66 	beq.w	800877a <_strtod_l+0x272>
 80090ae:	2a45      	cmp	r2, #69	@ 0x45
 80090b0:	f43f ab63 	beq.w	800877a <_strtod_l+0x272>
 80090b4:	2301      	movs	r3, #1
 80090b6:	f7ff bb9e 	b.w	80087f6 <_strtod_l+0x2ee>
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w
 80090c0:	ffc00000 	.word	0xffc00000
 80090c4:	41dfffff 	.word	0x41dfffff
 80090c8:	94a03595 	.word	0x94a03595
 80090cc:	3fcfffff 	.word	0x3fcfffff

080090d0 <_strtod_r>:
 80090d0:	4b01      	ldr	r3, [pc, #4]	@ (80090d8 <_strtod_r+0x8>)
 80090d2:	f7ff ba19 	b.w	8008508 <_strtod_l>
 80090d6:	bf00      	nop
 80090d8:	20000068 	.word	0x20000068

080090dc <_strtol_l.constprop.0>:
 80090dc:	2b24      	cmp	r3, #36	@ 0x24
 80090de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e2:	4686      	mov	lr, r0
 80090e4:	4690      	mov	r8, r2
 80090e6:	d801      	bhi.n	80090ec <_strtol_l.constprop.0+0x10>
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d106      	bne.n	80090fa <_strtol_l.constprop.0+0x1e>
 80090ec:	f7fd fdba 	bl	8006c64 <__errno>
 80090f0:	2316      	movs	r3, #22
 80090f2:	6003      	str	r3, [r0, #0]
 80090f4:	2000      	movs	r0, #0
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	4834      	ldr	r0, [pc, #208]	@ (80091cc <_strtol_l.constprop.0+0xf0>)
 80090fc:	460d      	mov	r5, r1
 80090fe:	462a      	mov	r2, r5
 8009100:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009104:	5d06      	ldrb	r6, [r0, r4]
 8009106:	f016 0608 	ands.w	r6, r6, #8
 800910a:	d1f8      	bne.n	80090fe <_strtol_l.constprop.0+0x22>
 800910c:	2c2d      	cmp	r4, #45	@ 0x2d
 800910e:	d12d      	bne.n	800916c <_strtol_l.constprop.0+0x90>
 8009110:	782c      	ldrb	r4, [r5, #0]
 8009112:	2601      	movs	r6, #1
 8009114:	1c95      	adds	r5, r2, #2
 8009116:	f033 0210 	bics.w	r2, r3, #16
 800911a:	d109      	bne.n	8009130 <_strtol_l.constprop.0+0x54>
 800911c:	2c30      	cmp	r4, #48	@ 0x30
 800911e:	d12a      	bne.n	8009176 <_strtol_l.constprop.0+0x9a>
 8009120:	782a      	ldrb	r2, [r5, #0]
 8009122:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009126:	2a58      	cmp	r2, #88	@ 0x58
 8009128:	d125      	bne.n	8009176 <_strtol_l.constprop.0+0x9a>
 800912a:	786c      	ldrb	r4, [r5, #1]
 800912c:	2310      	movs	r3, #16
 800912e:	3502      	adds	r5, #2
 8009130:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009134:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009138:	2200      	movs	r2, #0
 800913a:	fbbc f9f3 	udiv	r9, ip, r3
 800913e:	4610      	mov	r0, r2
 8009140:	fb03 ca19 	mls	sl, r3, r9, ip
 8009144:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009148:	2f09      	cmp	r7, #9
 800914a:	d81b      	bhi.n	8009184 <_strtol_l.constprop.0+0xa8>
 800914c:	463c      	mov	r4, r7
 800914e:	42a3      	cmp	r3, r4
 8009150:	dd27      	ble.n	80091a2 <_strtol_l.constprop.0+0xc6>
 8009152:	1c57      	adds	r7, r2, #1
 8009154:	d007      	beq.n	8009166 <_strtol_l.constprop.0+0x8a>
 8009156:	4581      	cmp	r9, r0
 8009158:	d320      	bcc.n	800919c <_strtol_l.constprop.0+0xc0>
 800915a:	d101      	bne.n	8009160 <_strtol_l.constprop.0+0x84>
 800915c:	45a2      	cmp	sl, r4
 800915e:	db1d      	blt.n	800919c <_strtol_l.constprop.0+0xc0>
 8009160:	fb00 4003 	mla	r0, r0, r3, r4
 8009164:	2201      	movs	r2, #1
 8009166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800916a:	e7eb      	b.n	8009144 <_strtol_l.constprop.0+0x68>
 800916c:	2c2b      	cmp	r4, #43	@ 0x2b
 800916e:	bf04      	itt	eq
 8009170:	782c      	ldrbeq	r4, [r5, #0]
 8009172:	1c95      	addeq	r5, r2, #2
 8009174:	e7cf      	b.n	8009116 <_strtol_l.constprop.0+0x3a>
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1da      	bne.n	8009130 <_strtol_l.constprop.0+0x54>
 800917a:	2c30      	cmp	r4, #48	@ 0x30
 800917c:	bf0c      	ite	eq
 800917e:	2308      	moveq	r3, #8
 8009180:	230a      	movne	r3, #10
 8009182:	e7d5      	b.n	8009130 <_strtol_l.constprop.0+0x54>
 8009184:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009188:	2f19      	cmp	r7, #25
 800918a:	d801      	bhi.n	8009190 <_strtol_l.constprop.0+0xb4>
 800918c:	3c37      	subs	r4, #55	@ 0x37
 800918e:	e7de      	b.n	800914e <_strtol_l.constprop.0+0x72>
 8009190:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009194:	2f19      	cmp	r7, #25
 8009196:	d804      	bhi.n	80091a2 <_strtol_l.constprop.0+0xc6>
 8009198:	3c57      	subs	r4, #87	@ 0x57
 800919a:	e7d8      	b.n	800914e <_strtol_l.constprop.0+0x72>
 800919c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091a0:	e7e1      	b.n	8009166 <_strtol_l.constprop.0+0x8a>
 80091a2:	1c53      	adds	r3, r2, #1
 80091a4:	d108      	bne.n	80091b8 <_strtol_l.constprop.0+0xdc>
 80091a6:	2322      	movs	r3, #34	@ 0x22
 80091a8:	f8ce 3000 	str.w	r3, [lr]
 80091ac:	4660      	mov	r0, ip
 80091ae:	f1b8 0f00 	cmp.w	r8, #0
 80091b2:	d0a0      	beq.n	80090f6 <_strtol_l.constprop.0+0x1a>
 80091b4:	1e69      	subs	r1, r5, #1
 80091b6:	e006      	b.n	80091c6 <_strtol_l.constprop.0+0xea>
 80091b8:	b106      	cbz	r6, 80091bc <_strtol_l.constprop.0+0xe0>
 80091ba:	4240      	negs	r0, r0
 80091bc:	f1b8 0f00 	cmp.w	r8, #0
 80091c0:	d099      	beq.n	80090f6 <_strtol_l.constprop.0+0x1a>
 80091c2:	2a00      	cmp	r2, #0
 80091c4:	d1f6      	bne.n	80091b4 <_strtol_l.constprop.0+0xd8>
 80091c6:	f8c8 1000 	str.w	r1, [r8]
 80091ca:	e794      	b.n	80090f6 <_strtol_l.constprop.0+0x1a>
 80091cc:	0800afb1 	.word	0x0800afb1

080091d0 <_strtol_r>:
 80091d0:	f7ff bf84 	b.w	80090dc <_strtol_l.constprop.0>

080091d4 <__ssputs_r>:
 80091d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d8:	688e      	ldr	r6, [r1, #8]
 80091da:	461f      	mov	r7, r3
 80091dc:	42be      	cmp	r6, r7
 80091de:	680b      	ldr	r3, [r1, #0]
 80091e0:	4682      	mov	sl, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	4690      	mov	r8, r2
 80091e6:	d82d      	bhi.n	8009244 <__ssputs_r+0x70>
 80091e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091f0:	d026      	beq.n	8009240 <__ssputs_r+0x6c>
 80091f2:	6965      	ldr	r5, [r4, #20]
 80091f4:	6909      	ldr	r1, [r1, #16]
 80091f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091fa:	eba3 0901 	sub.w	r9, r3, r1
 80091fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009202:	1c7b      	adds	r3, r7, #1
 8009204:	444b      	add	r3, r9
 8009206:	106d      	asrs	r5, r5, #1
 8009208:	429d      	cmp	r5, r3
 800920a:	bf38      	it	cc
 800920c:	461d      	movcc	r5, r3
 800920e:	0553      	lsls	r3, r2, #21
 8009210:	d527      	bpl.n	8009262 <__ssputs_r+0x8e>
 8009212:	4629      	mov	r1, r5
 8009214:	f7fe fc1c 	bl	8007a50 <_malloc_r>
 8009218:	4606      	mov	r6, r0
 800921a:	b360      	cbz	r0, 8009276 <__ssputs_r+0xa2>
 800921c:	6921      	ldr	r1, [r4, #16]
 800921e:	464a      	mov	r2, r9
 8009220:	f001 f850 	bl	800a2c4 <memcpy>
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800922a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800922e:	81a3      	strh	r3, [r4, #12]
 8009230:	6126      	str	r6, [r4, #16]
 8009232:	6165      	str	r5, [r4, #20]
 8009234:	444e      	add	r6, r9
 8009236:	eba5 0509 	sub.w	r5, r5, r9
 800923a:	6026      	str	r6, [r4, #0]
 800923c:	60a5      	str	r5, [r4, #8]
 800923e:	463e      	mov	r6, r7
 8009240:	42be      	cmp	r6, r7
 8009242:	d900      	bls.n	8009246 <__ssputs_r+0x72>
 8009244:	463e      	mov	r6, r7
 8009246:	6820      	ldr	r0, [r4, #0]
 8009248:	4632      	mov	r2, r6
 800924a:	4641      	mov	r1, r8
 800924c:	f000 ffdc 	bl	800a208 <memmove>
 8009250:	68a3      	ldr	r3, [r4, #8]
 8009252:	1b9b      	subs	r3, r3, r6
 8009254:	60a3      	str	r3, [r4, #8]
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	4433      	add	r3, r6
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	2000      	movs	r0, #0
 800925e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009262:	462a      	mov	r2, r5
 8009264:	f001 fbc1 	bl	800a9ea <_realloc_r>
 8009268:	4606      	mov	r6, r0
 800926a:	2800      	cmp	r0, #0
 800926c:	d1e0      	bne.n	8009230 <__ssputs_r+0x5c>
 800926e:	6921      	ldr	r1, [r4, #16]
 8009270:	4650      	mov	r0, sl
 8009272:	f7fe fb79 	bl	8007968 <_free_r>
 8009276:	230c      	movs	r3, #12
 8009278:	f8ca 3000 	str.w	r3, [sl]
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009282:	81a3      	strh	r3, [r4, #12]
 8009284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009288:	e7e9      	b.n	800925e <__ssputs_r+0x8a>
	...

0800928c <_svfiprintf_r>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	4698      	mov	r8, r3
 8009292:	898b      	ldrh	r3, [r1, #12]
 8009294:	061b      	lsls	r3, r3, #24
 8009296:	b09d      	sub	sp, #116	@ 0x74
 8009298:	4607      	mov	r7, r0
 800929a:	460d      	mov	r5, r1
 800929c:	4614      	mov	r4, r2
 800929e:	d510      	bpl.n	80092c2 <_svfiprintf_r+0x36>
 80092a0:	690b      	ldr	r3, [r1, #16]
 80092a2:	b973      	cbnz	r3, 80092c2 <_svfiprintf_r+0x36>
 80092a4:	2140      	movs	r1, #64	@ 0x40
 80092a6:	f7fe fbd3 	bl	8007a50 <_malloc_r>
 80092aa:	6028      	str	r0, [r5, #0]
 80092ac:	6128      	str	r0, [r5, #16]
 80092ae:	b930      	cbnz	r0, 80092be <_svfiprintf_r+0x32>
 80092b0:	230c      	movs	r3, #12
 80092b2:	603b      	str	r3, [r7, #0]
 80092b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092b8:	b01d      	add	sp, #116	@ 0x74
 80092ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092be:	2340      	movs	r3, #64	@ 0x40
 80092c0:	616b      	str	r3, [r5, #20]
 80092c2:	2300      	movs	r3, #0
 80092c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092c6:	2320      	movs	r3, #32
 80092c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80092d0:	2330      	movs	r3, #48	@ 0x30
 80092d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009470 <_svfiprintf_r+0x1e4>
 80092d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092da:	f04f 0901 	mov.w	r9, #1
 80092de:	4623      	mov	r3, r4
 80092e0:	469a      	mov	sl, r3
 80092e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e6:	b10a      	cbz	r2, 80092ec <_svfiprintf_r+0x60>
 80092e8:	2a25      	cmp	r2, #37	@ 0x25
 80092ea:	d1f9      	bne.n	80092e0 <_svfiprintf_r+0x54>
 80092ec:	ebba 0b04 	subs.w	fp, sl, r4
 80092f0:	d00b      	beq.n	800930a <_svfiprintf_r+0x7e>
 80092f2:	465b      	mov	r3, fp
 80092f4:	4622      	mov	r2, r4
 80092f6:	4629      	mov	r1, r5
 80092f8:	4638      	mov	r0, r7
 80092fa:	f7ff ff6b 	bl	80091d4 <__ssputs_r>
 80092fe:	3001      	adds	r0, #1
 8009300:	f000 80a7 	beq.w	8009452 <_svfiprintf_r+0x1c6>
 8009304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009306:	445a      	add	r2, fp
 8009308:	9209      	str	r2, [sp, #36]	@ 0x24
 800930a:	f89a 3000 	ldrb.w	r3, [sl]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 809f 	beq.w	8009452 <_svfiprintf_r+0x1c6>
 8009314:	2300      	movs	r3, #0
 8009316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800931a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800931e:	f10a 0a01 	add.w	sl, sl, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	9307      	str	r3, [sp, #28]
 8009326:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800932a:	931a      	str	r3, [sp, #104]	@ 0x68
 800932c:	4654      	mov	r4, sl
 800932e:	2205      	movs	r2, #5
 8009330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009334:	484e      	ldr	r0, [pc, #312]	@ (8009470 <_svfiprintf_r+0x1e4>)
 8009336:	f7f6 ff5b 	bl	80001f0 <memchr>
 800933a:	9a04      	ldr	r2, [sp, #16]
 800933c:	b9d8      	cbnz	r0, 8009376 <_svfiprintf_r+0xea>
 800933e:	06d0      	lsls	r0, r2, #27
 8009340:	bf44      	itt	mi
 8009342:	2320      	movmi	r3, #32
 8009344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009348:	0711      	lsls	r1, r2, #28
 800934a:	bf44      	itt	mi
 800934c:	232b      	movmi	r3, #43	@ 0x2b
 800934e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009352:	f89a 3000 	ldrb.w	r3, [sl]
 8009356:	2b2a      	cmp	r3, #42	@ 0x2a
 8009358:	d015      	beq.n	8009386 <_svfiprintf_r+0xfa>
 800935a:	9a07      	ldr	r2, [sp, #28]
 800935c:	4654      	mov	r4, sl
 800935e:	2000      	movs	r0, #0
 8009360:	f04f 0c0a 	mov.w	ip, #10
 8009364:	4621      	mov	r1, r4
 8009366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800936a:	3b30      	subs	r3, #48	@ 0x30
 800936c:	2b09      	cmp	r3, #9
 800936e:	d94b      	bls.n	8009408 <_svfiprintf_r+0x17c>
 8009370:	b1b0      	cbz	r0, 80093a0 <_svfiprintf_r+0x114>
 8009372:	9207      	str	r2, [sp, #28]
 8009374:	e014      	b.n	80093a0 <_svfiprintf_r+0x114>
 8009376:	eba0 0308 	sub.w	r3, r0, r8
 800937a:	fa09 f303 	lsl.w	r3, r9, r3
 800937e:	4313      	orrs	r3, r2
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	46a2      	mov	sl, r4
 8009384:	e7d2      	b.n	800932c <_svfiprintf_r+0xa0>
 8009386:	9b03      	ldr	r3, [sp, #12]
 8009388:	1d19      	adds	r1, r3, #4
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	9103      	str	r1, [sp, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	bfbb      	ittet	lt
 8009392:	425b      	neglt	r3, r3
 8009394:	f042 0202 	orrlt.w	r2, r2, #2
 8009398:	9307      	strge	r3, [sp, #28]
 800939a:	9307      	strlt	r3, [sp, #28]
 800939c:	bfb8      	it	lt
 800939e:	9204      	strlt	r2, [sp, #16]
 80093a0:	7823      	ldrb	r3, [r4, #0]
 80093a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80093a4:	d10a      	bne.n	80093bc <_svfiprintf_r+0x130>
 80093a6:	7863      	ldrb	r3, [r4, #1]
 80093a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093aa:	d132      	bne.n	8009412 <_svfiprintf_r+0x186>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	1d1a      	adds	r2, r3, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	9203      	str	r2, [sp, #12]
 80093b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093b8:	3402      	adds	r4, #2
 80093ba:	9305      	str	r3, [sp, #20]
 80093bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009480 <_svfiprintf_r+0x1f4>
 80093c0:	7821      	ldrb	r1, [r4, #0]
 80093c2:	2203      	movs	r2, #3
 80093c4:	4650      	mov	r0, sl
 80093c6:	f7f6 ff13 	bl	80001f0 <memchr>
 80093ca:	b138      	cbz	r0, 80093dc <_svfiprintf_r+0x150>
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	eba0 000a 	sub.w	r0, r0, sl
 80093d2:	2240      	movs	r2, #64	@ 0x40
 80093d4:	4082      	lsls	r2, r0
 80093d6:	4313      	orrs	r3, r2
 80093d8:	3401      	adds	r4, #1
 80093da:	9304      	str	r3, [sp, #16]
 80093dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e0:	4824      	ldr	r0, [pc, #144]	@ (8009474 <_svfiprintf_r+0x1e8>)
 80093e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093e6:	2206      	movs	r2, #6
 80093e8:	f7f6 ff02 	bl	80001f0 <memchr>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d036      	beq.n	800945e <_svfiprintf_r+0x1d2>
 80093f0:	4b21      	ldr	r3, [pc, #132]	@ (8009478 <_svfiprintf_r+0x1ec>)
 80093f2:	bb1b      	cbnz	r3, 800943c <_svfiprintf_r+0x1b0>
 80093f4:	9b03      	ldr	r3, [sp, #12]
 80093f6:	3307      	adds	r3, #7
 80093f8:	f023 0307 	bic.w	r3, r3, #7
 80093fc:	3308      	adds	r3, #8
 80093fe:	9303      	str	r3, [sp, #12]
 8009400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009402:	4433      	add	r3, r6
 8009404:	9309      	str	r3, [sp, #36]	@ 0x24
 8009406:	e76a      	b.n	80092de <_svfiprintf_r+0x52>
 8009408:	fb0c 3202 	mla	r2, ip, r2, r3
 800940c:	460c      	mov	r4, r1
 800940e:	2001      	movs	r0, #1
 8009410:	e7a8      	b.n	8009364 <_svfiprintf_r+0xd8>
 8009412:	2300      	movs	r3, #0
 8009414:	3401      	adds	r4, #1
 8009416:	9305      	str	r3, [sp, #20]
 8009418:	4619      	mov	r1, r3
 800941a:	f04f 0c0a 	mov.w	ip, #10
 800941e:	4620      	mov	r0, r4
 8009420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009424:	3a30      	subs	r2, #48	@ 0x30
 8009426:	2a09      	cmp	r2, #9
 8009428:	d903      	bls.n	8009432 <_svfiprintf_r+0x1a6>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0c6      	beq.n	80093bc <_svfiprintf_r+0x130>
 800942e:	9105      	str	r1, [sp, #20]
 8009430:	e7c4      	b.n	80093bc <_svfiprintf_r+0x130>
 8009432:	fb0c 2101 	mla	r1, ip, r1, r2
 8009436:	4604      	mov	r4, r0
 8009438:	2301      	movs	r3, #1
 800943a:	e7f0      	b.n	800941e <_svfiprintf_r+0x192>
 800943c:	ab03      	add	r3, sp, #12
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	462a      	mov	r2, r5
 8009442:	4b0e      	ldr	r3, [pc, #56]	@ (800947c <_svfiprintf_r+0x1f0>)
 8009444:	a904      	add	r1, sp, #16
 8009446:	4638      	mov	r0, r7
 8009448:	f7fc fafe 	bl	8005a48 <_printf_float>
 800944c:	1c42      	adds	r2, r0, #1
 800944e:	4606      	mov	r6, r0
 8009450:	d1d6      	bne.n	8009400 <_svfiprintf_r+0x174>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	065b      	lsls	r3, r3, #25
 8009456:	f53f af2d 	bmi.w	80092b4 <_svfiprintf_r+0x28>
 800945a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800945c:	e72c      	b.n	80092b8 <_svfiprintf_r+0x2c>
 800945e:	ab03      	add	r3, sp, #12
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	462a      	mov	r2, r5
 8009464:	4b05      	ldr	r3, [pc, #20]	@ (800947c <_svfiprintf_r+0x1f0>)
 8009466:	a904      	add	r1, sp, #16
 8009468:	4638      	mov	r0, r7
 800946a:	f7fc fd85 	bl	8005f78 <_printf_i>
 800946e:	e7ed      	b.n	800944c <_svfiprintf_r+0x1c0>
 8009470:	0800b0b1 	.word	0x0800b0b1
 8009474:	0800b0bb 	.word	0x0800b0bb
 8009478:	08005a49 	.word	0x08005a49
 800947c:	080091d5 	.word	0x080091d5
 8009480:	0800b0b7 	.word	0x0800b0b7

08009484 <__sfputc_r>:
 8009484:	6893      	ldr	r3, [r2, #8]
 8009486:	3b01      	subs	r3, #1
 8009488:	2b00      	cmp	r3, #0
 800948a:	b410      	push	{r4}
 800948c:	6093      	str	r3, [r2, #8]
 800948e:	da08      	bge.n	80094a2 <__sfputc_r+0x1e>
 8009490:	6994      	ldr	r4, [r2, #24]
 8009492:	42a3      	cmp	r3, r4
 8009494:	db01      	blt.n	800949a <__sfputc_r+0x16>
 8009496:	290a      	cmp	r1, #10
 8009498:	d103      	bne.n	80094a2 <__sfputc_r+0x1e>
 800949a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800949e:	f7fd bafa 	b.w	8006a96 <__swbuf_r>
 80094a2:	6813      	ldr	r3, [r2, #0]
 80094a4:	1c58      	adds	r0, r3, #1
 80094a6:	6010      	str	r0, [r2, #0]
 80094a8:	7019      	strb	r1, [r3, #0]
 80094aa:	4608      	mov	r0, r1
 80094ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <__sfputs_r>:
 80094b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b4:	4606      	mov	r6, r0
 80094b6:	460f      	mov	r7, r1
 80094b8:	4614      	mov	r4, r2
 80094ba:	18d5      	adds	r5, r2, r3
 80094bc:	42ac      	cmp	r4, r5
 80094be:	d101      	bne.n	80094c4 <__sfputs_r+0x12>
 80094c0:	2000      	movs	r0, #0
 80094c2:	e007      	b.n	80094d4 <__sfputs_r+0x22>
 80094c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c8:	463a      	mov	r2, r7
 80094ca:	4630      	mov	r0, r6
 80094cc:	f7ff ffda 	bl	8009484 <__sfputc_r>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d1f3      	bne.n	80094bc <__sfputs_r+0xa>
 80094d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094d8 <_vfiprintf_r>:
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	460d      	mov	r5, r1
 80094de:	b09d      	sub	sp, #116	@ 0x74
 80094e0:	4614      	mov	r4, r2
 80094e2:	4698      	mov	r8, r3
 80094e4:	4606      	mov	r6, r0
 80094e6:	b118      	cbz	r0, 80094f0 <_vfiprintf_r+0x18>
 80094e8:	6a03      	ldr	r3, [r0, #32]
 80094ea:	b90b      	cbnz	r3, 80094f0 <_vfiprintf_r+0x18>
 80094ec:	f7fd f904 	bl	80066f8 <__sinit>
 80094f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094f2:	07d9      	lsls	r1, r3, #31
 80094f4:	d405      	bmi.n	8009502 <_vfiprintf_r+0x2a>
 80094f6:	89ab      	ldrh	r3, [r5, #12]
 80094f8:	059a      	lsls	r2, r3, #22
 80094fa:	d402      	bmi.n	8009502 <_vfiprintf_r+0x2a>
 80094fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094fe:	f7fd fbdc 	bl	8006cba <__retarget_lock_acquire_recursive>
 8009502:	89ab      	ldrh	r3, [r5, #12]
 8009504:	071b      	lsls	r3, r3, #28
 8009506:	d501      	bpl.n	800950c <_vfiprintf_r+0x34>
 8009508:	692b      	ldr	r3, [r5, #16]
 800950a:	b99b      	cbnz	r3, 8009534 <_vfiprintf_r+0x5c>
 800950c:	4629      	mov	r1, r5
 800950e:	4630      	mov	r0, r6
 8009510:	f7fd fb00 	bl	8006b14 <__swsetup_r>
 8009514:	b170      	cbz	r0, 8009534 <_vfiprintf_r+0x5c>
 8009516:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009518:	07dc      	lsls	r4, r3, #31
 800951a:	d504      	bpl.n	8009526 <_vfiprintf_r+0x4e>
 800951c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009520:	b01d      	add	sp, #116	@ 0x74
 8009522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009526:	89ab      	ldrh	r3, [r5, #12]
 8009528:	0598      	lsls	r0, r3, #22
 800952a:	d4f7      	bmi.n	800951c <_vfiprintf_r+0x44>
 800952c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800952e:	f7fd fbc5 	bl	8006cbc <__retarget_lock_release_recursive>
 8009532:	e7f3      	b.n	800951c <_vfiprintf_r+0x44>
 8009534:	2300      	movs	r3, #0
 8009536:	9309      	str	r3, [sp, #36]	@ 0x24
 8009538:	2320      	movs	r3, #32
 800953a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800953e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009542:	2330      	movs	r3, #48	@ 0x30
 8009544:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80096f4 <_vfiprintf_r+0x21c>
 8009548:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800954c:	f04f 0901 	mov.w	r9, #1
 8009550:	4623      	mov	r3, r4
 8009552:	469a      	mov	sl, r3
 8009554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009558:	b10a      	cbz	r2, 800955e <_vfiprintf_r+0x86>
 800955a:	2a25      	cmp	r2, #37	@ 0x25
 800955c:	d1f9      	bne.n	8009552 <_vfiprintf_r+0x7a>
 800955e:	ebba 0b04 	subs.w	fp, sl, r4
 8009562:	d00b      	beq.n	800957c <_vfiprintf_r+0xa4>
 8009564:	465b      	mov	r3, fp
 8009566:	4622      	mov	r2, r4
 8009568:	4629      	mov	r1, r5
 800956a:	4630      	mov	r0, r6
 800956c:	f7ff ffa1 	bl	80094b2 <__sfputs_r>
 8009570:	3001      	adds	r0, #1
 8009572:	f000 80a7 	beq.w	80096c4 <_vfiprintf_r+0x1ec>
 8009576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009578:	445a      	add	r2, fp
 800957a:	9209      	str	r2, [sp, #36]	@ 0x24
 800957c:	f89a 3000 	ldrb.w	r3, [sl]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 809f 	beq.w	80096c4 <_vfiprintf_r+0x1ec>
 8009586:	2300      	movs	r3, #0
 8009588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800958c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009590:	f10a 0a01 	add.w	sl, sl, #1
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	9307      	str	r3, [sp, #28]
 8009598:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800959c:	931a      	str	r3, [sp, #104]	@ 0x68
 800959e:	4654      	mov	r4, sl
 80095a0:	2205      	movs	r2, #5
 80095a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a6:	4853      	ldr	r0, [pc, #332]	@ (80096f4 <_vfiprintf_r+0x21c>)
 80095a8:	f7f6 fe22 	bl	80001f0 <memchr>
 80095ac:	9a04      	ldr	r2, [sp, #16]
 80095ae:	b9d8      	cbnz	r0, 80095e8 <_vfiprintf_r+0x110>
 80095b0:	06d1      	lsls	r1, r2, #27
 80095b2:	bf44      	itt	mi
 80095b4:	2320      	movmi	r3, #32
 80095b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095ba:	0713      	lsls	r3, r2, #28
 80095bc:	bf44      	itt	mi
 80095be:	232b      	movmi	r3, #43	@ 0x2b
 80095c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095c4:	f89a 3000 	ldrb.w	r3, [sl]
 80095c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80095ca:	d015      	beq.n	80095f8 <_vfiprintf_r+0x120>
 80095cc:	9a07      	ldr	r2, [sp, #28]
 80095ce:	4654      	mov	r4, sl
 80095d0:	2000      	movs	r0, #0
 80095d2:	f04f 0c0a 	mov.w	ip, #10
 80095d6:	4621      	mov	r1, r4
 80095d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095dc:	3b30      	subs	r3, #48	@ 0x30
 80095de:	2b09      	cmp	r3, #9
 80095e0:	d94b      	bls.n	800967a <_vfiprintf_r+0x1a2>
 80095e2:	b1b0      	cbz	r0, 8009612 <_vfiprintf_r+0x13a>
 80095e4:	9207      	str	r2, [sp, #28]
 80095e6:	e014      	b.n	8009612 <_vfiprintf_r+0x13a>
 80095e8:	eba0 0308 	sub.w	r3, r0, r8
 80095ec:	fa09 f303 	lsl.w	r3, r9, r3
 80095f0:	4313      	orrs	r3, r2
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	46a2      	mov	sl, r4
 80095f6:	e7d2      	b.n	800959e <_vfiprintf_r+0xc6>
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	1d19      	adds	r1, r3, #4
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	9103      	str	r1, [sp, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	bfbb      	ittet	lt
 8009604:	425b      	neglt	r3, r3
 8009606:	f042 0202 	orrlt.w	r2, r2, #2
 800960a:	9307      	strge	r3, [sp, #28]
 800960c:	9307      	strlt	r3, [sp, #28]
 800960e:	bfb8      	it	lt
 8009610:	9204      	strlt	r2, [sp, #16]
 8009612:	7823      	ldrb	r3, [r4, #0]
 8009614:	2b2e      	cmp	r3, #46	@ 0x2e
 8009616:	d10a      	bne.n	800962e <_vfiprintf_r+0x156>
 8009618:	7863      	ldrb	r3, [r4, #1]
 800961a:	2b2a      	cmp	r3, #42	@ 0x2a
 800961c:	d132      	bne.n	8009684 <_vfiprintf_r+0x1ac>
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	1d1a      	adds	r2, r3, #4
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	9203      	str	r2, [sp, #12]
 8009626:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800962a:	3402      	adds	r4, #2
 800962c:	9305      	str	r3, [sp, #20]
 800962e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009704 <_vfiprintf_r+0x22c>
 8009632:	7821      	ldrb	r1, [r4, #0]
 8009634:	2203      	movs	r2, #3
 8009636:	4650      	mov	r0, sl
 8009638:	f7f6 fdda 	bl	80001f0 <memchr>
 800963c:	b138      	cbz	r0, 800964e <_vfiprintf_r+0x176>
 800963e:	9b04      	ldr	r3, [sp, #16]
 8009640:	eba0 000a 	sub.w	r0, r0, sl
 8009644:	2240      	movs	r2, #64	@ 0x40
 8009646:	4082      	lsls	r2, r0
 8009648:	4313      	orrs	r3, r2
 800964a:	3401      	adds	r4, #1
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009652:	4829      	ldr	r0, [pc, #164]	@ (80096f8 <_vfiprintf_r+0x220>)
 8009654:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009658:	2206      	movs	r2, #6
 800965a:	f7f6 fdc9 	bl	80001f0 <memchr>
 800965e:	2800      	cmp	r0, #0
 8009660:	d03f      	beq.n	80096e2 <_vfiprintf_r+0x20a>
 8009662:	4b26      	ldr	r3, [pc, #152]	@ (80096fc <_vfiprintf_r+0x224>)
 8009664:	bb1b      	cbnz	r3, 80096ae <_vfiprintf_r+0x1d6>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	3307      	adds	r3, #7
 800966a:	f023 0307 	bic.w	r3, r3, #7
 800966e:	3308      	adds	r3, #8
 8009670:	9303      	str	r3, [sp, #12]
 8009672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009674:	443b      	add	r3, r7
 8009676:	9309      	str	r3, [sp, #36]	@ 0x24
 8009678:	e76a      	b.n	8009550 <_vfiprintf_r+0x78>
 800967a:	fb0c 3202 	mla	r2, ip, r2, r3
 800967e:	460c      	mov	r4, r1
 8009680:	2001      	movs	r0, #1
 8009682:	e7a8      	b.n	80095d6 <_vfiprintf_r+0xfe>
 8009684:	2300      	movs	r3, #0
 8009686:	3401      	adds	r4, #1
 8009688:	9305      	str	r3, [sp, #20]
 800968a:	4619      	mov	r1, r3
 800968c:	f04f 0c0a 	mov.w	ip, #10
 8009690:	4620      	mov	r0, r4
 8009692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009696:	3a30      	subs	r2, #48	@ 0x30
 8009698:	2a09      	cmp	r2, #9
 800969a:	d903      	bls.n	80096a4 <_vfiprintf_r+0x1cc>
 800969c:	2b00      	cmp	r3, #0
 800969e:	d0c6      	beq.n	800962e <_vfiprintf_r+0x156>
 80096a0:	9105      	str	r1, [sp, #20]
 80096a2:	e7c4      	b.n	800962e <_vfiprintf_r+0x156>
 80096a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80096a8:	4604      	mov	r4, r0
 80096aa:	2301      	movs	r3, #1
 80096ac:	e7f0      	b.n	8009690 <_vfiprintf_r+0x1b8>
 80096ae:	ab03      	add	r3, sp, #12
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	462a      	mov	r2, r5
 80096b4:	4b12      	ldr	r3, [pc, #72]	@ (8009700 <_vfiprintf_r+0x228>)
 80096b6:	a904      	add	r1, sp, #16
 80096b8:	4630      	mov	r0, r6
 80096ba:	f7fc f9c5 	bl	8005a48 <_printf_float>
 80096be:	4607      	mov	r7, r0
 80096c0:	1c78      	adds	r0, r7, #1
 80096c2:	d1d6      	bne.n	8009672 <_vfiprintf_r+0x19a>
 80096c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096c6:	07d9      	lsls	r1, r3, #31
 80096c8:	d405      	bmi.n	80096d6 <_vfiprintf_r+0x1fe>
 80096ca:	89ab      	ldrh	r3, [r5, #12]
 80096cc:	059a      	lsls	r2, r3, #22
 80096ce:	d402      	bmi.n	80096d6 <_vfiprintf_r+0x1fe>
 80096d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096d2:	f7fd faf3 	bl	8006cbc <__retarget_lock_release_recursive>
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	065b      	lsls	r3, r3, #25
 80096da:	f53f af1f 	bmi.w	800951c <_vfiprintf_r+0x44>
 80096de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096e0:	e71e      	b.n	8009520 <_vfiprintf_r+0x48>
 80096e2:	ab03      	add	r3, sp, #12
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	462a      	mov	r2, r5
 80096e8:	4b05      	ldr	r3, [pc, #20]	@ (8009700 <_vfiprintf_r+0x228>)
 80096ea:	a904      	add	r1, sp, #16
 80096ec:	4630      	mov	r0, r6
 80096ee:	f7fc fc43 	bl	8005f78 <_printf_i>
 80096f2:	e7e4      	b.n	80096be <_vfiprintf_r+0x1e6>
 80096f4:	0800b0b1 	.word	0x0800b0b1
 80096f8:	0800b0bb 	.word	0x0800b0bb
 80096fc:	08005a49 	.word	0x08005a49
 8009700:	080094b3 	.word	0x080094b3
 8009704:	0800b0b7 	.word	0x0800b0b7

08009708 <__svfiscanf_r>:
 8009708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800970c:	461d      	mov	r5, r3
 800970e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8009710:	07df      	lsls	r7, r3, #31
 8009712:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009716:	4606      	mov	r6, r0
 8009718:	460c      	mov	r4, r1
 800971a:	4691      	mov	r9, r2
 800971c:	d405      	bmi.n	800972a <__svfiscanf_r+0x22>
 800971e:	898b      	ldrh	r3, [r1, #12]
 8009720:	0598      	lsls	r0, r3, #22
 8009722:	d402      	bmi.n	800972a <__svfiscanf_r+0x22>
 8009724:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8009726:	f7fd fac8 	bl	8006cba <__retarget_lock_acquire_recursive>
 800972a:	2300      	movs	r3, #0
 800972c:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8009730:	4ba7      	ldr	r3, [pc, #668]	@ (80099d0 <__svfiscanf_r+0x2c8>)
 8009732:	93a0      	str	r3, [sp, #640]	@ 0x280
 8009734:	f10d 0804 	add.w	r8, sp, #4
 8009738:	4ba6      	ldr	r3, [pc, #664]	@ (80099d4 <__svfiscanf_r+0x2cc>)
 800973a:	4fa7      	ldr	r7, [pc, #668]	@ (80099d8 <__svfiscanf_r+0x2d0>)
 800973c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009740:	93a1      	str	r3, [sp, #644]	@ 0x284
 8009742:	9500      	str	r5, [sp, #0]
 8009744:	f899 3000 	ldrb.w	r3, [r9]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 816c 	beq.w	8009a26 <__svfiscanf_r+0x31e>
 800974e:	5cf9      	ldrb	r1, [r7, r3]
 8009750:	f011 0108 	ands.w	r1, r1, #8
 8009754:	f109 0501 	add.w	r5, r9, #1
 8009758:	d019      	beq.n	800978e <__svfiscanf_r+0x86>
 800975a:	6863      	ldr	r3, [r4, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	dd0f      	ble.n	8009780 <__svfiscanf_r+0x78>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	781a      	ldrb	r2, [r3, #0]
 8009764:	5cba      	ldrb	r2, [r7, r2]
 8009766:	0711      	lsls	r1, r2, #28
 8009768:	d401      	bmi.n	800976e <__svfiscanf_r+0x66>
 800976a:	46a9      	mov	r9, r5
 800976c:	e7ea      	b.n	8009744 <__svfiscanf_r+0x3c>
 800976e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009770:	3201      	adds	r2, #1
 8009772:	9245      	str	r2, [sp, #276]	@ 0x114
 8009774:	6862      	ldr	r2, [r4, #4]
 8009776:	3301      	adds	r3, #1
 8009778:	3a01      	subs	r2, #1
 800977a:	6062      	str	r2, [r4, #4]
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	e7ec      	b.n	800975a <__svfiscanf_r+0x52>
 8009780:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009782:	4621      	mov	r1, r4
 8009784:	4630      	mov	r0, r6
 8009786:	4798      	blx	r3
 8009788:	2800      	cmp	r0, #0
 800978a:	d0e9      	beq.n	8009760 <__svfiscanf_r+0x58>
 800978c:	e7ed      	b.n	800976a <__svfiscanf_r+0x62>
 800978e:	2b25      	cmp	r3, #37	@ 0x25
 8009790:	d012      	beq.n	80097b8 <__svfiscanf_r+0xb0>
 8009792:	4699      	mov	r9, r3
 8009794:	6863      	ldr	r3, [r4, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f340 8095 	ble.w	80098c6 <__svfiscanf_r+0x1be>
 800979c:	6822      	ldr	r2, [r4, #0]
 800979e:	7813      	ldrb	r3, [r2, #0]
 80097a0:	454b      	cmp	r3, r9
 80097a2:	f040 8140 	bne.w	8009a26 <__svfiscanf_r+0x31e>
 80097a6:	6863      	ldr	r3, [r4, #4]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	6063      	str	r3, [r4, #4]
 80097ac:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80097ae:	3201      	adds	r2, #1
 80097b0:	3301      	adds	r3, #1
 80097b2:	6022      	str	r2, [r4, #0]
 80097b4:	9345      	str	r3, [sp, #276]	@ 0x114
 80097b6:	e7d8      	b.n	800976a <__svfiscanf_r+0x62>
 80097b8:	9141      	str	r1, [sp, #260]	@ 0x104
 80097ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 80097bc:	f899 3001 	ldrb.w	r3, [r9, #1]
 80097c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80097c2:	bf02      	ittt	eq
 80097c4:	2310      	moveq	r3, #16
 80097c6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80097c8:	f109 0502 	addeq.w	r5, r9, #2
 80097cc:	220a      	movs	r2, #10
 80097ce:	46a9      	mov	r9, r5
 80097d0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80097d4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80097d8:	2b09      	cmp	r3, #9
 80097da:	d91f      	bls.n	800981c <__svfiscanf_r+0x114>
 80097dc:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 80099dc <__svfiscanf_r+0x2d4>
 80097e0:	2203      	movs	r2, #3
 80097e2:	4650      	mov	r0, sl
 80097e4:	f7f6 fd04 	bl	80001f0 <memchr>
 80097e8:	b138      	cbz	r0, 80097fa <__svfiscanf_r+0xf2>
 80097ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80097ec:	eba0 000a 	sub.w	r0, r0, sl
 80097f0:	2301      	movs	r3, #1
 80097f2:	4083      	lsls	r3, r0
 80097f4:	4313      	orrs	r3, r2
 80097f6:	9341      	str	r3, [sp, #260]	@ 0x104
 80097f8:	464d      	mov	r5, r9
 80097fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097fe:	2b78      	cmp	r3, #120	@ 0x78
 8009800:	d807      	bhi.n	8009812 <__svfiscanf_r+0x10a>
 8009802:	2b57      	cmp	r3, #87	@ 0x57
 8009804:	d811      	bhi.n	800982a <__svfiscanf_r+0x122>
 8009806:	2b25      	cmp	r3, #37	@ 0x25
 8009808:	d0c3      	beq.n	8009792 <__svfiscanf_r+0x8a>
 800980a:	d857      	bhi.n	80098bc <__svfiscanf_r+0x1b4>
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 80c1 	beq.w	8009994 <__svfiscanf_r+0x28c>
 8009812:	2303      	movs	r3, #3
 8009814:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009816:	230a      	movs	r3, #10
 8009818:	9342      	str	r3, [sp, #264]	@ 0x108
 800981a:	e07e      	b.n	800991a <__svfiscanf_r+0x212>
 800981c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800981e:	fb02 1103 	mla	r1, r2, r3, r1
 8009822:	3930      	subs	r1, #48	@ 0x30
 8009824:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009826:	464d      	mov	r5, r9
 8009828:	e7d1      	b.n	80097ce <__svfiscanf_r+0xc6>
 800982a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800982e:	2a20      	cmp	r2, #32
 8009830:	d8ef      	bhi.n	8009812 <__svfiscanf_r+0x10a>
 8009832:	a101      	add	r1, pc, #4	@ (adr r1, 8009838 <__svfiscanf_r+0x130>)
 8009834:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009838:	080098f9 	.word	0x080098f9
 800983c:	08009813 	.word	0x08009813
 8009840:	08009813 	.word	0x08009813
 8009844:	08009953 	.word	0x08009953
 8009848:	08009813 	.word	0x08009813
 800984c:	08009813 	.word	0x08009813
 8009850:	08009813 	.word	0x08009813
 8009854:	08009813 	.word	0x08009813
 8009858:	08009813 	.word	0x08009813
 800985c:	08009813 	.word	0x08009813
 8009860:	08009813 	.word	0x08009813
 8009864:	08009969 	.word	0x08009969
 8009868:	0800994f 	.word	0x0800994f
 800986c:	080098c3 	.word	0x080098c3
 8009870:	080098c3 	.word	0x080098c3
 8009874:	080098c3 	.word	0x080098c3
 8009878:	08009813 	.word	0x08009813
 800987c:	0800990b 	.word	0x0800990b
 8009880:	08009813 	.word	0x08009813
 8009884:	08009813 	.word	0x08009813
 8009888:	08009813 	.word	0x08009813
 800988c:	08009813 	.word	0x08009813
 8009890:	08009979 	.word	0x08009979
 8009894:	08009913 	.word	0x08009913
 8009898:	080098f1 	.word	0x080098f1
 800989c:	08009813 	.word	0x08009813
 80098a0:	08009813 	.word	0x08009813
 80098a4:	08009975 	.word	0x08009975
 80098a8:	08009813 	.word	0x08009813
 80098ac:	0800994f 	.word	0x0800994f
 80098b0:	08009813 	.word	0x08009813
 80098b4:	08009813 	.word	0x08009813
 80098b8:	080098f9 	.word	0x080098f9
 80098bc:	3b45      	subs	r3, #69	@ 0x45
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d8a7      	bhi.n	8009812 <__svfiscanf_r+0x10a>
 80098c2:	2305      	movs	r3, #5
 80098c4:	e028      	b.n	8009918 <__svfiscanf_r+0x210>
 80098c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80098c8:	4621      	mov	r1, r4
 80098ca:	4630      	mov	r0, r6
 80098cc:	4798      	blx	r3
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f43f af64 	beq.w	800979c <__svfiscanf_r+0x94>
 80098d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098d6:	07da      	lsls	r2, r3, #31
 80098d8:	f140 809d 	bpl.w	8009a16 <__svfiscanf_r+0x30e>
 80098dc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80098de:	2800      	cmp	r0, #0
 80098e0:	d061      	beq.n	80099a6 <__svfiscanf_r+0x29e>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	0659      	lsls	r1, r3, #25
 80098e6:	d45e      	bmi.n	80099a6 <__svfiscanf_r+0x29e>
 80098e8:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80098ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80098f2:	f042 0220 	orr.w	r2, r2, #32
 80098f6:	9241      	str	r2, [sp, #260]	@ 0x104
 80098f8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80098fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098fe:	9241      	str	r2, [sp, #260]	@ 0x104
 8009900:	2210      	movs	r2, #16
 8009902:	2b6e      	cmp	r3, #110	@ 0x6e
 8009904:	9242      	str	r2, [sp, #264]	@ 0x108
 8009906:	d902      	bls.n	800990e <__svfiscanf_r+0x206>
 8009908:	e005      	b.n	8009916 <__svfiscanf_r+0x20e>
 800990a:	2300      	movs	r3, #0
 800990c:	9342      	str	r3, [sp, #264]	@ 0x108
 800990e:	2303      	movs	r3, #3
 8009910:	e002      	b.n	8009918 <__svfiscanf_r+0x210>
 8009912:	2308      	movs	r3, #8
 8009914:	9342      	str	r3, [sp, #264]	@ 0x108
 8009916:	2304      	movs	r3, #4
 8009918:	9347      	str	r3, [sp, #284]	@ 0x11c
 800991a:	6863      	ldr	r3, [r4, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	dd45      	ble.n	80099ac <__svfiscanf_r+0x2a4>
 8009920:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009922:	0659      	lsls	r1, r3, #25
 8009924:	d404      	bmi.n	8009930 <__svfiscanf_r+0x228>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	781a      	ldrb	r2, [r3, #0]
 800992a:	5cba      	ldrb	r2, [r7, r2]
 800992c:	0712      	lsls	r2, r2, #28
 800992e:	d444      	bmi.n	80099ba <__svfiscanf_r+0x2b2>
 8009930:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009932:	2b02      	cmp	r3, #2
 8009934:	dc5b      	bgt.n	80099ee <__svfiscanf_r+0x2e6>
 8009936:	466b      	mov	r3, sp
 8009938:	4622      	mov	r2, r4
 800993a:	a941      	add	r1, sp, #260	@ 0x104
 800993c:	4630      	mov	r0, r6
 800993e:	f000 f893 	bl	8009a68 <_scanf_chars>
 8009942:	2801      	cmp	r0, #1
 8009944:	d06f      	beq.n	8009a26 <__svfiscanf_r+0x31e>
 8009946:	2802      	cmp	r0, #2
 8009948:	f47f af0f 	bne.w	800976a <__svfiscanf_r+0x62>
 800994c:	e7c2      	b.n	80098d4 <__svfiscanf_r+0x1cc>
 800994e:	220a      	movs	r2, #10
 8009950:	e7d7      	b.n	8009902 <__svfiscanf_r+0x1fa>
 8009952:	4629      	mov	r1, r5
 8009954:	4640      	mov	r0, r8
 8009956:	f000 fb65 	bl	800a024 <__sccl>
 800995a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800995c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009960:	9341      	str	r3, [sp, #260]	@ 0x104
 8009962:	4605      	mov	r5, r0
 8009964:	2301      	movs	r3, #1
 8009966:	e7d7      	b.n	8009918 <__svfiscanf_r+0x210>
 8009968:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800996a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800996e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009970:	2300      	movs	r3, #0
 8009972:	e7d1      	b.n	8009918 <__svfiscanf_r+0x210>
 8009974:	2302      	movs	r3, #2
 8009976:	e7cf      	b.n	8009918 <__svfiscanf_r+0x210>
 8009978:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800997a:	06c3      	lsls	r3, r0, #27
 800997c:	f53f aef5 	bmi.w	800976a <__svfiscanf_r+0x62>
 8009980:	9b00      	ldr	r3, [sp, #0]
 8009982:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009984:	1d19      	adds	r1, r3, #4
 8009986:	9100      	str	r1, [sp, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	07c0      	lsls	r0, r0, #31
 800998c:	bf4c      	ite	mi
 800998e:	801a      	strhmi	r2, [r3, #0]
 8009990:	601a      	strpl	r2, [r3, #0]
 8009992:	e6ea      	b.n	800976a <__svfiscanf_r+0x62>
 8009994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009996:	07de      	lsls	r6, r3, #31
 8009998:	d405      	bmi.n	80099a6 <__svfiscanf_r+0x29e>
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	059d      	lsls	r5, r3, #22
 800999e:	d402      	bmi.n	80099a6 <__svfiscanf_r+0x29e>
 80099a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099a2:	f7fd f98b 	bl	8006cbc <__retarget_lock_release_recursive>
 80099a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099aa:	e79d      	b.n	80098e8 <__svfiscanf_r+0x1e0>
 80099ac:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80099ae:	4621      	mov	r1, r4
 80099b0:	4630      	mov	r0, r6
 80099b2:	4798      	blx	r3
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d0b3      	beq.n	8009920 <__svfiscanf_r+0x218>
 80099b8:	e78c      	b.n	80098d4 <__svfiscanf_r+0x1cc>
 80099ba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80099bc:	3201      	adds	r2, #1
 80099be:	9245      	str	r2, [sp, #276]	@ 0x114
 80099c0:	6862      	ldr	r2, [r4, #4]
 80099c2:	3a01      	subs	r2, #1
 80099c4:	2a00      	cmp	r2, #0
 80099c6:	6062      	str	r2, [r4, #4]
 80099c8:	dd0a      	ble.n	80099e0 <__svfiscanf_r+0x2d8>
 80099ca:	3301      	adds	r3, #1
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	e7aa      	b.n	8009926 <__svfiscanf_r+0x21e>
 80099d0:	0800a10b 	.word	0x0800a10b
 80099d4:	08009f3d 	.word	0x08009f3d
 80099d8:	0800afb1 	.word	0x0800afb1
 80099dc:	0800b0b7 	.word	0x0800b0b7
 80099e0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80099e2:	4621      	mov	r1, r4
 80099e4:	4630      	mov	r0, r6
 80099e6:	4798      	blx	r3
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d09c      	beq.n	8009926 <__svfiscanf_r+0x21e>
 80099ec:	e772      	b.n	80098d4 <__svfiscanf_r+0x1cc>
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	dc06      	bgt.n	8009a00 <__svfiscanf_r+0x2f8>
 80099f2:	466b      	mov	r3, sp
 80099f4:	4622      	mov	r2, r4
 80099f6:	a941      	add	r1, sp, #260	@ 0x104
 80099f8:	4630      	mov	r0, r6
 80099fa:	f000 f88f 	bl	8009b1c <_scanf_i>
 80099fe:	e7a0      	b.n	8009942 <__svfiscanf_r+0x23a>
 8009a00:	4b0e      	ldr	r3, [pc, #56]	@ (8009a3c <__svfiscanf_r+0x334>)
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f43f aeb1 	beq.w	800976a <__svfiscanf_r+0x62>
 8009a08:	466b      	mov	r3, sp
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	a941      	add	r1, sp, #260	@ 0x104
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f7fc fbd2 	bl	80061b8 <_scanf_float>
 8009a14:	e795      	b.n	8009942 <__svfiscanf_r+0x23a>
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	0598      	lsls	r0, r3, #22
 8009a1a:	f53f af5f 	bmi.w	80098dc <__svfiscanf_r+0x1d4>
 8009a1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a20:	f7fd f94c 	bl	8006cbc <__retarget_lock_release_recursive>
 8009a24:	e75a      	b.n	80098dc <__svfiscanf_r+0x1d4>
 8009a26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a28:	07da      	lsls	r2, r3, #31
 8009a2a:	d405      	bmi.n	8009a38 <__svfiscanf_r+0x330>
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	059b      	lsls	r3, r3, #22
 8009a30:	d402      	bmi.n	8009a38 <__svfiscanf_r+0x330>
 8009a32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a34:	f7fd f942 	bl	8006cbc <__retarget_lock_release_recursive>
 8009a38:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009a3a:	e755      	b.n	80098e8 <__svfiscanf_r+0x1e0>
 8009a3c:	080061b9 	.word	0x080061b9

08009a40 <_vfiscanf_r>:
 8009a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a44:	460d      	mov	r5, r1
 8009a46:	4616      	mov	r6, r2
 8009a48:	461f      	mov	r7, r3
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	b118      	cbz	r0, 8009a56 <_vfiscanf_r+0x16>
 8009a4e:	6a03      	ldr	r3, [r0, #32]
 8009a50:	b90b      	cbnz	r3, 8009a56 <_vfiscanf_r+0x16>
 8009a52:	f7fc fe51 	bl	80066f8 <__sinit>
 8009a56:	463b      	mov	r3, r7
 8009a58:	4632      	mov	r2, r6
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a62:	f7ff be51 	b.w	8009708 <__svfiscanf_r>
	...

08009a68 <_scanf_chars>:
 8009a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a6c:	4615      	mov	r5, r2
 8009a6e:	688a      	ldr	r2, [r1, #8]
 8009a70:	4680      	mov	r8, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	b932      	cbnz	r2, 8009a84 <_scanf_chars+0x1c>
 8009a76:	698a      	ldr	r2, [r1, #24]
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	bf14      	ite	ne
 8009a7c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8009a80:	2201      	moveq	r2, #1
 8009a82:	608a      	str	r2, [r1, #8]
 8009a84:	6822      	ldr	r2, [r4, #0]
 8009a86:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009b18 <_scanf_chars+0xb0>
 8009a8a:	06d1      	lsls	r1, r2, #27
 8009a8c:	bf5f      	itttt	pl
 8009a8e:	681a      	ldrpl	r2, [r3, #0]
 8009a90:	1d11      	addpl	r1, r2, #4
 8009a92:	6019      	strpl	r1, [r3, #0]
 8009a94:	6816      	ldrpl	r6, [r2, #0]
 8009a96:	2700      	movs	r7, #0
 8009a98:	69a0      	ldr	r0, [r4, #24]
 8009a9a:	b188      	cbz	r0, 8009ac0 <_scanf_chars+0x58>
 8009a9c:	2801      	cmp	r0, #1
 8009a9e:	d107      	bne.n	8009ab0 <_scanf_chars+0x48>
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	781a      	ldrb	r2, [r3, #0]
 8009aa4:	6963      	ldr	r3, [r4, #20]
 8009aa6:	5c9b      	ldrb	r3, [r3, r2]
 8009aa8:	b953      	cbnz	r3, 8009ac0 <_scanf_chars+0x58>
 8009aaa:	2f00      	cmp	r7, #0
 8009aac:	d031      	beq.n	8009b12 <_scanf_chars+0xaa>
 8009aae:	e022      	b.n	8009af6 <_scanf_chars+0x8e>
 8009ab0:	2802      	cmp	r0, #2
 8009ab2:	d120      	bne.n	8009af6 <_scanf_chars+0x8e>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009abc:	071b      	lsls	r3, r3, #28
 8009abe:	d41a      	bmi.n	8009af6 <_scanf_chars+0x8e>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	06da      	lsls	r2, r3, #27
 8009ac4:	bf5e      	ittt	pl
 8009ac6:	682b      	ldrpl	r3, [r5, #0]
 8009ac8:	781b      	ldrbpl	r3, [r3, #0]
 8009aca:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009ace:	682a      	ldr	r2, [r5, #0]
 8009ad0:	686b      	ldr	r3, [r5, #4]
 8009ad2:	3201      	adds	r2, #1
 8009ad4:	602a      	str	r2, [r5, #0]
 8009ad6:	68a2      	ldr	r2, [r4, #8]
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	3a01      	subs	r2, #1
 8009adc:	606b      	str	r3, [r5, #4]
 8009ade:	3701      	adds	r7, #1
 8009ae0:	60a2      	str	r2, [r4, #8]
 8009ae2:	b142      	cbz	r2, 8009af6 <_scanf_chars+0x8e>
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dcd7      	bgt.n	8009a98 <_scanf_chars+0x30>
 8009ae8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009aec:	4629      	mov	r1, r5
 8009aee:	4640      	mov	r0, r8
 8009af0:	4798      	blx	r3
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d0d0      	beq.n	8009a98 <_scanf_chars+0x30>
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	f013 0310 	ands.w	r3, r3, #16
 8009afc:	d105      	bne.n	8009b0a <_scanf_chars+0xa2>
 8009afe:	68e2      	ldr	r2, [r4, #12]
 8009b00:	3201      	adds	r2, #1
 8009b02:	60e2      	str	r2, [r4, #12]
 8009b04:	69a2      	ldr	r2, [r4, #24]
 8009b06:	b102      	cbz	r2, 8009b0a <_scanf_chars+0xa2>
 8009b08:	7033      	strb	r3, [r6, #0]
 8009b0a:	6923      	ldr	r3, [r4, #16]
 8009b0c:	443b      	add	r3, r7
 8009b0e:	6123      	str	r3, [r4, #16]
 8009b10:	2000      	movs	r0, #0
 8009b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b16:	bf00      	nop
 8009b18:	0800afb1 	.word	0x0800afb1

08009b1c <_scanf_i>:
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	4698      	mov	r8, r3
 8009b22:	4b74      	ldr	r3, [pc, #464]	@ (8009cf4 <_scanf_i+0x1d8>)
 8009b24:	460c      	mov	r4, r1
 8009b26:	4682      	mov	sl, r0
 8009b28:	4616      	mov	r6, r2
 8009b2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	ab03      	add	r3, sp, #12
 8009b32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009b36:	4b70      	ldr	r3, [pc, #448]	@ (8009cf8 <_scanf_i+0x1dc>)
 8009b38:	69a1      	ldr	r1, [r4, #24]
 8009b3a:	4a70      	ldr	r2, [pc, #448]	@ (8009cfc <_scanf_i+0x1e0>)
 8009b3c:	2903      	cmp	r1, #3
 8009b3e:	bf08      	it	eq
 8009b40:	461a      	moveq	r2, r3
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	9201      	str	r2, [sp, #4]
 8009b46:	1e5a      	subs	r2, r3, #1
 8009b48:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009b4c:	bf88      	it	hi
 8009b4e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009b52:	4627      	mov	r7, r4
 8009b54:	bf82      	ittt	hi
 8009b56:	eb03 0905 	addhi.w	r9, r3, r5
 8009b5a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009b5e:	60a3      	strhi	r3, [r4, #8]
 8009b60:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009b64:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009b68:	bf98      	it	ls
 8009b6a:	f04f 0900 	movls.w	r9, #0
 8009b6e:	6023      	str	r3, [r4, #0]
 8009b70:	463d      	mov	r5, r7
 8009b72:	f04f 0b00 	mov.w	fp, #0
 8009b76:	6831      	ldr	r1, [r6, #0]
 8009b78:	ab03      	add	r3, sp, #12
 8009b7a:	7809      	ldrb	r1, [r1, #0]
 8009b7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009b80:	2202      	movs	r2, #2
 8009b82:	f7f6 fb35 	bl	80001f0 <memchr>
 8009b86:	b328      	cbz	r0, 8009bd4 <_scanf_i+0xb8>
 8009b88:	f1bb 0f01 	cmp.w	fp, #1
 8009b8c:	d159      	bne.n	8009c42 <_scanf_i+0x126>
 8009b8e:	6862      	ldr	r2, [r4, #4]
 8009b90:	b92a      	cbnz	r2, 8009b9e <_scanf_i+0x82>
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	2108      	movs	r1, #8
 8009b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b9a:	6061      	str	r1, [r4, #4]
 8009b9c:	6022      	str	r2, [r4, #0]
 8009b9e:	6822      	ldr	r2, [r4, #0]
 8009ba0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009ba4:	6022      	str	r2, [r4, #0]
 8009ba6:	68a2      	ldr	r2, [r4, #8]
 8009ba8:	1e51      	subs	r1, r2, #1
 8009baa:	60a1      	str	r1, [r4, #8]
 8009bac:	b192      	cbz	r2, 8009bd4 <_scanf_i+0xb8>
 8009bae:	6832      	ldr	r2, [r6, #0]
 8009bb0:	1c51      	adds	r1, r2, #1
 8009bb2:	6031      	str	r1, [r6, #0]
 8009bb4:	7812      	ldrb	r2, [r2, #0]
 8009bb6:	f805 2b01 	strb.w	r2, [r5], #1
 8009bba:	6872      	ldr	r2, [r6, #4]
 8009bbc:	3a01      	subs	r2, #1
 8009bbe:	2a00      	cmp	r2, #0
 8009bc0:	6072      	str	r2, [r6, #4]
 8009bc2:	dc07      	bgt.n	8009bd4 <_scanf_i+0xb8>
 8009bc4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4650      	mov	r0, sl
 8009bcc:	4790      	blx	r2
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f040 8085 	bne.w	8009cde <_scanf_i+0x1c2>
 8009bd4:	f10b 0b01 	add.w	fp, fp, #1
 8009bd8:	f1bb 0f03 	cmp.w	fp, #3
 8009bdc:	d1cb      	bne.n	8009b76 <_scanf_i+0x5a>
 8009bde:	6863      	ldr	r3, [r4, #4]
 8009be0:	b90b      	cbnz	r3, 8009be6 <_scanf_i+0xca>
 8009be2:	230a      	movs	r3, #10
 8009be4:	6063      	str	r3, [r4, #4]
 8009be6:	6863      	ldr	r3, [r4, #4]
 8009be8:	4945      	ldr	r1, [pc, #276]	@ (8009d00 <_scanf_i+0x1e4>)
 8009bea:	6960      	ldr	r0, [r4, #20]
 8009bec:	1ac9      	subs	r1, r1, r3
 8009bee:	f000 fa19 	bl	800a024 <__sccl>
 8009bf2:	f04f 0b00 	mov.w	fp, #0
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	6822      	ldr	r2, [r4, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d03d      	beq.n	8009c7a <_scanf_i+0x15e>
 8009bfe:	6831      	ldr	r1, [r6, #0]
 8009c00:	6960      	ldr	r0, [r4, #20]
 8009c02:	f891 c000 	ldrb.w	ip, [r1]
 8009c06:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d035      	beq.n	8009c7a <_scanf_i+0x15e>
 8009c0e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009c12:	d124      	bne.n	8009c5e <_scanf_i+0x142>
 8009c14:	0510      	lsls	r0, r2, #20
 8009c16:	d522      	bpl.n	8009c5e <_scanf_i+0x142>
 8009c18:	f10b 0b01 	add.w	fp, fp, #1
 8009c1c:	f1b9 0f00 	cmp.w	r9, #0
 8009c20:	d003      	beq.n	8009c2a <_scanf_i+0x10e>
 8009c22:	3301      	adds	r3, #1
 8009c24:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8009c28:	60a3      	str	r3, [r4, #8]
 8009c2a:	6873      	ldr	r3, [r6, #4]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	6073      	str	r3, [r6, #4]
 8009c32:	dd1b      	ble.n	8009c6c <_scanf_i+0x150>
 8009c34:	6833      	ldr	r3, [r6, #0]
 8009c36:	3301      	adds	r3, #1
 8009c38:	6033      	str	r3, [r6, #0]
 8009c3a:	68a3      	ldr	r3, [r4, #8]
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	60a3      	str	r3, [r4, #8]
 8009c40:	e7d9      	b.n	8009bf6 <_scanf_i+0xda>
 8009c42:	f1bb 0f02 	cmp.w	fp, #2
 8009c46:	d1ae      	bne.n	8009ba6 <_scanf_i+0x8a>
 8009c48:	6822      	ldr	r2, [r4, #0]
 8009c4a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009c4e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009c52:	d1bf      	bne.n	8009bd4 <_scanf_i+0xb8>
 8009c54:	2110      	movs	r1, #16
 8009c56:	6061      	str	r1, [r4, #4]
 8009c58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c5c:	e7a2      	b.n	8009ba4 <_scanf_i+0x88>
 8009c5e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009c62:	6022      	str	r2, [r4, #0]
 8009c64:	780b      	ldrb	r3, [r1, #0]
 8009c66:	f805 3b01 	strb.w	r3, [r5], #1
 8009c6a:	e7de      	b.n	8009c2a <_scanf_i+0x10e>
 8009c6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009c70:	4631      	mov	r1, r6
 8009c72:	4650      	mov	r0, sl
 8009c74:	4798      	blx	r3
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d0df      	beq.n	8009c3a <_scanf_i+0x11e>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	05d9      	lsls	r1, r3, #23
 8009c7e:	d50d      	bpl.n	8009c9c <_scanf_i+0x180>
 8009c80:	42bd      	cmp	r5, r7
 8009c82:	d909      	bls.n	8009c98 <_scanf_i+0x17c>
 8009c84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c8c:	4632      	mov	r2, r6
 8009c8e:	4650      	mov	r0, sl
 8009c90:	4798      	blx	r3
 8009c92:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8009c96:	464d      	mov	r5, r9
 8009c98:	42bd      	cmp	r5, r7
 8009c9a:	d028      	beq.n	8009cee <_scanf_i+0x1d2>
 8009c9c:	6822      	ldr	r2, [r4, #0]
 8009c9e:	f012 0210 	ands.w	r2, r2, #16
 8009ca2:	d113      	bne.n	8009ccc <_scanf_i+0x1b0>
 8009ca4:	702a      	strb	r2, [r5, #0]
 8009ca6:	6863      	ldr	r3, [r4, #4]
 8009ca8:	9e01      	ldr	r6, [sp, #4]
 8009caa:	4639      	mov	r1, r7
 8009cac:	4650      	mov	r0, sl
 8009cae:	47b0      	blx	r6
 8009cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb4:	6821      	ldr	r1, [r4, #0]
 8009cb6:	1d1a      	adds	r2, r3, #4
 8009cb8:	f8c8 2000 	str.w	r2, [r8]
 8009cbc:	f011 0f20 	tst.w	r1, #32
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	d00f      	beq.n	8009ce4 <_scanf_i+0x1c8>
 8009cc4:	6018      	str	r0, [r3, #0]
 8009cc6:	68e3      	ldr	r3, [r4, #12]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	60e3      	str	r3, [r4, #12]
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	1bed      	subs	r5, r5, r7
 8009cd0:	445d      	add	r5, fp
 8009cd2:	442b      	add	r3, r5
 8009cd4:	6123      	str	r3, [r4, #16]
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	b007      	add	sp, #28
 8009cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cde:	f04f 0b00 	mov.w	fp, #0
 8009ce2:	e7ca      	b.n	8009c7a <_scanf_i+0x15e>
 8009ce4:	07ca      	lsls	r2, r1, #31
 8009ce6:	bf4c      	ite	mi
 8009ce8:	8018      	strhmi	r0, [r3, #0]
 8009cea:	6018      	strpl	r0, [r3, #0]
 8009cec:	e7eb      	b.n	8009cc6 <_scanf_i+0x1aa>
 8009cee:	2001      	movs	r0, #1
 8009cf0:	e7f2      	b.n	8009cd8 <_scanf_i+0x1bc>
 8009cf2:	bf00      	nop
 8009cf4:	0800ad18 	.word	0x0800ad18
 8009cf8:	080091d1 	.word	0x080091d1
 8009cfc:	0800ab25 	.word	0x0800ab25
 8009d00:	0800b0d2 	.word	0x0800b0d2

08009d04 <__sflush_r>:
 8009d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0c:	0716      	lsls	r6, r2, #28
 8009d0e:	4605      	mov	r5, r0
 8009d10:	460c      	mov	r4, r1
 8009d12:	d454      	bmi.n	8009dbe <__sflush_r+0xba>
 8009d14:	684b      	ldr	r3, [r1, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dc02      	bgt.n	8009d20 <__sflush_r+0x1c>
 8009d1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	dd48      	ble.n	8009db2 <__sflush_r+0xae>
 8009d20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	d045      	beq.n	8009db2 <__sflush_r+0xae>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d2c:	682f      	ldr	r7, [r5, #0]
 8009d2e:	6a21      	ldr	r1, [r4, #32]
 8009d30:	602b      	str	r3, [r5, #0]
 8009d32:	d030      	beq.n	8009d96 <__sflush_r+0x92>
 8009d34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	0759      	lsls	r1, r3, #29
 8009d3a:	d505      	bpl.n	8009d48 <__sflush_r+0x44>
 8009d3c:	6863      	ldr	r3, [r4, #4]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d42:	b10b      	cbz	r3, 8009d48 <__sflush_r+0x44>
 8009d44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d46:	1ad2      	subs	r2, r2, r3
 8009d48:	2300      	movs	r3, #0
 8009d4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d4c:	6a21      	ldr	r1, [r4, #32]
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b0      	blx	r6
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	d106      	bne.n	8009d66 <__sflush_r+0x62>
 8009d58:	6829      	ldr	r1, [r5, #0]
 8009d5a:	291d      	cmp	r1, #29
 8009d5c:	d82b      	bhi.n	8009db6 <__sflush_r+0xb2>
 8009d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8009e08 <__sflush_r+0x104>)
 8009d60:	410a      	asrs	r2, r1
 8009d62:	07d6      	lsls	r6, r2, #31
 8009d64:	d427      	bmi.n	8009db6 <__sflush_r+0xb2>
 8009d66:	2200      	movs	r2, #0
 8009d68:	6062      	str	r2, [r4, #4]
 8009d6a:	04d9      	lsls	r1, r3, #19
 8009d6c:	6922      	ldr	r2, [r4, #16]
 8009d6e:	6022      	str	r2, [r4, #0]
 8009d70:	d504      	bpl.n	8009d7c <__sflush_r+0x78>
 8009d72:	1c42      	adds	r2, r0, #1
 8009d74:	d101      	bne.n	8009d7a <__sflush_r+0x76>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	b903      	cbnz	r3, 8009d7c <__sflush_r+0x78>
 8009d7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d7e:	602f      	str	r7, [r5, #0]
 8009d80:	b1b9      	cbz	r1, 8009db2 <__sflush_r+0xae>
 8009d82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d86:	4299      	cmp	r1, r3
 8009d88:	d002      	beq.n	8009d90 <__sflush_r+0x8c>
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f7fd fdec 	bl	8007968 <_free_r>
 8009d90:	2300      	movs	r3, #0
 8009d92:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d94:	e00d      	b.n	8009db2 <__sflush_r+0xae>
 8009d96:	2301      	movs	r3, #1
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b0      	blx	r6
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	1c50      	adds	r0, r2, #1
 8009da0:	d1c9      	bne.n	8009d36 <__sflush_r+0x32>
 8009da2:	682b      	ldr	r3, [r5, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0c6      	beq.n	8009d36 <__sflush_r+0x32>
 8009da8:	2b1d      	cmp	r3, #29
 8009daa:	d001      	beq.n	8009db0 <__sflush_r+0xac>
 8009dac:	2b16      	cmp	r3, #22
 8009dae:	d11e      	bne.n	8009dee <__sflush_r+0xea>
 8009db0:	602f      	str	r7, [r5, #0]
 8009db2:	2000      	movs	r0, #0
 8009db4:	e022      	b.n	8009dfc <__sflush_r+0xf8>
 8009db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dba:	b21b      	sxth	r3, r3
 8009dbc:	e01b      	b.n	8009df6 <__sflush_r+0xf2>
 8009dbe:	690f      	ldr	r7, [r1, #16]
 8009dc0:	2f00      	cmp	r7, #0
 8009dc2:	d0f6      	beq.n	8009db2 <__sflush_r+0xae>
 8009dc4:	0793      	lsls	r3, r2, #30
 8009dc6:	680e      	ldr	r6, [r1, #0]
 8009dc8:	bf08      	it	eq
 8009dca:	694b      	ldreq	r3, [r1, #20]
 8009dcc:	600f      	str	r7, [r1, #0]
 8009dce:	bf18      	it	ne
 8009dd0:	2300      	movne	r3, #0
 8009dd2:	eba6 0807 	sub.w	r8, r6, r7
 8009dd6:	608b      	str	r3, [r1, #8]
 8009dd8:	f1b8 0f00 	cmp.w	r8, #0
 8009ddc:	dde9      	ble.n	8009db2 <__sflush_r+0xae>
 8009dde:	6a21      	ldr	r1, [r4, #32]
 8009de0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009de2:	4643      	mov	r3, r8
 8009de4:	463a      	mov	r2, r7
 8009de6:	4628      	mov	r0, r5
 8009de8:	47b0      	blx	r6
 8009dea:	2800      	cmp	r0, #0
 8009dec:	dc08      	bgt.n	8009e00 <__sflush_r+0xfc>
 8009dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e00:	4407      	add	r7, r0
 8009e02:	eba8 0800 	sub.w	r8, r8, r0
 8009e06:	e7e7      	b.n	8009dd8 <__sflush_r+0xd4>
 8009e08:	dfbffffe 	.word	0xdfbffffe

08009e0c <_fflush_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	690b      	ldr	r3, [r1, #16]
 8009e10:	4605      	mov	r5, r0
 8009e12:	460c      	mov	r4, r1
 8009e14:	b913      	cbnz	r3, 8009e1c <_fflush_r+0x10>
 8009e16:	2500      	movs	r5, #0
 8009e18:	4628      	mov	r0, r5
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	b118      	cbz	r0, 8009e26 <_fflush_r+0x1a>
 8009e1e:	6a03      	ldr	r3, [r0, #32]
 8009e20:	b90b      	cbnz	r3, 8009e26 <_fflush_r+0x1a>
 8009e22:	f7fc fc69 	bl	80066f8 <__sinit>
 8009e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0f3      	beq.n	8009e16 <_fflush_r+0xa>
 8009e2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e30:	07d0      	lsls	r0, r2, #31
 8009e32:	d404      	bmi.n	8009e3e <_fflush_r+0x32>
 8009e34:	0599      	lsls	r1, r3, #22
 8009e36:	d402      	bmi.n	8009e3e <_fflush_r+0x32>
 8009e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e3a:	f7fc ff3e 	bl	8006cba <__retarget_lock_acquire_recursive>
 8009e3e:	4628      	mov	r0, r5
 8009e40:	4621      	mov	r1, r4
 8009e42:	f7ff ff5f 	bl	8009d04 <__sflush_r>
 8009e46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e48:	07da      	lsls	r2, r3, #31
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	d4e4      	bmi.n	8009e18 <_fflush_r+0xc>
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	059b      	lsls	r3, r3, #22
 8009e52:	d4e1      	bmi.n	8009e18 <_fflush_r+0xc>
 8009e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e56:	f7fc ff31 	bl	8006cbc <__retarget_lock_release_recursive>
 8009e5a:	e7dd      	b.n	8009e18 <_fflush_r+0xc>

08009e5c <__swhatbuf_r>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	460c      	mov	r4, r1
 8009e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e64:	2900      	cmp	r1, #0
 8009e66:	b096      	sub	sp, #88	@ 0x58
 8009e68:	4615      	mov	r5, r2
 8009e6a:	461e      	mov	r6, r3
 8009e6c:	da0d      	bge.n	8009e8a <__swhatbuf_r+0x2e>
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e74:	f04f 0100 	mov.w	r1, #0
 8009e78:	bf14      	ite	ne
 8009e7a:	2340      	movne	r3, #64	@ 0x40
 8009e7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e80:	2000      	movs	r0, #0
 8009e82:	6031      	str	r1, [r6, #0]
 8009e84:	602b      	str	r3, [r5, #0]
 8009e86:	b016      	add	sp, #88	@ 0x58
 8009e88:	bd70      	pop	{r4, r5, r6, pc}
 8009e8a:	466a      	mov	r2, sp
 8009e8c:	f000 f9e8 	bl	800a260 <_fstat_r>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	dbec      	blt.n	8009e6e <__swhatbuf_r+0x12>
 8009e94:	9901      	ldr	r1, [sp, #4]
 8009e96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e9e:	4259      	negs	r1, r3
 8009ea0:	4159      	adcs	r1, r3
 8009ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ea6:	e7eb      	b.n	8009e80 <__swhatbuf_r+0x24>

08009ea8 <__smakebuf_r>:
 8009ea8:	898b      	ldrh	r3, [r1, #12]
 8009eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eac:	079d      	lsls	r5, r3, #30
 8009eae:	4606      	mov	r6, r0
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	d507      	bpl.n	8009ec4 <__smakebuf_r+0x1c>
 8009eb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	6123      	str	r3, [r4, #16]
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	6163      	str	r3, [r4, #20]
 8009ec0:	b003      	add	sp, #12
 8009ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ec4:	ab01      	add	r3, sp, #4
 8009ec6:	466a      	mov	r2, sp
 8009ec8:	f7ff ffc8 	bl	8009e5c <__swhatbuf_r>
 8009ecc:	9f00      	ldr	r7, [sp, #0]
 8009ece:	4605      	mov	r5, r0
 8009ed0:	4639      	mov	r1, r7
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f7fd fdbc 	bl	8007a50 <_malloc_r>
 8009ed8:	b948      	cbnz	r0, 8009eee <__smakebuf_r+0x46>
 8009eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ede:	059a      	lsls	r2, r3, #22
 8009ee0:	d4ee      	bmi.n	8009ec0 <__smakebuf_r+0x18>
 8009ee2:	f023 0303 	bic.w	r3, r3, #3
 8009ee6:	f043 0302 	orr.w	r3, r3, #2
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	e7e2      	b.n	8009eb4 <__smakebuf_r+0xc>
 8009eee:	89a3      	ldrh	r3, [r4, #12]
 8009ef0:	6020      	str	r0, [r4, #0]
 8009ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ef6:	81a3      	strh	r3, [r4, #12]
 8009ef8:	9b01      	ldr	r3, [sp, #4]
 8009efa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009efe:	b15b      	cbz	r3, 8009f18 <__smakebuf_r+0x70>
 8009f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f04:	4630      	mov	r0, r6
 8009f06:	f000 f9bd 	bl	800a284 <_isatty_r>
 8009f0a:	b128      	cbz	r0, 8009f18 <__smakebuf_r+0x70>
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	f043 0301 	orr.w	r3, r3, #1
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	431d      	orrs	r5, r3
 8009f1c:	81a5      	strh	r5, [r4, #12]
 8009f1e:	e7cf      	b.n	8009ec0 <__smakebuf_r+0x18>

08009f20 <lflush>:
 8009f20:	898b      	ldrh	r3, [r1, #12]
 8009f22:	f003 0309 	and.w	r3, r3, #9
 8009f26:	2b09      	cmp	r3, #9
 8009f28:	d103      	bne.n	8009f32 <lflush+0x12>
 8009f2a:	4b03      	ldr	r3, [pc, #12]	@ (8009f38 <lflush+0x18>)
 8009f2c:	6818      	ldr	r0, [r3, #0]
 8009f2e:	f7ff bf6d 	b.w	8009e0c <_fflush_r>
 8009f32:	2000      	movs	r0, #0
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	20000018 	.word	0x20000018

08009f3c <__srefill_r>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	460c      	mov	r4, r1
 8009f40:	4605      	mov	r5, r0
 8009f42:	b118      	cbz	r0, 8009f4c <__srefill_r+0x10>
 8009f44:	6a03      	ldr	r3, [r0, #32]
 8009f46:	b90b      	cbnz	r3, 8009f4c <__srefill_r+0x10>
 8009f48:	f7fc fbd6 	bl	80066f8 <__sinit>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	6063      	str	r3, [r4, #4]
 8009f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f54:	069e      	lsls	r6, r3, #26
 8009f56:	d408      	bmi.n	8009f6a <__srefill_r+0x2e>
 8009f58:	0758      	lsls	r0, r3, #29
 8009f5a:	d445      	bmi.n	8009fe8 <__srefill_r+0xac>
 8009f5c:	06d9      	lsls	r1, r3, #27
 8009f5e:	d407      	bmi.n	8009f70 <__srefill_r+0x34>
 8009f60:	2209      	movs	r2, #9
 8009f62:	602a      	str	r2, [r5, #0]
 8009f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f68:	81a3      	strh	r3, [r4, #12]
 8009f6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}
 8009f70:	071a      	lsls	r2, r3, #28
 8009f72:	d50b      	bpl.n	8009f8c <__srefill_r+0x50>
 8009f74:	4621      	mov	r1, r4
 8009f76:	4628      	mov	r0, r5
 8009f78:	f7ff ff48 	bl	8009e0c <_fflush_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d1f4      	bne.n	8009f6a <__srefill_r+0x2e>
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	60a0      	str	r0, [r4, #8]
 8009f84:	f023 0308 	bic.w	r3, r3, #8
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	61a0      	str	r0, [r4, #24]
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	f043 0304 	orr.w	r3, r3, #4
 8009f92:	81a3      	strh	r3, [r4, #12]
 8009f94:	6923      	ldr	r3, [r4, #16]
 8009f96:	b91b      	cbnz	r3, 8009fa0 <__srefill_r+0x64>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f7ff ff84 	bl	8009ea8 <__smakebuf_r>
 8009fa0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8009fa4:	07b3      	lsls	r3, r6, #30
 8009fa6:	d00f      	beq.n	8009fc8 <__srefill_r+0x8c>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	4a1b      	ldr	r2, [pc, #108]	@ (800a018 <__srefill_r+0xdc>)
 8009fac:	491b      	ldr	r1, [pc, #108]	@ (800a01c <__srefill_r+0xe0>)
 8009fae:	481c      	ldr	r0, [pc, #112]	@ (800a020 <__srefill_r+0xe4>)
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	f7fc fbb9 	bl	8006728 <_fwalk_sglue>
 8009fb6:	81a6      	strh	r6, [r4, #12]
 8009fb8:	f006 0609 	and.w	r6, r6, #9
 8009fbc:	2e09      	cmp	r6, #9
 8009fbe:	d103      	bne.n	8009fc8 <__srefill_r+0x8c>
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f7ff fe9e 	bl	8009d04 <__sflush_r>
 8009fc8:	6922      	ldr	r2, [r4, #16]
 8009fca:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8009fcc:	6963      	ldr	r3, [r4, #20]
 8009fce:	6a21      	ldr	r1, [r4, #32]
 8009fd0:	6022      	str	r2, [r4, #0]
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b0      	blx	r6
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	6060      	str	r0, [r4, #4]
 8009fda:	dc17      	bgt.n	800a00c <__srefill_r+0xd0>
 8009fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe0:	d116      	bne.n	800a010 <__srefill_r+0xd4>
 8009fe2:	f043 0320 	orr.w	r3, r3, #32
 8009fe6:	e7bf      	b.n	8009f68 <__srefill_r+0x2c>
 8009fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fea:	2900      	cmp	r1, #0
 8009fec:	d0d2      	beq.n	8009f94 <__srefill_r+0x58>
 8009fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ff2:	4299      	cmp	r1, r3
 8009ff4:	d002      	beq.n	8009ffc <__srefill_r+0xc0>
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f7fd fcb6 	bl	8007968 <_free_r>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 800a000:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a002:	6063      	str	r3, [r4, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d0c5      	beq.n	8009f94 <__srefill_r+0x58>
 800a008:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	2000      	movs	r0, #0
 800a00e:	e7ae      	b.n	8009f6e <__srefill_r+0x32>
 800a010:	2200      	movs	r2, #0
 800a012:	6062      	str	r2, [r4, #4]
 800a014:	e7a6      	b.n	8009f64 <__srefill_r+0x28>
 800a016:	bf00      	nop
 800a018:	2000000c 	.word	0x2000000c
 800a01c:	08009f21 	.word	0x08009f21
 800a020:	2000001c 	.word	0x2000001c

0800a024 <__sccl>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	780b      	ldrb	r3, [r1, #0]
 800a028:	4604      	mov	r4, r0
 800a02a:	2b5e      	cmp	r3, #94	@ 0x5e
 800a02c:	bf0b      	itete	eq
 800a02e:	784b      	ldrbeq	r3, [r1, #1]
 800a030:	1c4a      	addne	r2, r1, #1
 800a032:	1c8a      	addeq	r2, r1, #2
 800a034:	2100      	movne	r1, #0
 800a036:	bf08      	it	eq
 800a038:	2101      	moveq	r1, #1
 800a03a:	3801      	subs	r0, #1
 800a03c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a040:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a044:	42a8      	cmp	r0, r5
 800a046:	d1fb      	bne.n	800a040 <__sccl+0x1c>
 800a048:	b90b      	cbnz	r3, 800a04e <__sccl+0x2a>
 800a04a:	1e50      	subs	r0, r2, #1
 800a04c:	bd70      	pop	{r4, r5, r6, pc}
 800a04e:	f081 0101 	eor.w	r1, r1, #1
 800a052:	54e1      	strb	r1, [r4, r3]
 800a054:	4610      	mov	r0, r2
 800a056:	4602      	mov	r2, r0
 800a058:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a05c:	2d2d      	cmp	r5, #45	@ 0x2d
 800a05e:	d005      	beq.n	800a06c <__sccl+0x48>
 800a060:	2d5d      	cmp	r5, #93	@ 0x5d
 800a062:	d016      	beq.n	800a092 <__sccl+0x6e>
 800a064:	2d00      	cmp	r5, #0
 800a066:	d0f1      	beq.n	800a04c <__sccl+0x28>
 800a068:	462b      	mov	r3, r5
 800a06a:	e7f2      	b.n	800a052 <__sccl+0x2e>
 800a06c:	7846      	ldrb	r6, [r0, #1]
 800a06e:	2e5d      	cmp	r6, #93	@ 0x5d
 800a070:	d0fa      	beq.n	800a068 <__sccl+0x44>
 800a072:	42b3      	cmp	r3, r6
 800a074:	dcf8      	bgt.n	800a068 <__sccl+0x44>
 800a076:	3002      	adds	r0, #2
 800a078:	461a      	mov	r2, r3
 800a07a:	3201      	adds	r2, #1
 800a07c:	4296      	cmp	r6, r2
 800a07e:	54a1      	strb	r1, [r4, r2]
 800a080:	dcfb      	bgt.n	800a07a <__sccl+0x56>
 800a082:	1af2      	subs	r2, r6, r3
 800a084:	3a01      	subs	r2, #1
 800a086:	1c5d      	adds	r5, r3, #1
 800a088:	42b3      	cmp	r3, r6
 800a08a:	bfa8      	it	ge
 800a08c:	2200      	movge	r2, #0
 800a08e:	18ab      	adds	r3, r5, r2
 800a090:	e7e1      	b.n	800a056 <__sccl+0x32>
 800a092:	4610      	mov	r0, r2
 800a094:	e7da      	b.n	800a04c <__sccl+0x28>

0800a096 <__submore>:
 800a096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a09a:	460c      	mov	r4, r1
 800a09c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a09e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0a2:	4299      	cmp	r1, r3
 800a0a4:	d11d      	bne.n	800a0e2 <__submore+0x4c>
 800a0a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a0aa:	f7fd fcd1 	bl	8007a50 <_malloc_r>
 800a0ae:	b918      	cbnz	r0, 800a0b8 <__submore+0x22>
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a0be:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a0c2:	6360      	str	r0, [r4, #52]	@ 0x34
 800a0c4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a0c8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a0cc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a0d0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a0d4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a0d8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a0dc:	6020      	str	r0, [r4, #0]
 800a0de:	2000      	movs	r0, #0
 800a0e0:	e7e8      	b.n	800a0b4 <__submore+0x1e>
 800a0e2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a0e4:	0077      	lsls	r7, r6, #1
 800a0e6:	463a      	mov	r2, r7
 800a0e8:	f000 fc7f 	bl	800a9ea <_realloc_r>
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d0de      	beq.n	800a0b0 <__submore+0x1a>
 800a0f2:	eb00 0806 	add.w	r8, r0, r6
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	4632      	mov	r2, r6
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	f000 f8e2 	bl	800a2c4 <memcpy>
 800a100:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a104:	f8c4 8000 	str.w	r8, [r4]
 800a108:	e7e9      	b.n	800a0de <__submore+0x48>

0800a10a <_ungetc_r>:
 800a10a:	b570      	push	{r4, r5, r6, lr}
 800a10c:	460d      	mov	r5, r1
 800a10e:	1c69      	adds	r1, r5, #1
 800a110:	4606      	mov	r6, r0
 800a112:	4614      	mov	r4, r2
 800a114:	d01e      	beq.n	800a154 <_ungetc_r+0x4a>
 800a116:	b118      	cbz	r0, 800a120 <_ungetc_r+0x16>
 800a118:	6a03      	ldr	r3, [r0, #32]
 800a11a:	b90b      	cbnz	r3, 800a120 <_ungetc_r+0x16>
 800a11c:	f7fc faec 	bl	80066f8 <__sinit>
 800a120:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a122:	07da      	lsls	r2, r3, #31
 800a124:	d405      	bmi.n	800a132 <_ungetc_r+0x28>
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	059b      	lsls	r3, r3, #22
 800a12a:	d402      	bmi.n	800a132 <_ungetc_r+0x28>
 800a12c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a12e:	f7fc fdc4 	bl	8006cba <__retarget_lock_acquire_recursive>
 800a132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a136:	f023 0220 	bic.w	r2, r3, #32
 800a13a:	0758      	lsls	r0, r3, #29
 800a13c:	81a2      	strh	r2, [r4, #12]
 800a13e:	d422      	bmi.n	800a186 <_ungetc_r+0x7c>
 800a140:	06d9      	lsls	r1, r3, #27
 800a142:	d40a      	bmi.n	800a15a <_ungetc_r+0x50>
 800a144:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a146:	07d2      	lsls	r2, r2, #31
 800a148:	d404      	bmi.n	800a154 <_ungetc_r+0x4a>
 800a14a:	0599      	lsls	r1, r3, #22
 800a14c:	d402      	bmi.n	800a154 <_ungetc_r+0x4a>
 800a14e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a150:	f7fc fdb4 	bl	8006cbc <__retarget_lock_release_recursive>
 800a154:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a158:	e046      	b.n	800a1e8 <_ungetc_r+0xde>
 800a15a:	071b      	lsls	r3, r3, #28
 800a15c:	d50f      	bpl.n	800a17e <_ungetc_r+0x74>
 800a15e:	4621      	mov	r1, r4
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff fe53 	bl	8009e0c <_fflush_r>
 800a166:	b120      	cbz	r0, 800a172 <_ungetc_r+0x68>
 800a168:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a16a:	07d8      	lsls	r0, r3, #31
 800a16c:	d4f2      	bmi.n	800a154 <_ungetc_r+0x4a>
 800a16e:	89a3      	ldrh	r3, [r4, #12]
 800a170:	e7eb      	b.n	800a14a <_ungetc_r+0x40>
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	60a0      	str	r0, [r4, #8]
 800a176:	f023 0308 	bic.w	r3, r3, #8
 800a17a:	81a3      	strh	r3, [r4, #12]
 800a17c:	61a0      	str	r0, [r4, #24]
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	f043 0304 	orr.w	r3, r3, #4
 800a184:	81a3      	strh	r3, [r4, #12]
 800a186:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a188:	6862      	ldr	r2, [r4, #4]
 800a18a:	b2ed      	uxtb	r5, r5
 800a18c:	b1d3      	cbz	r3, 800a1c4 <_ungetc_r+0xba>
 800a18e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a190:	4293      	cmp	r3, r2
 800a192:	dc05      	bgt.n	800a1a0 <_ungetc_r+0x96>
 800a194:	4621      	mov	r1, r4
 800a196:	4630      	mov	r0, r6
 800a198:	f7ff ff7d 	bl	800a096 <__submore>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d1e3      	bne.n	800a168 <_ungetc_r+0x5e>
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	1e5a      	subs	r2, r3, #1
 800a1a4:	6022      	str	r2, [r4, #0]
 800a1a6:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a1aa:	6863      	ldr	r3, [r4, #4]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	6063      	str	r3, [r4, #4]
 800a1b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1b2:	07da      	lsls	r2, r3, #31
 800a1b4:	d418      	bmi.n	800a1e8 <_ungetc_r+0xde>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	059b      	lsls	r3, r3, #22
 800a1ba:	d415      	bmi.n	800a1e8 <_ungetc_r+0xde>
 800a1bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1be:	f7fc fd7d 	bl	8006cbc <__retarget_lock_release_recursive>
 800a1c2:	e011      	b.n	800a1e8 <_ungetc_r+0xde>
 800a1c4:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800a1c6:	6920      	ldr	r0, [r4, #16]
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	f001 0101 	and.w	r1, r1, #1
 800a1ce:	b168      	cbz	r0, 800a1ec <_ungetc_r+0xe2>
 800a1d0:	4298      	cmp	r0, r3
 800a1d2:	d20b      	bcs.n	800a1ec <_ungetc_r+0xe2>
 800a1d4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800a1d8:	42a8      	cmp	r0, r5
 800a1da:	d107      	bne.n	800a1ec <_ungetc_r+0xe2>
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	3201      	adds	r2, #1
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	6062      	str	r2, [r4, #4]
 800a1e4:	2900      	cmp	r1, #0
 800a1e6:	d0e6      	beq.n	800a1b6 <_ungetc_r+0xac>
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800a1f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a1fa:	4623      	mov	r3, r4
 800a1fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	2301      	movs	r3, #1
 800a204:	6063      	str	r3, [r4, #4]
 800a206:	e7ed      	b.n	800a1e4 <_ungetc_r+0xda>

0800a208 <memmove>:
 800a208:	4288      	cmp	r0, r1
 800a20a:	b510      	push	{r4, lr}
 800a20c:	eb01 0402 	add.w	r4, r1, r2
 800a210:	d902      	bls.n	800a218 <memmove+0x10>
 800a212:	4284      	cmp	r4, r0
 800a214:	4623      	mov	r3, r4
 800a216:	d807      	bhi.n	800a228 <memmove+0x20>
 800a218:	1e43      	subs	r3, r0, #1
 800a21a:	42a1      	cmp	r1, r4
 800a21c:	d008      	beq.n	800a230 <memmove+0x28>
 800a21e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a222:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a226:	e7f8      	b.n	800a21a <memmove+0x12>
 800a228:	4402      	add	r2, r0
 800a22a:	4601      	mov	r1, r0
 800a22c:	428a      	cmp	r2, r1
 800a22e:	d100      	bne.n	800a232 <memmove+0x2a>
 800a230:	bd10      	pop	{r4, pc}
 800a232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a23a:	e7f7      	b.n	800a22c <memmove+0x24>

0800a23c <strncmp>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	b16a      	cbz	r2, 800a25c <strncmp+0x20>
 800a240:	3901      	subs	r1, #1
 800a242:	1884      	adds	r4, r0, r2
 800a244:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a248:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d103      	bne.n	800a258 <strncmp+0x1c>
 800a250:	42a0      	cmp	r0, r4
 800a252:	d001      	beq.n	800a258 <strncmp+0x1c>
 800a254:	2a00      	cmp	r2, #0
 800a256:	d1f5      	bne.n	800a244 <strncmp+0x8>
 800a258:	1ad0      	subs	r0, r2, r3
 800a25a:	bd10      	pop	{r4, pc}
 800a25c:	4610      	mov	r0, r2
 800a25e:	e7fc      	b.n	800a25a <strncmp+0x1e>

0800a260 <_fstat_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d07      	ldr	r5, [pc, #28]	@ (800a280 <_fstat_r+0x20>)
 800a264:	2300      	movs	r3, #0
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	4611      	mov	r1, r2
 800a26c:	602b      	str	r3, [r5, #0]
 800a26e:	f7f7 fa2b 	bl	80016c8 <_fstat>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	d102      	bne.n	800a27c <_fstat_r+0x1c>
 800a276:	682b      	ldr	r3, [r5, #0]
 800a278:	b103      	cbz	r3, 800a27c <_fstat_r+0x1c>
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	bd38      	pop	{r3, r4, r5, pc}
 800a27e:	bf00      	nop
 800a280:	200009c0 	.word	0x200009c0

0800a284 <_isatty_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d06      	ldr	r5, [pc, #24]	@ (800a2a0 <_isatty_r+0x1c>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	f7f7 f988 	bl	80015a4 <_isatty>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_isatty_r+0x1a>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_isatty_r+0x1a>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	200009c0 	.word	0x200009c0

0800a2a4 <_sbrk_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d06      	ldr	r5, [pc, #24]	@ (800a2c0 <_sbrk_r+0x1c>)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	602b      	str	r3, [r5, #0]
 800a2b0:	f7f7 fbd6 	bl	8001a60 <_sbrk>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_sbrk_r+0x1a>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_sbrk_r+0x1a>
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	200009c0 	.word	0x200009c0

0800a2c4 <memcpy>:
 800a2c4:	440a      	add	r2, r1
 800a2c6:	4291      	cmp	r1, r2
 800a2c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a2cc:	d100      	bne.n	800a2d0 <memcpy+0xc>
 800a2ce:	4770      	bx	lr
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2da:	4291      	cmp	r1, r2
 800a2dc:	d1f9      	bne.n	800a2d2 <memcpy+0xe>
 800a2de:	bd10      	pop	{r4, pc}

0800a2e0 <nan>:
 800a2e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a2e8 <nan+0x8>
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	00000000 	.word	0x00000000
 800a2ec:	7ff80000 	.word	0x7ff80000

0800a2f0 <__assert_func>:
 800a2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2f2:	4614      	mov	r4, r2
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	4b09      	ldr	r3, [pc, #36]	@ (800a31c <__assert_func+0x2c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	68d8      	ldr	r0, [r3, #12]
 800a2fe:	b954      	cbnz	r4, 800a316 <__assert_func+0x26>
 800a300:	4b07      	ldr	r3, [pc, #28]	@ (800a320 <__assert_func+0x30>)
 800a302:	461c      	mov	r4, r3
 800a304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a308:	9100      	str	r1, [sp, #0]
 800a30a:	462b      	mov	r3, r5
 800a30c:	4905      	ldr	r1, [pc, #20]	@ (800a324 <__assert_func+0x34>)
 800a30e:	f000 fc19 	bl	800ab44 <fiprintf>
 800a312:	f000 fc29 	bl	800ab68 <abort>
 800a316:	4b04      	ldr	r3, [pc, #16]	@ (800a328 <__assert_func+0x38>)
 800a318:	e7f4      	b.n	800a304 <__assert_func+0x14>
 800a31a:	bf00      	nop
 800a31c:	20000018 	.word	0x20000018
 800a320:	0800b120 	.word	0x0800b120
 800a324:	0800b0f2 	.word	0x0800b0f2
 800a328:	0800b0e5 	.word	0x0800b0e5

0800a32c <_calloc_r>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	fba1 5402 	umull	r5, r4, r1, r2
 800a332:	b93c      	cbnz	r4, 800a344 <_calloc_r+0x18>
 800a334:	4629      	mov	r1, r5
 800a336:	f7fd fb8b 	bl	8007a50 <_malloc_r>
 800a33a:	4606      	mov	r6, r0
 800a33c:	b928      	cbnz	r0, 800a34a <_calloc_r+0x1e>
 800a33e:	2600      	movs	r6, #0
 800a340:	4630      	mov	r0, r6
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	220c      	movs	r2, #12
 800a346:	6002      	str	r2, [r0, #0]
 800a348:	e7f9      	b.n	800a33e <_calloc_r+0x12>
 800a34a:	462a      	mov	r2, r5
 800a34c:	4621      	mov	r1, r4
 800a34e:	f7fc fc37 	bl	8006bc0 <memset>
 800a352:	e7f5      	b.n	800a340 <_calloc_r+0x14>

0800a354 <rshift>:
 800a354:	6903      	ldr	r3, [r0, #16]
 800a356:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a35a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a35e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a362:	f100 0414 	add.w	r4, r0, #20
 800a366:	dd45      	ble.n	800a3f4 <rshift+0xa0>
 800a368:	f011 011f 	ands.w	r1, r1, #31
 800a36c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a370:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a374:	d10c      	bne.n	800a390 <rshift+0x3c>
 800a376:	f100 0710 	add.w	r7, r0, #16
 800a37a:	4629      	mov	r1, r5
 800a37c:	42b1      	cmp	r1, r6
 800a37e:	d334      	bcc.n	800a3ea <rshift+0x96>
 800a380:	1a9b      	subs	r3, r3, r2
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	1eea      	subs	r2, r5, #3
 800a386:	4296      	cmp	r6, r2
 800a388:	bf38      	it	cc
 800a38a:	2300      	movcc	r3, #0
 800a38c:	4423      	add	r3, r4
 800a38e:	e015      	b.n	800a3bc <rshift+0x68>
 800a390:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a394:	f1c1 0820 	rsb	r8, r1, #32
 800a398:	40cf      	lsrs	r7, r1
 800a39a:	f105 0e04 	add.w	lr, r5, #4
 800a39e:	46a1      	mov	r9, r4
 800a3a0:	4576      	cmp	r6, lr
 800a3a2:	46f4      	mov	ip, lr
 800a3a4:	d815      	bhi.n	800a3d2 <rshift+0x7e>
 800a3a6:	1a9a      	subs	r2, r3, r2
 800a3a8:	0092      	lsls	r2, r2, #2
 800a3aa:	3a04      	subs	r2, #4
 800a3ac:	3501      	adds	r5, #1
 800a3ae:	42ae      	cmp	r6, r5
 800a3b0:	bf38      	it	cc
 800a3b2:	2200      	movcc	r2, #0
 800a3b4:	18a3      	adds	r3, r4, r2
 800a3b6:	50a7      	str	r7, [r4, r2]
 800a3b8:	b107      	cbz	r7, 800a3bc <rshift+0x68>
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	1b1a      	subs	r2, r3, r4
 800a3be:	42a3      	cmp	r3, r4
 800a3c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3c4:	bf08      	it	eq
 800a3c6:	2300      	moveq	r3, #0
 800a3c8:	6102      	str	r2, [r0, #16]
 800a3ca:	bf08      	it	eq
 800a3cc:	6143      	streq	r3, [r0, #20]
 800a3ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3d2:	f8dc c000 	ldr.w	ip, [ip]
 800a3d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3da:	ea4c 0707 	orr.w	r7, ip, r7
 800a3de:	f849 7b04 	str.w	r7, [r9], #4
 800a3e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3e6:	40cf      	lsrs	r7, r1
 800a3e8:	e7da      	b.n	800a3a0 <rshift+0x4c>
 800a3ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3f2:	e7c3      	b.n	800a37c <rshift+0x28>
 800a3f4:	4623      	mov	r3, r4
 800a3f6:	e7e1      	b.n	800a3bc <rshift+0x68>

0800a3f8 <__hexdig_fun>:
 800a3f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a3fc:	2b09      	cmp	r3, #9
 800a3fe:	d802      	bhi.n	800a406 <__hexdig_fun+0xe>
 800a400:	3820      	subs	r0, #32
 800a402:	b2c0      	uxtb	r0, r0
 800a404:	4770      	bx	lr
 800a406:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a40a:	2b05      	cmp	r3, #5
 800a40c:	d801      	bhi.n	800a412 <__hexdig_fun+0x1a>
 800a40e:	3847      	subs	r0, #71	@ 0x47
 800a410:	e7f7      	b.n	800a402 <__hexdig_fun+0xa>
 800a412:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a416:	2b05      	cmp	r3, #5
 800a418:	d801      	bhi.n	800a41e <__hexdig_fun+0x26>
 800a41a:	3827      	subs	r0, #39	@ 0x27
 800a41c:	e7f1      	b.n	800a402 <__hexdig_fun+0xa>
 800a41e:	2000      	movs	r0, #0
 800a420:	4770      	bx	lr
	...

0800a424 <__gethex>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	b085      	sub	sp, #20
 800a42a:	468a      	mov	sl, r1
 800a42c:	9302      	str	r3, [sp, #8]
 800a42e:	680b      	ldr	r3, [r1, #0]
 800a430:	9001      	str	r0, [sp, #4]
 800a432:	4690      	mov	r8, r2
 800a434:	1c9c      	adds	r4, r3, #2
 800a436:	46a1      	mov	r9, r4
 800a438:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a43c:	2830      	cmp	r0, #48	@ 0x30
 800a43e:	d0fa      	beq.n	800a436 <__gethex+0x12>
 800a440:	eba9 0303 	sub.w	r3, r9, r3
 800a444:	f1a3 0b02 	sub.w	fp, r3, #2
 800a448:	f7ff ffd6 	bl	800a3f8 <__hexdig_fun>
 800a44c:	4605      	mov	r5, r0
 800a44e:	2800      	cmp	r0, #0
 800a450:	d168      	bne.n	800a524 <__gethex+0x100>
 800a452:	49a0      	ldr	r1, [pc, #640]	@ (800a6d4 <__gethex+0x2b0>)
 800a454:	2201      	movs	r2, #1
 800a456:	4648      	mov	r0, r9
 800a458:	f7ff fef0 	bl	800a23c <strncmp>
 800a45c:	4607      	mov	r7, r0
 800a45e:	2800      	cmp	r0, #0
 800a460:	d167      	bne.n	800a532 <__gethex+0x10e>
 800a462:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a466:	4626      	mov	r6, r4
 800a468:	f7ff ffc6 	bl	800a3f8 <__hexdig_fun>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	d062      	beq.n	800a536 <__gethex+0x112>
 800a470:	4623      	mov	r3, r4
 800a472:	7818      	ldrb	r0, [r3, #0]
 800a474:	2830      	cmp	r0, #48	@ 0x30
 800a476:	4699      	mov	r9, r3
 800a478:	f103 0301 	add.w	r3, r3, #1
 800a47c:	d0f9      	beq.n	800a472 <__gethex+0x4e>
 800a47e:	f7ff ffbb 	bl	800a3f8 <__hexdig_fun>
 800a482:	fab0 f580 	clz	r5, r0
 800a486:	096d      	lsrs	r5, r5, #5
 800a488:	f04f 0b01 	mov.w	fp, #1
 800a48c:	464a      	mov	r2, r9
 800a48e:	4616      	mov	r6, r2
 800a490:	3201      	adds	r2, #1
 800a492:	7830      	ldrb	r0, [r6, #0]
 800a494:	f7ff ffb0 	bl	800a3f8 <__hexdig_fun>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d1f8      	bne.n	800a48e <__gethex+0x6a>
 800a49c:	498d      	ldr	r1, [pc, #564]	@ (800a6d4 <__gethex+0x2b0>)
 800a49e:	2201      	movs	r2, #1
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f7ff fecb 	bl	800a23c <strncmp>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d13f      	bne.n	800a52a <__gethex+0x106>
 800a4aa:	b944      	cbnz	r4, 800a4be <__gethex+0x9a>
 800a4ac:	1c74      	adds	r4, r6, #1
 800a4ae:	4622      	mov	r2, r4
 800a4b0:	4616      	mov	r6, r2
 800a4b2:	3201      	adds	r2, #1
 800a4b4:	7830      	ldrb	r0, [r6, #0]
 800a4b6:	f7ff ff9f 	bl	800a3f8 <__hexdig_fun>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d1f8      	bne.n	800a4b0 <__gethex+0x8c>
 800a4be:	1ba4      	subs	r4, r4, r6
 800a4c0:	00a7      	lsls	r7, r4, #2
 800a4c2:	7833      	ldrb	r3, [r6, #0]
 800a4c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a4c8:	2b50      	cmp	r3, #80	@ 0x50
 800a4ca:	d13e      	bne.n	800a54a <__gethex+0x126>
 800a4cc:	7873      	ldrb	r3, [r6, #1]
 800a4ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800a4d0:	d033      	beq.n	800a53a <__gethex+0x116>
 800a4d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a4d4:	d034      	beq.n	800a540 <__gethex+0x11c>
 800a4d6:	1c71      	adds	r1, r6, #1
 800a4d8:	2400      	movs	r4, #0
 800a4da:	7808      	ldrb	r0, [r1, #0]
 800a4dc:	f7ff ff8c 	bl	800a3f8 <__hexdig_fun>
 800a4e0:	1e43      	subs	r3, r0, #1
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b18      	cmp	r3, #24
 800a4e6:	d830      	bhi.n	800a54a <__gethex+0x126>
 800a4e8:	f1a0 0210 	sub.w	r2, r0, #16
 800a4ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4f0:	f7ff ff82 	bl	800a3f8 <__hexdig_fun>
 800a4f4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a4f8:	fa5f fc8c 	uxtb.w	ip, ip
 800a4fc:	f1bc 0f18 	cmp.w	ip, #24
 800a500:	f04f 030a 	mov.w	r3, #10
 800a504:	d91e      	bls.n	800a544 <__gethex+0x120>
 800a506:	b104      	cbz	r4, 800a50a <__gethex+0xe6>
 800a508:	4252      	negs	r2, r2
 800a50a:	4417      	add	r7, r2
 800a50c:	f8ca 1000 	str.w	r1, [sl]
 800a510:	b1ed      	cbz	r5, 800a54e <__gethex+0x12a>
 800a512:	f1bb 0f00 	cmp.w	fp, #0
 800a516:	bf0c      	ite	eq
 800a518:	2506      	moveq	r5, #6
 800a51a:	2500      	movne	r5, #0
 800a51c:	4628      	mov	r0, r5
 800a51e:	b005      	add	sp, #20
 800a520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a524:	2500      	movs	r5, #0
 800a526:	462c      	mov	r4, r5
 800a528:	e7b0      	b.n	800a48c <__gethex+0x68>
 800a52a:	2c00      	cmp	r4, #0
 800a52c:	d1c7      	bne.n	800a4be <__gethex+0x9a>
 800a52e:	4627      	mov	r7, r4
 800a530:	e7c7      	b.n	800a4c2 <__gethex+0x9e>
 800a532:	464e      	mov	r6, r9
 800a534:	462f      	mov	r7, r5
 800a536:	2501      	movs	r5, #1
 800a538:	e7c3      	b.n	800a4c2 <__gethex+0x9e>
 800a53a:	2400      	movs	r4, #0
 800a53c:	1cb1      	adds	r1, r6, #2
 800a53e:	e7cc      	b.n	800a4da <__gethex+0xb6>
 800a540:	2401      	movs	r4, #1
 800a542:	e7fb      	b.n	800a53c <__gethex+0x118>
 800a544:	fb03 0002 	mla	r0, r3, r2, r0
 800a548:	e7ce      	b.n	800a4e8 <__gethex+0xc4>
 800a54a:	4631      	mov	r1, r6
 800a54c:	e7de      	b.n	800a50c <__gethex+0xe8>
 800a54e:	eba6 0309 	sub.w	r3, r6, r9
 800a552:	3b01      	subs	r3, #1
 800a554:	4629      	mov	r1, r5
 800a556:	2b07      	cmp	r3, #7
 800a558:	dc0a      	bgt.n	800a570 <__gethex+0x14c>
 800a55a:	9801      	ldr	r0, [sp, #4]
 800a55c:	f7fd fb04 	bl	8007b68 <_Balloc>
 800a560:	4604      	mov	r4, r0
 800a562:	b940      	cbnz	r0, 800a576 <__gethex+0x152>
 800a564:	4b5c      	ldr	r3, [pc, #368]	@ (800a6d8 <__gethex+0x2b4>)
 800a566:	4602      	mov	r2, r0
 800a568:	21e4      	movs	r1, #228	@ 0xe4
 800a56a:	485c      	ldr	r0, [pc, #368]	@ (800a6dc <__gethex+0x2b8>)
 800a56c:	f7ff fec0 	bl	800a2f0 <__assert_func>
 800a570:	3101      	adds	r1, #1
 800a572:	105b      	asrs	r3, r3, #1
 800a574:	e7ef      	b.n	800a556 <__gethex+0x132>
 800a576:	f100 0a14 	add.w	sl, r0, #20
 800a57a:	2300      	movs	r3, #0
 800a57c:	4655      	mov	r5, sl
 800a57e:	469b      	mov	fp, r3
 800a580:	45b1      	cmp	r9, r6
 800a582:	d337      	bcc.n	800a5f4 <__gethex+0x1d0>
 800a584:	f845 bb04 	str.w	fp, [r5], #4
 800a588:	eba5 050a 	sub.w	r5, r5, sl
 800a58c:	10ad      	asrs	r5, r5, #2
 800a58e:	6125      	str	r5, [r4, #16]
 800a590:	4658      	mov	r0, fp
 800a592:	f7fd fbdb 	bl	8007d4c <__hi0bits>
 800a596:	016d      	lsls	r5, r5, #5
 800a598:	f8d8 6000 	ldr.w	r6, [r8]
 800a59c:	1a2d      	subs	r5, r5, r0
 800a59e:	42b5      	cmp	r5, r6
 800a5a0:	dd54      	ble.n	800a64c <__gethex+0x228>
 800a5a2:	1bad      	subs	r5, r5, r6
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f7fd ff6f 	bl	800848a <__any_on>
 800a5ac:	4681      	mov	r9, r0
 800a5ae:	b178      	cbz	r0, 800a5d0 <__gethex+0x1ac>
 800a5b0:	1e6b      	subs	r3, r5, #1
 800a5b2:	1159      	asrs	r1, r3, #5
 800a5b4:	f003 021f 	and.w	r2, r3, #31
 800a5b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a5bc:	f04f 0901 	mov.w	r9, #1
 800a5c0:	fa09 f202 	lsl.w	r2, r9, r2
 800a5c4:	420a      	tst	r2, r1
 800a5c6:	d003      	beq.n	800a5d0 <__gethex+0x1ac>
 800a5c8:	454b      	cmp	r3, r9
 800a5ca:	dc36      	bgt.n	800a63a <__gethex+0x216>
 800a5cc:	f04f 0902 	mov.w	r9, #2
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f7ff febe 	bl	800a354 <rshift>
 800a5d8:	442f      	add	r7, r5
 800a5da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5de:	42bb      	cmp	r3, r7
 800a5e0:	da42      	bge.n	800a668 <__gethex+0x244>
 800a5e2:	9801      	ldr	r0, [sp, #4]
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	f7fd faff 	bl	8007be8 <_Bfree>
 800a5ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	25a3      	movs	r5, #163	@ 0xa3
 800a5f2:	e793      	b.n	800a51c <__gethex+0xf8>
 800a5f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a5f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a5fa:	d012      	beq.n	800a622 <__gethex+0x1fe>
 800a5fc:	2b20      	cmp	r3, #32
 800a5fe:	d104      	bne.n	800a60a <__gethex+0x1e6>
 800a600:	f845 bb04 	str.w	fp, [r5], #4
 800a604:	f04f 0b00 	mov.w	fp, #0
 800a608:	465b      	mov	r3, fp
 800a60a:	7830      	ldrb	r0, [r6, #0]
 800a60c:	9303      	str	r3, [sp, #12]
 800a60e:	f7ff fef3 	bl	800a3f8 <__hexdig_fun>
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	f000 000f 	and.w	r0, r0, #15
 800a618:	4098      	lsls	r0, r3
 800a61a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a61e:	3304      	adds	r3, #4
 800a620:	e7ae      	b.n	800a580 <__gethex+0x15c>
 800a622:	45b1      	cmp	r9, r6
 800a624:	d8ea      	bhi.n	800a5fc <__gethex+0x1d8>
 800a626:	492b      	ldr	r1, [pc, #172]	@ (800a6d4 <__gethex+0x2b0>)
 800a628:	9303      	str	r3, [sp, #12]
 800a62a:	2201      	movs	r2, #1
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7ff fe05 	bl	800a23c <strncmp>
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	2800      	cmp	r0, #0
 800a636:	d1e1      	bne.n	800a5fc <__gethex+0x1d8>
 800a638:	e7a2      	b.n	800a580 <__gethex+0x15c>
 800a63a:	1ea9      	subs	r1, r5, #2
 800a63c:	4620      	mov	r0, r4
 800a63e:	f7fd ff24 	bl	800848a <__any_on>
 800a642:	2800      	cmp	r0, #0
 800a644:	d0c2      	beq.n	800a5cc <__gethex+0x1a8>
 800a646:	f04f 0903 	mov.w	r9, #3
 800a64a:	e7c1      	b.n	800a5d0 <__gethex+0x1ac>
 800a64c:	da09      	bge.n	800a662 <__gethex+0x23e>
 800a64e:	1b75      	subs	r5, r6, r5
 800a650:	4621      	mov	r1, r4
 800a652:	9801      	ldr	r0, [sp, #4]
 800a654:	462a      	mov	r2, r5
 800a656:	f7fd fcdf 	bl	8008018 <__lshift>
 800a65a:	1b7f      	subs	r7, r7, r5
 800a65c:	4604      	mov	r4, r0
 800a65e:	f100 0a14 	add.w	sl, r0, #20
 800a662:	f04f 0900 	mov.w	r9, #0
 800a666:	e7b8      	b.n	800a5da <__gethex+0x1b6>
 800a668:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a66c:	42bd      	cmp	r5, r7
 800a66e:	dd6f      	ble.n	800a750 <__gethex+0x32c>
 800a670:	1bed      	subs	r5, r5, r7
 800a672:	42ae      	cmp	r6, r5
 800a674:	dc34      	bgt.n	800a6e0 <__gethex+0x2bc>
 800a676:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d022      	beq.n	800a6c4 <__gethex+0x2a0>
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d024      	beq.n	800a6cc <__gethex+0x2a8>
 800a682:	2b01      	cmp	r3, #1
 800a684:	d115      	bne.n	800a6b2 <__gethex+0x28e>
 800a686:	42ae      	cmp	r6, r5
 800a688:	d113      	bne.n	800a6b2 <__gethex+0x28e>
 800a68a:	2e01      	cmp	r6, #1
 800a68c:	d10b      	bne.n	800a6a6 <__gethex+0x282>
 800a68e:	9a02      	ldr	r2, [sp, #8]
 800a690:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	2301      	movs	r3, #1
 800a698:	6123      	str	r3, [r4, #16]
 800a69a:	f8ca 3000 	str.w	r3, [sl]
 800a69e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6a0:	2562      	movs	r5, #98	@ 0x62
 800a6a2:	601c      	str	r4, [r3, #0]
 800a6a4:	e73a      	b.n	800a51c <__gethex+0xf8>
 800a6a6:	1e71      	subs	r1, r6, #1
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f7fd feee 	bl	800848a <__any_on>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	d1ed      	bne.n	800a68e <__gethex+0x26a>
 800a6b2:	9801      	ldr	r0, [sp, #4]
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	f7fd fa97 	bl	8007be8 <_Bfree>
 800a6ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6bc:	2300      	movs	r3, #0
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	2550      	movs	r5, #80	@ 0x50
 800a6c2:	e72b      	b.n	800a51c <__gethex+0xf8>
 800a6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1f3      	bne.n	800a6b2 <__gethex+0x28e>
 800a6ca:	e7e0      	b.n	800a68e <__gethex+0x26a>
 800a6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1dd      	bne.n	800a68e <__gethex+0x26a>
 800a6d2:	e7ee      	b.n	800a6b2 <__gethex+0x28e>
 800a6d4:	0800af58 	.word	0x0800af58
 800a6d8:	0800adef 	.word	0x0800adef
 800a6dc:	0800b121 	.word	0x0800b121
 800a6e0:	1e6f      	subs	r7, r5, #1
 800a6e2:	f1b9 0f00 	cmp.w	r9, #0
 800a6e6:	d130      	bne.n	800a74a <__gethex+0x326>
 800a6e8:	b127      	cbz	r7, 800a6f4 <__gethex+0x2d0>
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7fd fecc 	bl	800848a <__any_on>
 800a6f2:	4681      	mov	r9, r0
 800a6f4:	117a      	asrs	r2, r7, #5
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a6fc:	f007 071f 	and.w	r7, r7, #31
 800a700:	40bb      	lsls	r3, r7
 800a702:	4213      	tst	r3, r2
 800a704:	4629      	mov	r1, r5
 800a706:	4620      	mov	r0, r4
 800a708:	bf18      	it	ne
 800a70a:	f049 0902 	orrne.w	r9, r9, #2
 800a70e:	f7ff fe21 	bl	800a354 <rshift>
 800a712:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a716:	1b76      	subs	r6, r6, r5
 800a718:	2502      	movs	r5, #2
 800a71a:	f1b9 0f00 	cmp.w	r9, #0
 800a71e:	d047      	beq.n	800a7b0 <__gethex+0x38c>
 800a720:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a724:	2b02      	cmp	r3, #2
 800a726:	d015      	beq.n	800a754 <__gethex+0x330>
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d017      	beq.n	800a75c <__gethex+0x338>
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d109      	bne.n	800a744 <__gethex+0x320>
 800a730:	f019 0f02 	tst.w	r9, #2
 800a734:	d006      	beq.n	800a744 <__gethex+0x320>
 800a736:	f8da 3000 	ldr.w	r3, [sl]
 800a73a:	ea49 0903 	orr.w	r9, r9, r3
 800a73e:	f019 0f01 	tst.w	r9, #1
 800a742:	d10e      	bne.n	800a762 <__gethex+0x33e>
 800a744:	f045 0510 	orr.w	r5, r5, #16
 800a748:	e032      	b.n	800a7b0 <__gethex+0x38c>
 800a74a:	f04f 0901 	mov.w	r9, #1
 800a74e:	e7d1      	b.n	800a6f4 <__gethex+0x2d0>
 800a750:	2501      	movs	r5, #1
 800a752:	e7e2      	b.n	800a71a <__gethex+0x2f6>
 800a754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a756:	f1c3 0301 	rsb	r3, r3, #1
 800a75a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0f0      	beq.n	800a744 <__gethex+0x320>
 800a762:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a766:	f104 0314 	add.w	r3, r4, #20
 800a76a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a76e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a772:	f04f 0c00 	mov.w	ip, #0
 800a776:	4618      	mov	r0, r3
 800a778:	f853 2b04 	ldr.w	r2, [r3], #4
 800a77c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a780:	d01b      	beq.n	800a7ba <__gethex+0x396>
 800a782:	3201      	adds	r2, #1
 800a784:	6002      	str	r2, [r0, #0]
 800a786:	2d02      	cmp	r5, #2
 800a788:	f104 0314 	add.w	r3, r4, #20
 800a78c:	d13c      	bne.n	800a808 <__gethex+0x3e4>
 800a78e:	f8d8 2000 	ldr.w	r2, [r8]
 800a792:	3a01      	subs	r2, #1
 800a794:	42b2      	cmp	r2, r6
 800a796:	d109      	bne.n	800a7ac <__gethex+0x388>
 800a798:	1171      	asrs	r1, r6, #5
 800a79a:	2201      	movs	r2, #1
 800a79c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7a0:	f006 061f 	and.w	r6, r6, #31
 800a7a4:	fa02 f606 	lsl.w	r6, r2, r6
 800a7a8:	421e      	tst	r6, r3
 800a7aa:	d13a      	bne.n	800a822 <__gethex+0x3fe>
 800a7ac:	f045 0520 	orr.w	r5, r5, #32
 800a7b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7b2:	601c      	str	r4, [r3, #0]
 800a7b4:	9b02      	ldr	r3, [sp, #8]
 800a7b6:	601f      	str	r7, [r3, #0]
 800a7b8:	e6b0      	b.n	800a51c <__gethex+0xf8>
 800a7ba:	4299      	cmp	r1, r3
 800a7bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7c0:	d8d9      	bhi.n	800a776 <__gethex+0x352>
 800a7c2:	68a3      	ldr	r3, [r4, #8]
 800a7c4:	459b      	cmp	fp, r3
 800a7c6:	db17      	blt.n	800a7f8 <__gethex+0x3d4>
 800a7c8:	6861      	ldr	r1, [r4, #4]
 800a7ca:	9801      	ldr	r0, [sp, #4]
 800a7cc:	3101      	adds	r1, #1
 800a7ce:	f7fd f9cb 	bl	8007b68 <_Balloc>
 800a7d2:	4681      	mov	r9, r0
 800a7d4:	b918      	cbnz	r0, 800a7de <__gethex+0x3ba>
 800a7d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a840 <__gethex+0x41c>)
 800a7d8:	4602      	mov	r2, r0
 800a7da:	2184      	movs	r1, #132	@ 0x84
 800a7dc:	e6c5      	b.n	800a56a <__gethex+0x146>
 800a7de:	6922      	ldr	r2, [r4, #16]
 800a7e0:	3202      	adds	r2, #2
 800a7e2:	f104 010c 	add.w	r1, r4, #12
 800a7e6:	0092      	lsls	r2, r2, #2
 800a7e8:	300c      	adds	r0, #12
 800a7ea:	f7ff fd6b 	bl	800a2c4 <memcpy>
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	9801      	ldr	r0, [sp, #4]
 800a7f2:	f7fd f9f9 	bl	8007be8 <_Bfree>
 800a7f6:	464c      	mov	r4, r9
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a800:	6122      	str	r2, [r4, #16]
 800a802:	2201      	movs	r2, #1
 800a804:	615a      	str	r2, [r3, #20]
 800a806:	e7be      	b.n	800a786 <__gethex+0x362>
 800a808:	6922      	ldr	r2, [r4, #16]
 800a80a:	455a      	cmp	r2, fp
 800a80c:	dd0b      	ble.n	800a826 <__gethex+0x402>
 800a80e:	2101      	movs	r1, #1
 800a810:	4620      	mov	r0, r4
 800a812:	f7ff fd9f 	bl	800a354 <rshift>
 800a816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a81a:	3701      	adds	r7, #1
 800a81c:	42bb      	cmp	r3, r7
 800a81e:	f6ff aee0 	blt.w	800a5e2 <__gethex+0x1be>
 800a822:	2501      	movs	r5, #1
 800a824:	e7c2      	b.n	800a7ac <__gethex+0x388>
 800a826:	f016 061f 	ands.w	r6, r6, #31
 800a82a:	d0fa      	beq.n	800a822 <__gethex+0x3fe>
 800a82c:	4453      	add	r3, sl
 800a82e:	f1c6 0620 	rsb	r6, r6, #32
 800a832:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a836:	f7fd fa89 	bl	8007d4c <__hi0bits>
 800a83a:	42b0      	cmp	r0, r6
 800a83c:	dbe7      	blt.n	800a80e <__gethex+0x3ea>
 800a83e:	e7f0      	b.n	800a822 <__gethex+0x3fe>
 800a840:	0800adef 	.word	0x0800adef

0800a844 <L_shift>:
 800a844:	f1c2 0208 	rsb	r2, r2, #8
 800a848:	0092      	lsls	r2, r2, #2
 800a84a:	b570      	push	{r4, r5, r6, lr}
 800a84c:	f1c2 0620 	rsb	r6, r2, #32
 800a850:	6843      	ldr	r3, [r0, #4]
 800a852:	6804      	ldr	r4, [r0, #0]
 800a854:	fa03 f506 	lsl.w	r5, r3, r6
 800a858:	432c      	orrs	r4, r5
 800a85a:	40d3      	lsrs	r3, r2
 800a85c:	6004      	str	r4, [r0, #0]
 800a85e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a862:	4288      	cmp	r0, r1
 800a864:	d3f4      	bcc.n	800a850 <L_shift+0xc>
 800a866:	bd70      	pop	{r4, r5, r6, pc}

0800a868 <__match>:
 800a868:	b530      	push	{r4, r5, lr}
 800a86a:	6803      	ldr	r3, [r0, #0]
 800a86c:	3301      	adds	r3, #1
 800a86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a872:	b914      	cbnz	r4, 800a87a <__match+0x12>
 800a874:	6003      	str	r3, [r0, #0]
 800a876:	2001      	movs	r0, #1
 800a878:	bd30      	pop	{r4, r5, pc}
 800a87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a87e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a882:	2d19      	cmp	r5, #25
 800a884:	bf98      	it	ls
 800a886:	3220      	addls	r2, #32
 800a888:	42a2      	cmp	r2, r4
 800a88a:	d0f0      	beq.n	800a86e <__match+0x6>
 800a88c:	2000      	movs	r0, #0
 800a88e:	e7f3      	b.n	800a878 <__match+0x10>

0800a890 <__hexnan>:
 800a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a894:	680b      	ldr	r3, [r1, #0]
 800a896:	6801      	ldr	r1, [r0, #0]
 800a898:	115e      	asrs	r6, r3, #5
 800a89a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a89e:	f013 031f 	ands.w	r3, r3, #31
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	bf18      	it	ne
 800a8a6:	3604      	addne	r6, #4
 800a8a8:	2500      	movs	r5, #0
 800a8aa:	1f37      	subs	r7, r6, #4
 800a8ac:	4682      	mov	sl, r0
 800a8ae:	4690      	mov	r8, r2
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8b6:	46b9      	mov	r9, r7
 800a8b8:	463c      	mov	r4, r7
 800a8ba:	9502      	str	r5, [sp, #8]
 800a8bc:	46ab      	mov	fp, r5
 800a8be:	784a      	ldrb	r2, [r1, #1]
 800a8c0:	1c4b      	adds	r3, r1, #1
 800a8c2:	9303      	str	r3, [sp, #12]
 800a8c4:	b342      	cbz	r2, 800a918 <__hexnan+0x88>
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	9105      	str	r1, [sp, #20]
 800a8ca:	9204      	str	r2, [sp, #16]
 800a8cc:	f7ff fd94 	bl	800a3f8 <__hexdig_fun>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d151      	bne.n	800a978 <__hexnan+0xe8>
 800a8d4:	9a04      	ldr	r2, [sp, #16]
 800a8d6:	9905      	ldr	r1, [sp, #20]
 800a8d8:	2a20      	cmp	r2, #32
 800a8da:	d818      	bhi.n	800a90e <__hexnan+0x7e>
 800a8dc:	9b02      	ldr	r3, [sp, #8]
 800a8de:	459b      	cmp	fp, r3
 800a8e0:	dd13      	ble.n	800a90a <__hexnan+0x7a>
 800a8e2:	454c      	cmp	r4, r9
 800a8e4:	d206      	bcs.n	800a8f4 <__hexnan+0x64>
 800a8e6:	2d07      	cmp	r5, #7
 800a8e8:	dc04      	bgt.n	800a8f4 <__hexnan+0x64>
 800a8ea:	462a      	mov	r2, r5
 800a8ec:	4649      	mov	r1, r9
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f7ff ffa8 	bl	800a844 <L_shift>
 800a8f4:	4544      	cmp	r4, r8
 800a8f6:	d952      	bls.n	800a99e <__hexnan+0x10e>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	f1a4 0904 	sub.w	r9, r4, #4
 800a8fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800a902:	f8cd b008 	str.w	fp, [sp, #8]
 800a906:	464c      	mov	r4, r9
 800a908:	461d      	mov	r5, r3
 800a90a:	9903      	ldr	r1, [sp, #12]
 800a90c:	e7d7      	b.n	800a8be <__hexnan+0x2e>
 800a90e:	2a29      	cmp	r2, #41	@ 0x29
 800a910:	d157      	bne.n	800a9c2 <__hexnan+0x132>
 800a912:	3102      	adds	r1, #2
 800a914:	f8ca 1000 	str.w	r1, [sl]
 800a918:	f1bb 0f00 	cmp.w	fp, #0
 800a91c:	d051      	beq.n	800a9c2 <__hexnan+0x132>
 800a91e:	454c      	cmp	r4, r9
 800a920:	d206      	bcs.n	800a930 <__hexnan+0xa0>
 800a922:	2d07      	cmp	r5, #7
 800a924:	dc04      	bgt.n	800a930 <__hexnan+0xa0>
 800a926:	462a      	mov	r2, r5
 800a928:	4649      	mov	r1, r9
 800a92a:	4620      	mov	r0, r4
 800a92c:	f7ff ff8a 	bl	800a844 <L_shift>
 800a930:	4544      	cmp	r4, r8
 800a932:	d936      	bls.n	800a9a2 <__hexnan+0x112>
 800a934:	f1a8 0204 	sub.w	r2, r8, #4
 800a938:	4623      	mov	r3, r4
 800a93a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a93e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a942:	429f      	cmp	r7, r3
 800a944:	d2f9      	bcs.n	800a93a <__hexnan+0xaa>
 800a946:	1b3b      	subs	r3, r7, r4
 800a948:	f023 0303 	bic.w	r3, r3, #3
 800a94c:	3304      	adds	r3, #4
 800a94e:	3401      	adds	r4, #1
 800a950:	3e03      	subs	r6, #3
 800a952:	42b4      	cmp	r4, r6
 800a954:	bf88      	it	hi
 800a956:	2304      	movhi	r3, #4
 800a958:	4443      	add	r3, r8
 800a95a:	2200      	movs	r2, #0
 800a95c:	f843 2b04 	str.w	r2, [r3], #4
 800a960:	429f      	cmp	r7, r3
 800a962:	d2fb      	bcs.n	800a95c <__hexnan+0xcc>
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	b91b      	cbnz	r3, 800a970 <__hexnan+0xe0>
 800a968:	4547      	cmp	r7, r8
 800a96a:	d128      	bne.n	800a9be <__hexnan+0x12e>
 800a96c:	2301      	movs	r3, #1
 800a96e:	603b      	str	r3, [r7, #0]
 800a970:	2005      	movs	r0, #5
 800a972:	b007      	add	sp, #28
 800a974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a978:	3501      	adds	r5, #1
 800a97a:	2d08      	cmp	r5, #8
 800a97c:	f10b 0b01 	add.w	fp, fp, #1
 800a980:	dd06      	ble.n	800a990 <__hexnan+0x100>
 800a982:	4544      	cmp	r4, r8
 800a984:	d9c1      	bls.n	800a90a <__hexnan+0x7a>
 800a986:	2300      	movs	r3, #0
 800a988:	f844 3c04 	str.w	r3, [r4, #-4]
 800a98c:	2501      	movs	r5, #1
 800a98e:	3c04      	subs	r4, #4
 800a990:	6822      	ldr	r2, [r4, #0]
 800a992:	f000 000f 	and.w	r0, r0, #15
 800a996:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a99a:	6020      	str	r0, [r4, #0]
 800a99c:	e7b5      	b.n	800a90a <__hexnan+0x7a>
 800a99e:	2508      	movs	r5, #8
 800a9a0:	e7b3      	b.n	800a90a <__hexnan+0x7a>
 800a9a2:	9b01      	ldr	r3, [sp, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d0dd      	beq.n	800a964 <__hexnan+0xd4>
 800a9a8:	f1c3 0320 	rsb	r3, r3, #32
 800a9ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9b0:	40da      	lsrs	r2, r3
 800a9b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a9bc:	e7d2      	b.n	800a964 <__hexnan+0xd4>
 800a9be:	3f04      	subs	r7, #4
 800a9c0:	e7d0      	b.n	800a964 <__hexnan+0xd4>
 800a9c2:	2004      	movs	r0, #4
 800a9c4:	e7d5      	b.n	800a972 <__hexnan+0xe2>

0800a9c6 <__ascii_mbtowc>:
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	b901      	cbnz	r1, 800a9cc <__ascii_mbtowc+0x6>
 800a9ca:	a901      	add	r1, sp, #4
 800a9cc:	b142      	cbz	r2, 800a9e0 <__ascii_mbtowc+0x1a>
 800a9ce:	b14b      	cbz	r3, 800a9e4 <__ascii_mbtowc+0x1e>
 800a9d0:	7813      	ldrb	r3, [r2, #0]
 800a9d2:	600b      	str	r3, [r1, #0]
 800a9d4:	7812      	ldrb	r2, [r2, #0]
 800a9d6:	1e10      	subs	r0, r2, #0
 800a9d8:	bf18      	it	ne
 800a9da:	2001      	movne	r0, #1
 800a9dc:	b002      	add	sp, #8
 800a9de:	4770      	bx	lr
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	e7fb      	b.n	800a9dc <__ascii_mbtowc+0x16>
 800a9e4:	f06f 0001 	mvn.w	r0, #1
 800a9e8:	e7f8      	b.n	800a9dc <__ascii_mbtowc+0x16>

0800a9ea <_realloc_r>:
 800a9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	4615      	mov	r5, r2
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	b921      	cbnz	r1, 800aa00 <_realloc_r+0x16>
 800a9f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	f7fd b828 	b.w	8007a50 <_malloc_r>
 800aa00:	b92a      	cbnz	r2, 800aa0e <_realloc_r+0x24>
 800aa02:	f7fc ffb1 	bl	8007968 <_free_r>
 800aa06:	2400      	movs	r4, #0
 800aa08:	4620      	mov	r0, r4
 800aa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0e:	f000 f8b2 	bl	800ab76 <_malloc_usable_size_r>
 800aa12:	4285      	cmp	r5, r0
 800aa14:	4606      	mov	r6, r0
 800aa16:	d802      	bhi.n	800aa1e <_realloc_r+0x34>
 800aa18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa1c:	d8f4      	bhi.n	800aa08 <_realloc_r+0x1e>
 800aa1e:	4629      	mov	r1, r5
 800aa20:	4640      	mov	r0, r8
 800aa22:	f7fd f815 	bl	8007a50 <_malloc_r>
 800aa26:	4607      	mov	r7, r0
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d0ec      	beq.n	800aa06 <_realloc_r+0x1c>
 800aa2c:	42b5      	cmp	r5, r6
 800aa2e:	462a      	mov	r2, r5
 800aa30:	4621      	mov	r1, r4
 800aa32:	bf28      	it	cs
 800aa34:	4632      	movcs	r2, r6
 800aa36:	f7ff fc45 	bl	800a2c4 <memcpy>
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	f7fc ff93 	bl	8007968 <_free_r>
 800aa42:	463c      	mov	r4, r7
 800aa44:	e7e0      	b.n	800aa08 <_realloc_r+0x1e>
	...

0800aa48 <_strtoul_l.constprop.0>:
 800aa48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa4c:	4e34      	ldr	r6, [pc, #208]	@ (800ab20 <_strtoul_l.constprop.0+0xd8>)
 800aa4e:	4686      	mov	lr, r0
 800aa50:	460d      	mov	r5, r1
 800aa52:	4628      	mov	r0, r5
 800aa54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa58:	5d37      	ldrb	r7, [r6, r4]
 800aa5a:	f017 0708 	ands.w	r7, r7, #8
 800aa5e:	d1f8      	bne.n	800aa52 <_strtoul_l.constprop.0+0xa>
 800aa60:	2c2d      	cmp	r4, #45	@ 0x2d
 800aa62:	d12f      	bne.n	800aac4 <_strtoul_l.constprop.0+0x7c>
 800aa64:	782c      	ldrb	r4, [r5, #0]
 800aa66:	2701      	movs	r7, #1
 800aa68:	1c85      	adds	r5, r0, #2
 800aa6a:	f033 0010 	bics.w	r0, r3, #16
 800aa6e:	d109      	bne.n	800aa84 <_strtoul_l.constprop.0+0x3c>
 800aa70:	2c30      	cmp	r4, #48	@ 0x30
 800aa72:	d12c      	bne.n	800aace <_strtoul_l.constprop.0+0x86>
 800aa74:	7828      	ldrb	r0, [r5, #0]
 800aa76:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800aa7a:	2858      	cmp	r0, #88	@ 0x58
 800aa7c:	d127      	bne.n	800aace <_strtoul_l.constprop.0+0x86>
 800aa7e:	786c      	ldrb	r4, [r5, #1]
 800aa80:	2310      	movs	r3, #16
 800aa82:	3502      	adds	r5, #2
 800aa84:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800aa88:	2600      	movs	r6, #0
 800aa8a:	fbb8 f8f3 	udiv	r8, r8, r3
 800aa8e:	fb03 f908 	mul.w	r9, r3, r8
 800aa92:	ea6f 0909 	mvn.w	r9, r9
 800aa96:	4630      	mov	r0, r6
 800aa98:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800aa9c:	f1bc 0f09 	cmp.w	ip, #9
 800aaa0:	d81c      	bhi.n	800aadc <_strtoul_l.constprop.0+0x94>
 800aaa2:	4664      	mov	r4, ip
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	dd2a      	ble.n	800aafe <_strtoul_l.constprop.0+0xb6>
 800aaa8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800aaac:	d007      	beq.n	800aabe <_strtoul_l.constprop.0+0x76>
 800aaae:	4580      	cmp	r8, r0
 800aab0:	d322      	bcc.n	800aaf8 <_strtoul_l.constprop.0+0xb0>
 800aab2:	d101      	bne.n	800aab8 <_strtoul_l.constprop.0+0x70>
 800aab4:	45a1      	cmp	r9, r4
 800aab6:	db1f      	blt.n	800aaf8 <_strtoul_l.constprop.0+0xb0>
 800aab8:	fb00 4003 	mla	r0, r0, r3, r4
 800aabc:	2601      	movs	r6, #1
 800aabe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aac2:	e7e9      	b.n	800aa98 <_strtoul_l.constprop.0+0x50>
 800aac4:	2c2b      	cmp	r4, #43	@ 0x2b
 800aac6:	bf04      	itt	eq
 800aac8:	782c      	ldrbeq	r4, [r5, #0]
 800aaca:	1c85      	addeq	r5, r0, #2
 800aacc:	e7cd      	b.n	800aa6a <_strtoul_l.constprop.0+0x22>
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1d8      	bne.n	800aa84 <_strtoul_l.constprop.0+0x3c>
 800aad2:	2c30      	cmp	r4, #48	@ 0x30
 800aad4:	bf0c      	ite	eq
 800aad6:	2308      	moveq	r3, #8
 800aad8:	230a      	movne	r3, #10
 800aada:	e7d3      	b.n	800aa84 <_strtoul_l.constprop.0+0x3c>
 800aadc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800aae0:	f1bc 0f19 	cmp.w	ip, #25
 800aae4:	d801      	bhi.n	800aaea <_strtoul_l.constprop.0+0xa2>
 800aae6:	3c37      	subs	r4, #55	@ 0x37
 800aae8:	e7dc      	b.n	800aaa4 <_strtoul_l.constprop.0+0x5c>
 800aaea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800aaee:	f1bc 0f19 	cmp.w	ip, #25
 800aaf2:	d804      	bhi.n	800aafe <_strtoul_l.constprop.0+0xb6>
 800aaf4:	3c57      	subs	r4, #87	@ 0x57
 800aaf6:	e7d5      	b.n	800aaa4 <_strtoul_l.constprop.0+0x5c>
 800aaf8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800aafc:	e7df      	b.n	800aabe <_strtoul_l.constprop.0+0x76>
 800aafe:	1c73      	adds	r3, r6, #1
 800ab00:	d106      	bne.n	800ab10 <_strtoul_l.constprop.0+0xc8>
 800ab02:	2322      	movs	r3, #34	@ 0x22
 800ab04:	f8ce 3000 	str.w	r3, [lr]
 800ab08:	4630      	mov	r0, r6
 800ab0a:	b932      	cbnz	r2, 800ab1a <_strtoul_l.constprop.0+0xd2>
 800ab0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab10:	b107      	cbz	r7, 800ab14 <_strtoul_l.constprop.0+0xcc>
 800ab12:	4240      	negs	r0, r0
 800ab14:	2a00      	cmp	r2, #0
 800ab16:	d0f9      	beq.n	800ab0c <_strtoul_l.constprop.0+0xc4>
 800ab18:	b106      	cbz	r6, 800ab1c <_strtoul_l.constprop.0+0xd4>
 800ab1a:	1e69      	subs	r1, r5, #1
 800ab1c:	6011      	str	r1, [r2, #0]
 800ab1e:	e7f5      	b.n	800ab0c <_strtoul_l.constprop.0+0xc4>
 800ab20:	0800afb1 	.word	0x0800afb1

0800ab24 <_strtoul_r>:
 800ab24:	f7ff bf90 	b.w	800aa48 <_strtoul_l.constprop.0>

0800ab28 <__ascii_wctomb>:
 800ab28:	4603      	mov	r3, r0
 800ab2a:	4608      	mov	r0, r1
 800ab2c:	b141      	cbz	r1, 800ab40 <__ascii_wctomb+0x18>
 800ab2e:	2aff      	cmp	r2, #255	@ 0xff
 800ab30:	d904      	bls.n	800ab3c <__ascii_wctomb+0x14>
 800ab32:	228a      	movs	r2, #138	@ 0x8a
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab3a:	4770      	bx	lr
 800ab3c:	700a      	strb	r2, [r1, #0]
 800ab3e:	2001      	movs	r0, #1
 800ab40:	4770      	bx	lr
	...

0800ab44 <fiprintf>:
 800ab44:	b40e      	push	{r1, r2, r3}
 800ab46:	b503      	push	{r0, r1, lr}
 800ab48:	4601      	mov	r1, r0
 800ab4a:	ab03      	add	r3, sp, #12
 800ab4c:	4805      	ldr	r0, [pc, #20]	@ (800ab64 <fiprintf+0x20>)
 800ab4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab52:	6800      	ldr	r0, [r0, #0]
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	f7fe fcbf 	bl	80094d8 <_vfiprintf_r>
 800ab5a:	b002      	add	sp, #8
 800ab5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab60:	b003      	add	sp, #12
 800ab62:	4770      	bx	lr
 800ab64:	20000018 	.word	0x20000018

0800ab68 <abort>:
 800ab68:	b508      	push	{r3, lr}
 800ab6a:	2006      	movs	r0, #6
 800ab6c:	f000 f834 	bl	800abd8 <raise>
 800ab70:	2001      	movs	r0, #1
 800ab72:	f000 f85d 	bl	800ac30 <_exit>

0800ab76 <_malloc_usable_size_r>:
 800ab76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab7a:	1f18      	subs	r0, r3, #4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bfbc      	itt	lt
 800ab80:	580b      	ldrlt	r3, [r1, r0]
 800ab82:	18c0      	addlt	r0, r0, r3
 800ab84:	4770      	bx	lr

0800ab86 <_raise_r>:
 800ab86:	291f      	cmp	r1, #31
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	d904      	bls.n	800ab9a <_raise_r+0x14>
 800ab90:	2316      	movs	r3, #22
 800ab92:	6003      	str	r3, [r0, #0]
 800ab94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab98:	bd38      	pop	{r3, r4, r5, pc}
 800ab9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab9c:	b112      	cbz	r2, 800aba4 <_raise_r+0x1e>
 800ab9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aba2:	b94b      	cbnz	r3, 800abb8 <_raise_r+0x32>
 800aba4:	4628      	mov	r0, r5
 800aba6:	f000 f831 	bl	800ac0c <_getpid_r>
 800abaa:	4622      	mov	r2, r4
 800abac:	4601      	mov	r1, r0
 800abae:	4628      	mov	r0, r5
 800abb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb4:	f000 b818 	b.w	800abe8 <_kill_r>
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d00a      	beq.n	800abd2 <_raise_r+0x4c>
 800abbc:	1c59      	adds	r1, r3, #1
 800abbe:	d103      	bne.n	800abc8 <_raise_r+0x42>
 800abc0:	2316      	movs	r3, #22
 800abc2:	6003      	str	r3, [r0, #0]
 800abc4:	2001      	movs	r0, #1
 800abc6:	e7e7      	b.n	800ab98 <_raise_r+0x12>
 800abc8:	2100      	movs	r1, #0
 800abca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800abce:	4620      	mov	r0, r4
 800abd0:	4798      	blx	r3
 800abd2:	2000      	movs	r0, #0
 800abd4:	e7e0      	b.n	800ab98 <_raise_r+0x12>
	...

0800abd8 <raise>:
 800abd8:	4b02      	ldr	r3, [pc, #8]	@ (800abe4 <raise+0xc>)
 800abda:	4601      	mov	r1, r0
 800abdc:	6818      	ldr	r0, [r3, #0]
 800abde:	f7ff bfd2 	b.w	800ab86 <_raise_r>
 800abe2:	bf00      	nop
 800abe4:	20000018 	.word	0x20000018

0800abe8 <_kill_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d07      	ldr	r5, [pc, #28]	@ (800ac08 <_kill_r+0x20>)
 800abec:	2300      	movs	r3, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	4611      	mov	r1, r2
 800abf4:	602b      	str	r3, [r5, #0]
 800abf6:	f000 f813 	bl	800ac20 <_kill>
 800abfa:	1c43      	adds	r3, r0, #1
 800abfc:	d102      	bne.n	800ac04 <_kill_r+0x1c>
 800abfe:	682b      	ldr	r3, [r5, #0]
 800ac00:	b103      	cbz	r3, 800ac04 <_kill_r+0x1c>
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	bd38      	pop	{r3, r4, r5, pc}
 800ac06:	bf00      	nop
 800ac08:	200009c0 	.word	0x200009c0

0800ac0c <_getpid_r>:
 800ac0c:	f000 b800 	b.w	800ac10 <_getpid>

0800ac10 <_getpid>:
 800ac10:	4b02      	ldr	r3, [pc, #8]	@ (800ac1c <_getpid+0xc>)
 800ac12:	2258      	movs	r2, #88	@ 0x58
 800ac14:	601a      	str	r2, [r3, #0]
 800ac16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac1a:	4770      	bx	lr
 800ac1c:	200009c0 	.word	0x200009c0

0800ac20 <_kill>:
 800ac20:	4b02      	ldr	r3, [pc, #8]	@ (800ac2c <_kill+0xc>)
 800ac22:	2258      	movs	r2, #88	@ 0x58
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac2a:	4770      	bx	lr
 800ac2c:	200009c0 	.word	0x200009c0

0800ac30 <_exit>:
 800ac30:	e7fe      	b.n	800ac30 <_exit>
	...

0800ac34 <_init>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	bf00      	nop
 800ac38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3a:	bc08      	pop	{r3}
 800ac3c:	469e      	mov	lr, r3
 800ac3e:	4770      	bx	lr

0800ac40 <_fini>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	bf00      	nop
 800ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac46:	bc08      	pop	{r3}
 800ac48:	469e      	mov	lr, r3
 800ac4a:	4770      	bx	lr
